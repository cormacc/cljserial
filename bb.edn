{:paths ["scripts"]
 :tasks {:requires ([tasks :as t])

         ;;N.B. The use of {:continue true} below in some of the watch: tasks below is to ensure that
         ;;     subsequent tasks in 'local' and 'examples' are executed when I CTRL-C to cancel the watch
         ;;     Specifically, the tidyup task to shutdown supabase
         ;;     Although this does appear to let the task get called, it fails with the following error:
         ;;     error entering raw mode: input/output error

         local
         {:doc "Run app, portfolio and test watches, starting and stopping supabase"
          :depends [sb:start sb:edn watch:local sb:stop]}

         example
         {:doc "Run examples, portfolio and test watches, starting and stopping supabase"
          :depends [sb:start sb:edn watch:example sb:stop]}

         watch:local
         {:doc  "Run app (port 8080) with local dockerised supabase (test and portfolio builds enabled)."
          :task (run '-local {:parallel true})}
         -local {:depends [-dev:local watch:css]}
         -dev:local {:task (shell
                            {:continue true}
                            "shadow-cljs -A:dev watch app test portfolio --config-merge ./env-local.edn --config-merge ./ui-themes.edn")}

         ;; Not using webpack currently - retaining for future reference
         ;; pack:dev
         ;; {:doc "(Web)Pack app for dev"
         ;;  :task (shell "npx webpack -c ./webpack.config.js --mode development")}

         ;; pack:prod
         ;; {:doc "(Web)Pack app for production"
         ;;  :task (shell "npx webpack -c ./webpack.config.js --mode production")}

         ;; watch:pack
         ;; {:doc "Pack app using webpack"
         ;;  :task (shell "npx webpack -c ./webpack.config.js --mode development -w")}

         watch:cloud
         {:doc  "Run app (port 8080) with cloud-hosted supabase (test and portfolio builds enabled)."
          :task (run '-cloud {:parallel true})}
         -cloud {:depends [watch:css -dev:cloud]}
         -dev:cloud {:task (shell "shadow-cljs -A:dev watch app test portfolio --config-merge ./ui-themes.edn")}

         watch:example
         {:doc  "Run example app (port 8083) with local dockerised supabase (test and portfolio builds enabled)."
          :task (run '-example {:parallel true})}
         -example {:depends [watch:css -example:local]}
         -example:local {:task (shell
                                {:continue true}
                                "shadow-cljs -A:dev watch example test portfolio --config-merge ./env-local.edn --config-merge ./ui-themes.edn")}

         watch:css
         {:doc "Tailwind watch task"
          :task (shell {:continue true}
                       "npx @tailwindcss/cli -i src/css/tailwind.css -o public/css/tailwind.css -w")}

         ;;This started causing a node memory allocation error after the update to v4.0.x
         watch:postcss
         {:doc "Tailwind watch task"
          :task (shell {:continue true :extra-env {"TAILWIND_MODE" "watch"}}
                       "postcss src/css/tailwind.css -o public/css/tailwind.css --verbose -w")}

         watch:portfolio
         {:doc  "Run portfolio component-driven test UI on http://localhost:8082"
          :task (run '-portfolio {:parallel true})}
         -portfolio {:depends [watch:css -portfolio-only]}
         -portfolio-only {:task (shell "shadow-cljs -A:dev watch portfolio --config-merge ./ui-themes.edn")}

         watch:test
         {:doc "Run frontend unit test runner on http://localhost:8081"
          :task (shell "shadow-cljs -A:dev release app --config-merge ./ui-themes.edn")}

         build:release
         {:doc "Build release version of the app."
          :task (shell "shadow-cljs -A:dev release app --config-merge ./ui-themes.edn")}

         sb:start
         {:task (shell "supabase start")}

         sb:stop
         {:task (shell "supabase stop")}

         sb:edn
         {:task t/extract-supabase-env!
          :doc "Extract environment for local dockerised supabase to edn."}

         tailwind:edn
         {:task t/extract-daisyui-themes!
          :doc "Extract list of DaisyUI themes included via tailwind config for use in UI theme selector."}

         flow
         {:doc "FlowStorm debugger"
          :task (shell "clj -Sforce -Sdeps '{:deps {com.github.flow-storm/flow-storm-dbg {:mvn/version \"4.2.0\"}}}' -X flow-storm.debugger.main/start-debugger :port 50655 :repl-type :shadow :build-id :app")}}}
