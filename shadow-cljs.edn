{;;Aliases defined in deps.edn
 :deps {:aliases [:cljs]}

 :dev-http
 {8080 ["public"]
  8081 "test/build"
  ;; N.B. public/css is included so portfolio gets app tailwind.css but not index.html
  8082 ["portfolio/resources/public" "public/css" "classpath:public"]
  ;; For the examples build, we want to pick index.html (and relative js path) from public/example
  ;; But use the same css output as the main app build
  8083 ["public/example" "public"]
  }

 :builds
 {:app {:target :browser
        :modules {:main {:entries [cljserial.app]
                         :init-fn cljserial.app/main}}
        ;;--> WEBPACK
        ;; :js-options {:js-provider :external
        ;;              :external-index "build/index.js"
        ;;              :external-index-format :esm}
        ;;<-- WEBPACK
        ;; This output-dir is implicit
        ;; :output-dir "public/js"
        :dev {:compiler-options
              {:externs ["datascript/externs.js"]}}
        :devtools {:preloads [flow-storm.storm-preload]
                   :http-port 8021}
        :release {:build-options {}}}
  ;; Examples of some of the stack components
  :example {:target :browser
            :modules {:main {:entries [stack.example.app]
                             :init-fn stack.example.app/main}}
            :output-dir "public/example/js"
            :asset-path "/example/js"
            :dev {:compiler-options
                  {:externs ["datascript/externs.js"]}}
            :devtools {:preloads [flow-storm.storm-preload]
                        :http-port 8021}
            :release {:build-options {}}}
  :test {:target :browser-test
         :test-dir "test/build"}
  :portfolio {:target :browser
              :modules {:scenes {:init-fn portfolio/main}}
              :output-dir "portfolio/resources/public/js"
              :asset-path "/js"
              :devtools {:preloads [flow-storm.storm-preload]
                         :http-port 8021}}}

 :nrepl {:middleware [cider.nrepl/cider-middleware ;; it's advisable to explicitly add this middleware. It's automatically added by shadow-cljs (if available in the classpath), unless `:nrepl {:cider false}`
                      refactor-nrepl.middleware/wrap-refactor] ;; refactor-nrepl is optional
         :port 50655} ;; optional - if not specified, a random free port will be used
 }
