{"version":3,"sources":["replicant/dom.cljs"],"mappings":"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","names":["replicant.dom/remove-listener","el","event","temp__5823__auto__","old-handler","G__63782","replicant.dom/on-next-frame","f","js/requestAnimationFrame","replicant.dom/-on-transition-end","vec__63809","cljs.core.nth","n","dur","js/window.getComputedStyle","replicant.transition/get-transition-stats","cljs.core._EQ_","complete","cljs.core/volatile!","timer","started","js/Date","callback","_args","cn","listener","cljs.core/deref","js/clearTimeout","cljs.core/vreset!","js/setTimeout","replicant.dom/create-renderer","replicant.dom/t_replicant$dom63862","_this","text","js/document.createTextNode","tag-name","options","temp__5821__auto__","ns","js/document.createElementNS","js/document.createElement","this","style","v","cljs.core/name","attr","opt","e64090","e","handler","child-node","reference-node","insert-child","replace-child","idx","js/replicant","js/replicant.dom","js/replicant.dom.state","replicant.dom/state","var_args","args__5732__auto__","len__5726__auto__","i__5727__auto__","argseq__5733__auto__","cljs.core/IndexedSeq","replicant.dom/render","p__64238","vec__64239","map__64242","cljs.core/--destructure-map","cljs.core.get","seq64227","G__64228","cljs.core/first","cljs.core/next","G__64229","self__5711__auto__","hiccup","aliases","alias-data","rendering?","cljs.core.get_in","cljs.core/contains?","cljs.core.assoc","p1__64224#","cljs.core.update_in","cljs.core.conj","cljs.core/assoc-in","map__64245","map__64246","renderer","current","unmounts","or__5002__auto__","replicant.alias/get-registered-aliases","hiccup__34160__auto__","cljs.core/vector?","cljs.core/map?","cljs.core/second","k__34161__auto__","cljs.core.into","cljs.core/rest","vdom","replicant.core.reconcile","cljs.core.update","cljs.core/merge","pending","p1__64225#","cljs.core/vec","replicant.dom/unmount","cljs.core.dissoc","replicant.dom/set-dispatch!","replicant.core/*dispatch*"],"sourcesContent":["(ns replicant.dom\n  (:require [replicant.alias :as alias]\n            [replicant.assert :as assert]\n            [replicant.core :as r]\n            [replicant.env :as env]\n            [replicant.protocols :as replicant]\n            [replicant.transition :as transition]))\n\n(defn ^:no-doc remove-listener [^js/EventTarget el event]\n  (when-let [old-handler (some-> el .-replicantHandlers (aget event))]\n    (.removeEventListener el event old-handler)))\n\n(defn ^:no-doc on-next-frame [f]\n  (js/requestAnimationFrame\n   #(js/requestAnimationFrame f)))\n\n(defn ^:no-doc -on-transition-end [el f]\n  (let [[n dur] (-> (js/window.getComputedStyle el)\n                    (.getPropertyValue \"transition-duration\")\n                    transition/get-transition-stats)]\n    (if (= n 0)\n      (f)\n      (let [complete (volatile! 0)\n            timer (volatile! nil)\n            started (js/Date.)\n            callback (fn listener [& _args]\n                       (let [cn (vswap! complete inc)]\n                         (when (or (<= n cn)\n                                   (< dur (- (js/Date.) started)))\n                           (.removeEventListener el \"transitionend\" listener)\n                           (js/clearTimeout @timer)\n                           (f))))]\n        (.addEventListener el \"transitionend\" callback)\n        ;; The timer is a fail-safe. You could have set transition properties\n        ;; that either don't change, or don't change in a way that triggers an\n        ;; actual transition on unmount (e.g. changing height from auto to 0\n        ;; causes no transition). When this happens, there will not be as many\n        ;; transitionend events as there are transition durations. To avoid\n        ;; getting stuck, the timer will come in and clean up.\n        ;;\n        ;; The timer is set with a hefty delay to avoid cutting a transition\n        ;; short, in the case of a backed up browser working on overtime. Not\n        ;; sure how realistic this is, but better safe than sorry, and the\n        ;; important part is that the element doesn't get stuck forever.\n        (vreset! timer (js/setTimeout callback (+ dur 200)))))))\n\n(defn ^:no-doc create-renderer []\n  (reify\n    replicant/IRender\n    (create-text-node [_this text]\n      (js/document.createTextNode text))\n\n    (create-element [_this tag-name options]\n      (if-let [ns (:ns options)]\n        (js/document.createElementNS ns tag-name)\n        (js/document.createElement tag-name)))\n\n    (set-style [this ^js el style v]\n      (.setProperty (.-style el) (name style) v)\n      this)\n\n    (remove-style [this ^js el style]\n      (.removeProperty (.-style el) (name style))\n      this)\n\n    (add-class [this ^js el cn]\n      (.add (.-classList el) cn)\n      this)\n\n    (remove-class [this ^js el cn]\n      (.remove (.-classList el) cn)\n      this)\n\n    (set-attribute [this ^js el attr v opt]\n      (try\n        (cond\n          (= \"innerHTML\" attr)\n          (set! (.-innerHTML el) v)\n\n          (= \"value\" attr)\n          (set! (.-value el) v)\n\n          (= \"default-value\" attr)\n          (.setAttribute el \"value\" v)\n\n          (= \"selected\" attr)\n          (set! (.-selected el) v)\n\n          (= \"default-selected\" attr)\n          (.setAttribute el \"selected\" v)\n\n          (= \"checked\" attr)\n          (set! (.-checked el) v)\n\n          (= \"default-checked\" attr)\n          (.setAttribute el \"checked\" v)\n\n          (= \"disabled\" attr)\n          (set! (.-disabled el) v)\n\n          (= \"readonly\" attr)\n          (set! (.-readonly el) v)\n\n          (= \"required\" attr)\n          (set! (.-required el) v)\n\n          (:ns opt)\n          (.setAttributeNS el (:ns opt) attr v)\n\n          :else\n          (.setAttribute el attr v))\n        (catch :default e\n          (assert/log-error\n           (str \"Replicant caught an error during rendering: \"\n                (.-message e)))))\n      this)\n\n    (remove-attribute [this ^js el attr]\n      (cond\n        (= \"innerHTML\" attr)\n        (set! (.-innerHTML el) \"\")\n\n        (= \"value\" attr)\n        (set! (.-value el) nil)\n\n        (= \"default-value\" attr)\n        (.removeAttribute el \"value\")\n\n        (= \"selected\" attr)\n        (set! (.-selected el) nil)\n\n        (= \"default-selected\" attr)\n        (.removeAttribute el \"selected\")\n\n        (= \"checked\" attr)\n        (set! (.-checked el) nil)\n\n        (= \"default-checked\" attr)\n        (.removeAttribute el \"checked\")\n\n        (= \"disabled\" attr)\n        (set! (.-disabled el) nil)\n\n        (= \"readonly\" attr)\n        (set! (.-readonly el) nil)\n\n        (= \"required\" attr)\n        (set! (.-required el) nil)\n\n        :else\n        (.removeAttribute el attr))\n      this)\n\n    (set-event-handler [this ^js/EventTarget el event handler]\n      (when-not (.-replicantHandlers el)\n        (set! (.-replicantHandlers el) #js {}))\n      (let [event (name event)]\n        (remove-listener el event)\n        (aset (.-replicantHandlers el) event handler)\n        (.addEventListener el event handler))\n      this)\n\n    (remove-event-handler [this ^js/EventTarget el event]\n      (let [event (name event)]\n        (remove-listener el event)\n        (aset (.-replicantHandlers el) event nil))\n      this)\n\n    (append-child [this ^js el child-node]\n      (.appendChild el child-node)\n      this)\n\n    (insert-before [this ^js el child-node reference-node]\n      (.insertBefore el child-node reference-node)\n      this)\n\n    (remove-child [this ^js el child-node]\n      (.removeChild el child-node)\n      this)\n\n    (on-transition-end [this ^js el f]\n      (-on-transition-end el f)\n      this)\n\n    (replace-child [this ^js el insert-child replace-child]\n      (.replaceChild el insert-child replace-child)\n      this)\n\n    (remove-all-children [this ^js el]\n      (set! (.-textContent el) \"\")\n      this)\n\n    (get-child [_this ^js el idx]\n      (aget (.-childNodes el) idx))\n\n    (next-frame [_this f]\n      (on-next-frame f))))\n\n(defonce ^:no-doc state (volatile! {}))\n\n(defn ^:export render\n  \"Render `hiccup` in DOM element `el`. Replaces any pre-existing content not\n  created by this function. Subsequent calls with the same `el` will update the\n  rendered DOM by comparing `hiccup` to the previous `hiccup`.\"\n  [^js el hiccup & [{:keys [aliases alias-data]}]]\n  (let [rendering? (get-in @state [el :rendering?])]\n    (when-not (contains? @state el)\n      (set! (.-innerHTML el) \"\")\n      (vswap! state assoc el {:renderer (create-renderer)\n                              :unmounts (volatile! #{})\n                              :rendering? true\n                              :queue []}))\n    (if rendering?\n      (vswap! state update-in [el :queue] #(conj % hiccup))\n      (do\n        (vswap! state assoc-in [el :rendering?] true)\n        (let [{:keys [renderer current unmounts]} (get @state el)\n              aliases (or aliases (alias/get-registered-aliases))\n              hiccup (env/with-dev-keys hiccup [aliases alias-data])\n              {:keys [vdom]} (r/reconcile renderer el hiccup current {:unmounts unmounts\n                                                                      :aliases aliases\n                                                                      :alias-data alias-data})]\n          (vswap! state update el merge {:current vdom\n                                         :rendering? false})\n          (when-let [pending (first (:queue (get @state el)))]\n            (js/requestAnimationFrame #(render el pending))\n            (vswap! state update-in [el :queue] #(vec (rest %))))))))\n  el)\n\n(defn ^:export unmount\n  \"Unmounts elements in `el`, and clears internal state.\"\n  [^js el]\n  (if (get-in @state [el :rendering?])\n    (js/requestAnimationFrame #(unmount el))\n    (do\n      (render el nil)\n      (vswap! state dissoc el)\n      nil)))\n\n(defn ^:export set-dispatch!\n  \"Register a global dispatch function for event handlers and life-cycle hooks\n  that are not functions. See data-driven event handlers and life-cycle hooks in\n  the user guide for details.\"\n  [f]\n  (set! r/*dispatch* f))\n"],"x_google_ignoreList":[0]}