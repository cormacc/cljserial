{"version":3,"sources":["taoensso/telemere/impl.cljc"],"mappings":"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","names":["taoensso.telemere.impl/uid-kind","base","kind-filter","ns-filter","id-filter","min-level","js/taoensso","js/taoensso.telemere","js/taoensso.telemere.impl","js/taoensso.telemere.impl.*rt-sig-filter*","taoensso.telemere.impl/*rt-sig-filter*","taoensso.encore.signals/sig-filter","or__5002__auto__","cljs.core.get","this__5287__auto__","writer__5288__auto__","opt__5289__auto__","cljs.core/-write","taoensso.telemere.impl/MsgSkip","taoensso.telemere.impl/->MsgSkip","taoensso.telemere.impl/MsgSplice","taoensso.telemere.impl/->MsgSplice","args","taoensso.telemere.impl/msg-skip","taoensso.telemere.impl/msg-splice","xform","rf","rf*","acc","in","cljs.core.reduce","taoensso.telemere.impl/signal-msg","taoensso.encore.str_join","taoensso.telemere.impl/default-trace-msg","form","value","error","nsecs","taoensso.encore/ex-type","taoensso.telemere.impl/*trace-root*","taoensso.telemere.impl/*trace-parent*","this__5300__auto__","k__5301__auto__","this__5302__auto__","k61568","else__5303__auto__","G__61601","cljs.core/Keyword","schema","inst","uid","location","ns","line","column","file","sample-rate","kind","id","level","ctx","parent","root","data","kvs","msg_","run-form","run-val","end-inst","run-nsecs","__extmap","this__5320__auto__","f__5321__auto__","init__5322__auto__","ret__5323__auto__","p__61610","vec__61611","k__5324__auto__","cljs.core.nth","v__5325__auto__","this__5315__auto__","writer__5316__auto__","opts__5317__auto__","pr-pair__5318__auto__","keyval__5319__auto__","cljs.core/pr-sequential-writer","cljs.core.concat","cljs.core/PersistentVector","G__61567","cljs.core/RecordIter","cljs.core/-iterator","cljs.core/nil-iter","this__5298__auto__","__meta","this__5295__auto__","__hash","this__5304__auto__","cljs.core/count","this__5296__auto__","h__5111__auto__","coll__5297__auto__","cljs.core/hash-unordered-coll","this61569","other61570","cljs.core._EQ_","this__5310__auto__","k__5311__auto__","cljs.core/contains?","cljs.core.dissoc","cljs.core/-with-meta","cljs.core.into","cljs.core/not-empty","this__5307__auto__","G__61662","this__5308__auto__","k__5309__auto__","pred__61663","cljs.core/keyword-identical?","expr__61664","cljs.core.assoc","this__5313__auto__","cljs.core/seq","cljs.core/MapEntry","this__5299__auto__","this__5305__auto__","entry__5306__auto__","cljs.core/vector?","cljs.core/-nth","cljs.core/-conj","taoensso.telemere.impl/Signal","this__5346__auto__","cljs.core/List","writer__5347__auto__","G__61577","extmap__5342__auto__","G__61686","cljs.core/record?","taoensso.telemere.impl/->Signal","taoensso.telemere.impl/map->Signal","sig","cljs.core/PROTOCOL_SENTINEL","__w","_","cljs.core.pr_str","taoensso.telemere.impl/impl-signal-keys","taoensso.telemere.impl/standard-signal-keys","clojure.set.difference","cljs.core/set","cljs.core/keys","taoensso.telemere.impl/WrappedSignal","taoensso.telemere.impl/->WrappedSignal","signal-value_","sig-filter","handler-sample-rate","taoensso.encore.signals/signal-with-combined-sample-rate","cljs.core/force","taoensso.telemere.impl/wrap-signal","signal","cljs.core/map?","map__61709","cljs.core/--destructure-map","js/taoensso.telemere.impl.*sig-handlers*","taoensso.telemere.impl/*sig-handlers*","k61715","G__61720","vol_","last-only?","trap?","p__61722","vec__61723","G__61714","this61716","other61717","G__61745","pred__61748","expr__61749","taoensso.telemere.impl/SpyOpts","G__61718","G__61776","taoensso.telemere.impl/->SpyOpts","taoensso.telemere.impl/map->SpyOpts","taoensso.telemere.impl/*sig-spy*","taoensso.telemere.impl/force-msg-in-sig","temp__5821__auto__","e","cljs.core/find","cljs.core/val","taoensso.telemere.impl/dispatch-signal!","temp__5823__auto__","map__61799","sv","taoensso.encore.signals/signal-value","cljs.core/vreset!","cljs.core/-vreset!","p1__61795#","cljs.core/-deref","cljs.core.conj","taoensso.encore.signals/call-handlers!","unused__11220__auto__","self__","G__61820","js/Error","args61818","cljs.core/aclone","taoensso.telemere.impl/RunResult","taoensso.telemere.impl/->RunResult","signal_","cljs.core.ex_info","e61831","t","taoensso.telemere.impl/inst+nsecs","js/Date"],"sourcesContent":["(ns ^:no-doc taoensso.telemere.impl\n  \"Private ns, implementation detail.\n  Signal design shared by: Telemere, Tufte, Timbre.\"\n  (:refer-clojure :exclude [binding])\n  (:require\n   [clojure.set             :as set]\n   [taoensso.encore         :as enc :refer [binding have have?]]\n   [taoensso.encore.signals :as sigs])\n\n  #?(:cljs\n     (:require-macros\n      [taoensso.telemere.impl :refer [with-signal]])))\n\n(comment\n  (remove-ns (symbol (str *ns*)))\n  (:api (enc/interns-overview)))\n\n#?(:clj\n   (enc/declare-remote\n     ^:dynamic taoensso.telemere/*ctx*\n     ^:dynamic taoensso.telemere/*middleware*\n     ^:dynamic taoensso.telemere/*uid-fn*\n     ^:dynamic taoensso.telemere/*otel-tracer*))\n\n;;;; Config\n\n#?(:clj\n   (do\n     (def present:tools-logging?  (enc/have-resource? \"clojure/tools/logging.clj\"))\n     (def present:slf4j?          (enc/compile-if org.slf4j.Logger                           true false))\n     (def present:telemere-slf4j? (enc/compile-if com.taoensso.telemere.slf4j.TelemereLogger true false))\n     (def present:otel?           (enc/compile-if io.opentelemetry.context.Context           true false))\n\n     (def enabled:tools-logging?\n       \"Documented at `taoensso.telemere.tools-logging/tools-logging->telemere!`.\"\n       (enc/get-env {:as :bool, :default false} :clojure.tools.logging/to-telemere))\n\n     (def enabled:otel-tracing?\n       \"Documented at `taoensso.telemere/otel-tracing?`.\"\n       (enc/get-env {:as :bool, :default present:otel?}\n         :taoensso.telemere/otel-tracing<.platform>))))\n\n(def uid-kind\n  \"Documented at `taoensso.telemere/*uid-fn*`.\"\n  (enc/get-env {:as :edn, :default :default}\n    :taoensso.telemere/uid-kind<.platform><.edn>))\n\n#?(:clj\n   (let [base        (enc/get-env {:as :edn} :taoensso.telemere/ct-filters<.platform><.edn>)\n         kind-filter (enc/get-env {:as :edn} :taoensso.telemere/ct-kind-filter<.platform><.edn>)\n         ns-filter   (enc/get-env {:as :edn} :taoensso.telemere/ct-ns-filter<.platform><.edn>)\n         id-filter   (enc/get-env {:as :edn} :taoensso.telemere/ct-id-filter<.platform><.edn>)\n         min-level   (enc/get-env {:as :edn} :taoensso.telemere/ct-min-level<.platform><.edn>)]\n\n     (enc/defonce ct-sig-filter\n       \"`SigFilter` used for compile-time elision, or nil.\"\n       (sigs/sig-filter\n         {:kind-filter (or kind-filter (get base :kind-filter))\n          :ns-filter   (or ns-filter   (get base :ns-filter))\n          :id-filter   (or id-filter   (get base :id-filter))\n          :min-level   (or min-level   (get base :min-level))}))))\n\n(let [base        (enc/get-env {:as :edn}                 :taoensso.telemere/rt-filters<.platform><.edn>)\n      kind-filter (enc/get-env {:as :edn}                 :taoensso.telemere/rt-kind-filter<.platform><.edn>)\n      ns-filter   (enc/get-env {:as :edn}                 :taoensso.telemere/rt-ns-filter<.platform><.edn>)\n      id-filter   (enc/get-env {:as :edn}                 :taoensso.telemere/rt-id-filter<.platform><.edn>)\n      min-level   (enc/get-env {:as :edn, :default :info} :taoensso.telemere/rt-min-level<.platform><.edn>)]\n\n  (enc/defonce ^:dynamic *rt-sig-filter*\n    \"`SigFilter` used for runtime filtering, or nil.\"\n    (sigs/sig-filter\n      {:kind-filter (or kind-filter (get base :kind-filter))\n       :ns-filter   (or ns-filter   (get base :ns-filter))\n       :id-filter   (or id-filter   (get base :id-filter))\n       :min-level   (or min-level   (get base :min-level))})))\n\n(comment (enc/get-env {:as :edn, :return :explain} :taoensso.telemere/rt-filters<.platform><.edn>))\n\n;;;; Utils\n\n#?(:clj\n   (defmacro on-init [& body]\n     (let [sym        (with-meta '__on-init {:private true})\n           compiling? (if (:ns &env) false `*compile-files*)]\n       `(defonce ~sym (when-not ~compiling? ~@body nil)))))\n\n(comment (macroexpand-1 '(on-init (println \"foo\"))))\n\n;;;; Messages\n\n(deftype MsgSkip   [])\n(deftype MsgSplice [args])\n\n(def ^:public msg-skip\n  \"For use within signal message vectors.\n  Special value that will be ignored (noop) when creating message.\n  Useful for conditionally skipping parts of message content, etc.:\n\n    (signal! {:msg [\\\"Hello\\\" (if <cond> <then> msg-skip) \\\"world\\\"] <...>}) or\n    (log!          [\\\"Hello\\\" (if <cond> <then> msg-skip) \\\"world\\\"]), etc.\n\n      %> {:msg_ \\\"Hello world\\\" <...>}\"\n\n  (MsgSkip.))\n\n(defn ^:public msg-splice\n  \"For use within signal message vectors.\n  Wraps given arguments so that they're spliced when creating message.\n  Useful for conditionally splicing in extra message content, etc.:\n\n    (signal! {:msg [(when <cond> (msg-splice [\\\"Username:\\\" \\\"Steve\\\"])) <...>]}) or\n    (log!          [(when <cond> (msg-splice [\\\"Username:\\\" \\\"Steve\\\"]))])\n\n      %> {:msg_ \\\"Username: Steve\\\"}\"\n\n  [args] (MsgSplice. args))\n\n(let [;; xform (map #(if (nil? %) \"nil\" %))\n      xform\n      (fn [rf]\n        (let [;; Protocol-based impln (extensible but ~20% slower)\n              ;; rf* (fn rf* [acc in] (reduce-msg-arg in acc rf))\n              rf*\n              (fn rf* [acc in]\n                (enc/cond\n                  (instance? MsgSplice in) (reduce rf* acc (.-args ^MsgSplice in))\n                  (instance? MsgSkip   in)             acc\n                  (nil?                in)         (rf acc \"nil\")\n                  :else                            (rf acc in)))]\n          (fn\n            ([      ] (rf))\n            ([acc   ] (rf  acc))\n            ([acc in] (rf* acc in)))))]\n\n  (defn signal-msg\n    \"Returns string formed by joining all args with \\\" \\\" separator,\n    rendering nils as \\\"nil\\\". Supports `msg-skip`, `msg-splice`.\n\n    API intended to be usefully different to `str`:\n      -        `str`: no   spacers, skip nils, no     splicing\n      - `signal-msg`: auto spacers, show nils, opt-in splicing\"\n\n    {:tag #?(:clj 'String :cljs 'string)}\n    [args] (enc/str-join \" \" xform args)))\n\n(comment\n  (enc/qb 2e6 ; [305.61 625.35]\n    (str         \"a\" \"b\" \"c\" nil :kw)                         ; \"abc:kw\"\n    (signal-msg [\"a\" \"b\" \"c\" nil :kw (msg-splice [\"d\" \"e\"])]) ; \"a b c nil :kw d e\"\n    ))\n\n#?(:clj\n   (defn- parse-msg-form [msg-form]\n     (when msg-form\n       (enc/cond\n         (string? msg-form) msg-form\n         (vector? msg-form)\n         (enc/cond\n           (empty?           msg-form) nil\n           :let [[m1 & more] msg-form]\n           (and (string? m1) (nil? more)) m1\n           :else `(delay (signal-msg ~msg-form)))\n\n         ;; Auto delay-wrap (user should never delay-wrap!)\n         ;; :else `(delay ~msg-form)\n\n         ;; Leave user to delay-wrap when appropriate (document)\n         :else msg-form))))\n\n(defn default-trace-msg\n  [form value error nsecs]\n  (if error\n    (str form \" !> \" (enc/ex-type error))\n    (str form \" => \" value)))\n\n(comment\n  (default-trace-msg \"(+ 1 2)\" 3   nil               12345)\n  (default-trace-msg \"(+ 1 2)\" nil (Exception. \"Ex\") 12345))\n\n;;;; Tracing\n\n(enc/def* ^:dynamic *trace-root*   \"?{:keys [id uid]}\" nil) ; Fixed once bound\n(enc/def* ^:dynamic *trace-parent* \"?{:keys [id uid]}\" nil) ; Changes each nesting level\n\n;; Root Telemere ids: {:parent nil, :id id1, :uid uid1  :root {:id id1, :uid uid1}}\n;; Root     OTel ids: {:parent nil, :id id1, :uid span1,:root {:id id1, :uid trace1}}\n\n;;;; OpenTelemetry\n\n#?(:clj\n   (enc/compile-when present:otel?\n     (do\n       (enc/def*            ^:dynamic *otel-context* \"`?Context`\" nil)\n       (defmacro otel-context [] `(or *otel-context* (io.opentelemetry.context.Context/current)))\n\n       (defn otel-trace-id\n         \"Returns valid `traceId` or nil.\"\n         [^io.opentelemetry.context.Context context]\n         (let [sc (.getSpanContext (io.opentelemetry.api.trace.Span/fromContext context))]\n           (when (.isValid sc) (.getTraceId sc))))\n\n       (defn otel-span-id\n         \"Returns valid `spanId` or nil.\"\n         [^io.opentelemetry.context.Context context]\n         (let [sc (.getSpanContext (io.opentelemetry.api.trace.Span/fromContext context))]\n           (when (.isValid sc) (.getSpanId sc))))\n\n       (defn viable-tracer\n         \"Returns viable `Tracer`, or nil.\"\n         [tracer]\n         (when-let [tracer ^io.opentelemetry.api.trace.Tracer tracer]\n           (let [sb   (.spanBuilder tracer \"test-span\")\n                 span (.startSpan sb)]\n             (when (.isValid (.getSpanContext span))\n               tracer))))\n\n       (def ^String otel-name (enc/fmemoize (fn [id] (if id (enc/as-qname id) \"telemere/no-id\"))))\n       (defn otel-context+span\n         \"Returns new `Context` that includes minimal `Span` in given parent `Context`.\n         We leave the (expensive) population of attributes, etc. for signal handler.\n         Interop needs only the basics (t0, traceId, spanId, spanName) right away.\"\n         ^io.opentelemetry.context.Context\n         [id inst ?parent-context]\n         (let [parent-context (or ?parent-context (otel-context))]\n           (enc/if-not [tracer (force taoensso.telemere/*otel-tracer*)]\n             parent-context ; Can't add Span without Tracer\n             (let [sb (.spanBuilder ^io.opentelemetry.api.trace.Tracer tracer (otel-name id))]\n               (.setStartTimestamp sb ^java.time.Instant inst)\n               (.with ^io.opentelemetry.context.Context parent-context\n                 (.startSpan sb)))))))))\n\n(comment\n  (enc/qb 1e6 (otel-context) (otel-context+span ::id1 (enc/now-inst) nil)) ; [46.42 186.89]\n  (viable-tracer (force taoensso.telemere/*otel-tracer*))\n  (otel-trace-id (otel-context)))\n\n;;;; Main types\n\n(defrecord Signal\n  ;; Telemere's main public data type, we avoid nesting and duplication\n  [schema inst uid,\n   location ns line column file, #?@(:clj [host thread _otel-context]),\n   sample-rate, kind id level, ctx parent root, data kvs msg_,\n   error run-form run-val end-inst run-nsecs]\n \n  Object (toString [sig] (str \"taoensso.telemere.Signal\" (into {} sig))))\n\n;; NB intentionally verbose constructors for readability, to support extra keys\n(do     (enc/def-print-impl [sig Signal] (str \"#taoensso.telemere.Signal\"      (pr-str (into {} sig)))))\n#?(:clj (enc/def-print-dup  [sig Signal] (str \"#taoensso.telemere.impl.Signal\" (pr-str (into {} sig)))))\n\n(def     impl-signal-keys #{:_otel-context})\n(def standard-signal-keys\n  (set/difference (set (keys (map->Signal {:schema 0})))\n    impl-signal-keys))\n\n(comment\n  (def s1 (with-signal (signal! {:level :info, :my-k1 :my-v1})))\n  (read-string (str    (assoc s1 :my-k2 :my-v2)))\n  (read-string (pr-str (assoc s1 :my-k2 :my-v2)))\n  (read-string (binding [*print-dup* true] (pr-str (assoc s1 :my-k2 :my-v2))))\n\n  (defrecord MyRec [x])\n  (read-string ; Non-verbose will fail on any extra keys\n    (binding [*print-dup* true, *verbose-defrecords* false]\n      (pr-str (assoc (MyRec. :x) :y :y)))))\n\n(deftype #_defrecord WrappedSignal\n  ;; Internal type to implement `sigs/IFilterableSignal`,\n  ;; incl. lazy + cached `signal-value_` field.\n  [kind ns id level signal-value_]\n  sigs/IFilterableSignal\n  (allow-signal? [_ sig-filter] (sig-filter kind ns id level))\n  (signal-debug  [_] {:kind kind, :ns ns, :id id, :level level})\n  (signal-value  [_ handler-sample-rate]\n    (sigs/signal-with-combined-sample-rate handler-sample-rate\n      (force signal-value_))))\n\n(defn wrap-signal\n  \"Used by `taoensso.telemere/dispatch-signal!`.\"\n  [signal]\n  (when (map? signal)\n    (let [{:keys     [kind ns id level]} signal]\n      (WrappedSignal. kind ns id level   signal))))\n\n;;;; Handlers\n\n(enc/defonce ^:dynamic *sig-handlers* \"?[<wrapped-handler-fn>]\" nil)\n\n(defrecord SpyOpts [vol_ last-only? trap?])\n(def ^:dynamic *sig-spy* \"?SpyOpts\" nil)\n\n(defn force-msg-in-sig [sig]\n  (if-not (map? sig)\n    sig\n    (if-let [e (find sig :msg_)]\n      (assoc sig :msg_ (force (val e)))\n      (do    sig))))\n\n#?(:clj\n   (defmacro ^:public with-signal\n     \"Experimental, subject to change.\n     Executes given form, trapping errors. Returns the LAST signal created by form.\n     Useful for tests/debugging.\n\n     Options:\n       `trap-signals?` (default false)\n         Should ALL signals created by form be trapped to prevent normal dispatch\n         to registered handlers?\n\n       `raw-msg?` (default false)\n         Should delayed `:msg_` in returned signal be retained as-is?\n         Delay is otherwise replaced by realized string.\n\n     See also `with-signals`.\"\n     ([                       form] `(with-signal false false          ~form))\n     ([         trap-signals? form] `(with-signal false ~trap-signals? ~form))\n     ([raw-msg? trap-signals? form]\n      `(let [sig_# (volatile! nil)]\n         (binding [*sig-spy* (SpyOpts. sig_# true ~trap-signals?)]\n           (enc/try* ~form (catch :all _#)))\n\n         (if ~raw-msg?\n           (do               @sig_#)\n           (force-msg-in-sig @sig_#))))))\n\n#?(:clj\n   (defmacro ^:public with-signals\n     \"Experimental, subject to change.\n     Like `with-signal` but returns [[<form-value> <form-error>] [<signal1> ...]].\n     Useful for tests/debugging.\"\n     ([                        form] `(with-signals false false          ~form))\n     ([          trap-signals? form] `(with-signals false ~trap-signals? ~form))\n     ([raw-msgs? trap-signals? form]\n      `(let [sigs_# (volatile! nil)\n             form-result#\n             (binding [*sig-spy* (SpyOpts. sigs_# false ~trap-signals?)]\n               (enc/try*\n                 (do            [~form nil])\n                 (catch :all t# [nil    t#])))\n\n             sigs#\n             (if ~raw-msgs?\n               (do                    @sigs_#)\n               (mapv force-msg-in-sig @sigs_#))]\n\n         [form-result# (not-empty sigs#)]))))\n\n#?(:clj (def ^:dynamic *sig-spy-off-thread?* false))\n(defn dispatch-signal!\n  \"Dispatches given signal to registered handlers, supports `with-signal/s`.\"\n  [signal]\n  (or\n    (when-let [{:keys [vol_ last-only? trap?]} *sig-spy*]\n      (let [sv\n            #?(:cljs (sigs/signal-value signal nil)\n               :clj\n               (if *sig-spy-off-thread?* ; Simulate async handler\n                 (deref (enc/promised :user (sigs/signal-value signal nil)))\n                 (do                        (sigs/signal-value signal nil))))]\n\n        (if last-only?\n          (vreset! vol_                  sv)\n          (vswap!  vol_ #(conj (or % []) sv))))\n      (when trap? :trapped))\n\n    (sigs/call-handlers! *sig-handlers* signal)\n    :dispatched))\n\n;;;; Signal API helpers\n\n#?(:clj (defmacro signal-docstring [    rname] (enc/slurp-resource (str \"signal-docstrings/\" (name rname) \".txt\"))))\n#?(:clj (defmacro defhelp          [sym rname] `(enc/def* ~sym {:doc ~(eval `(signal-docstring ~rname))} \"See docstring\")))\n\n#?(:clj\n   (defn signal-arglists [macro-id]\n     (case macro-id\n\n       :signal! ; [opts] => allowed? / run result (value or throw)\n       '([{:as opts :keys\n           [#_defaults #_elide? #_allow? #_expansion-id, ; Undocumented\n            elidable? location #_location* inst uid middleware middleware+,\n            sample-rate kind ns id level when rate-limit rate-limit-by,\n            ctx ctx+ parent root trace?, do let data msg error run & kvs]}])\n\n       :signal-allowed?\n       '([{:as opts :keys\n           [#_defaults #_elide? #_allow? #_expansion-id, ; Undocumented\n            elidable? location #_location* #_inst #_uid #_middleware #_middleware+,\n            sample-rate kind ns id level when rate-limit rate-limit-by,\n            #_ctx #_ctx+ #_parent #_root #_trace?, #_do #_let #_data #_msg #_error #_run #_& #_kvs]}])\n\n       :event! ; [id] [id level-or-opts] => allowed?\n       '([id      ]\n         [id level]\n         [id\n          {:as opts :keys\n           [#_defaults #_elide? #_allow? #_expansion-id,\n            elidable? location #_location* inst uid middleware middleware+,\n            sample-rate kind ns id level when rate-limit rate-limit-by,\n            ctx ctx+ parent root trace?, do let data msg error #_run & kvs]}])\n\n       :log! ; [msg] [level-or-opts msg] => allowed?\n       '([      msg]\n         [level msg]\n         [{:as opts :keys\n           [#_defaults #_elide? #_allow? #_expansion-id,\n            elidable? location #_location* inst uid middleware middleware+,\n            sample-rate kind ns id level when rate-limit rate-limit-by,\n            ctx ctx+ parent root trace?, do let data msg error #_run & kvs]}\n          msg])\n\n       :error! ; [error] [id-or-opts error] => given error\n       '([   error]\n         [id error]\n         [{:as opts :keys\n           [#_defaults #_elide? #_allow? #_expansion-id,\n            elidable? location #_location* inst uid middleware middleware+,\n            sample-rate kind ns id level when rate-limit rate-limit-by,\n            ctx ctx+ parent root trace?, do let data msg error #_run & kvs]}\n          error])\n\n       :trace! ; [form] [id-or-opts form] => run result (value or throw)\n       '([   form]\n         [id form]\n         [{:as opts :keys\n           [#_defaults #_elide? #_allow? #_expansion-id,\n            elidable? location #_location* inst uid middleware middleware+,\n            sample-rate kind ns id level when rate-limit rate-limit-by,\n            ctx ctx+ parent root trace?, do let data msg error run & kvs]}\n          form])\n\n       :spy! ; [form] [level-or-opts form] => run result (value or throw)\n       '([      form]\n         [level form]\n         [{:as opts :keys\n           [#_defaults #_elide? #_allow? #_expansion-id,\n            elidable? location #_location* inst uid middleware middleware+,\n            sample-rate kind ns id level when rate-limit rate-limit-by,\n            ctx ctx+ parent root trace?, do let data msg error run & kvs]}\n          form])\n\n       :catch->error! ; [form] [id-or-opts form] => run result (value or throw)\n       '([   form]\n         [id form]\n         [{:as opts :keys\n           [#_defaults #_elide? #_allow? #_expansion-id, rethrow? catch-val,\n            elidable? location #_location* inst uid middleware middleware+,\n            sample-rate kind ns id level when rate-limit rate-limit-by,\n            ctx ctx+ parent root trace?, do let data msg error #_run & kvs]}\n          form])\n\n       :uncaught->error! ; [] [id-or-opts] => nil\n       '([  ]\n         [id]\n         [{:as opts :keys\n           [#_defaults #_elide? #_allow? #_expansion-id,\n            elidable? location #_location* inst uid middleware middleware+,\n            sample-rate kind ns id level when rate-limit rate-limit-by,\n            ctx ctx+ parent root trace?, do let data msg error #_run & kvs]}])\n\n       (enc/unexpected-arg! macro-id))))\n\n#?(:clj\n   (defn signal-opts\n     \"Util to help write common signal wrapper macros.\"\n     [context location* defaults main-key extra-key arg-order args]\n     (enc/cond\n       :let [context-name (str \"`\" (name context) \"`\")\n             num-args (count args)\n             bad-args!\n             (fn [msg data]\n               (throw\n                 (ex-info (str \"Invalid \" context-name \" args: \" msg)\n                   (conj\n                     {:context context\n                      :args    args}\n                     data))))]\n\n       (not (#{1 2} num-args))\n       (bad-args! (str \"wrong number of args (\" num-args \")\")\n         {:actual num-args, :expected #{1 2}})\n\n       :let [[main-arg extra-arg]\n             (case arg-order\n               :dsc          args  ; [main ...]\n               :asc (reverse args) ; [... main]\n               (enc/unexpected-arg!\n                 arg-order))\n\n             extra-arg?  (= num-args 2)\n             extra-opts? (and extra-arg? (map? extra-arg))]\n\n       :do\n       (enc/cond\n         (and (map? main-arg) (not extra-arg?))\n         (bad-args! \"single map arg is USUALLY a mistake, so isn't allowed. Please use 2 arg arity instead, or `signal!`.\" {})\n\n         (and extra-opts? (contains? extra-arg main-key))\n         (bad-args! (str \"given opts should not contain `\" main-key \"`.\") {}))\n\n       :let [base  (merge defaults {:location* location*, main-key main-arg})]\n       extra-opts? (merge base            extra-arg)\n       extra-arg?  (merge base {extra-key extra-arg})\n       :else              base)))\n\n(comment (signal-opts `foo! :loc* {:level :info} :id :level :dsc [::my-id {:level :warn}]))\n\n#?(:clj\n   (defn signal-catch-opts\n     \"For use within `trace!` and `spy!`, etc.\"\n     [main-opts]\n     (let [catch-id-or-opts (get    main-opts :catch->error)\n           main-opts        (dissoc main-opts :catch->error)\n           catch-opts\n           (when catch-id-or-opts\n             (let [base ; Inherit some opts from main\n                   (enc/assoc-some {}\n                     :location* (get main-opts :location*)\n                     :id        (get main-opts :id))]\n               (cond\n                 (true? catch-id-or-opts) (do   base)\n                 (map?  catch-id-or-opts) (conj base catch-id-or-opts)\n                 :else                    (conj base {:id catch-id-or-opts}))))]\n\n       [main-opts catch-opts])))\n\n(comment\n  (signal-catch-opts {:id :main-id, :catch->error           true})\n  (signal-catch-opts {:id :main-id, :catch->error      :error-id})\n  (signal-catch-opts {:id :main-id, :catch->error {:id :error-id}}))\n\n;;;; Signal macro\n\n(deftype RunResult [value error ^long run-nsecs]\n  #?(:clj clojure.lang.IFn :cljs IFn)\n  (#?(:clj invoke :cljs -invoke) [_] (if error (throw error) value))\n  (#?(:clj invoke :cljs -invoke) [_ signal_]\n    (if error\n      (throw\n        (ex-info \"Signal `:run` form error\"\n          (enc/try*\n            (do           {:taoensso.telemere/signal (force signal_)})\n            (catch :all t {:taoensso.telemere/signal-error t}))\n          error))\n      value)))\n\n(defn inst+nsecs\n  \"Returns given platform instant plus given number of nanosecs.\"\n  [inst run-nsecs]\n  #?(:clj  (.plusNanos ^java.time.Instant inst run-nsecs)\n     :cljs (js/Date. (+ (.getTime inst) (/ run-nsecs 1e6)))))\n\n(comment (enc/qb 1e6 (inst+nsecs (enc/now-inst) 1e9)))\n\n#?(:clj (defn- auto-> [form auto-form] (if (= form :auto) auto-form form)))\n#?(:clj\n   (defmacro ^:public signal!\n     \"Generic low-level signal call, also aliased in Encore.\"\n     {:doc      (signal-docstring :signal!)\n      :arglists (signal-arglists  :signal!)}\n\n     ;; TODO Maybe later, once we're sure we don't want additional arities?\n     ;; Remember to also update signal-arglists, shell, etc.\n     ;; ([arg1 & more] (enc/keep-callsite `(signal! ~(apply hash-map arg1 more))))\n     ([opts]\n      (have? map? opts) ; We require const map keys, but vals may require eval\n      (let [defaults (enc/merge {:kind :default, :level :info} (get opts :defaults))\n            opts     (enc/merge defaults (dissoc opts :defaults))\n            cljs? (boolean (:ns &env))\n            clj?  (not cljs?)\n            {run-form :run} opts\n\n            show-run-val (get opts :run-val '_run-val)\n            show-run-form\n            (when run-form\n              (get opts :run-form\n                (if (and\n                      (enc/list-form? run-form)\n                      (> (count       run-form)  1)\n                      (> (count (str  run-form)) 32))\n                  (list (first run-form) '...)\n                  (do          run-form))))\n\n            {:keys [#_expansion-id location elide? allow?]}\n            (sigs/filterable-expansion\n              {:sf-arity 4\n               :ct-sig-filter     ct-sig-filter\n               :*rt-sig-filter* `*rt-sig-filter*}\n\n              (assoc opts\n                :location* (get opts :location* (enc/get-source &form &env))\n                :bound-forms\n                {:kind  '__kind\n                 :ns    '__ns\n                 :id    '__id\n                 :level '__level}))]\n\n        (if elide?\n          run-form\n          (let [{ns-form     :ns\n                 line-form   :line\n                 column-form :column\n                 file-form   :file} location\n\n                {inst-form  :inst\n                 level-form :level\n                 kind-form  :kind\n                 id-form    :id} opts\n\n                trace? (get opts :trace? (boolean run-form))\n                _\n                (when-not (contains? #{true false nil} trace?)\n                  (enc/unexpected-arg! trace?\n                    {:msg \"Expected constant (compile-time) `:trace?` boolean\"\n                     :context `signal!}))\n\n                thread-form (when clj? `(enc/thread-info))\n\n                inst-form   (get opts :inst :auto)\n                inst-form   (auto-> inst-form `(enc/now-inst*))\n\n                parent-form (get opts :parent `*trace-parent*)\n                root-form0  (get opts :root   `*trace-root*)\n\n                uid-form    (get opts :uid (when trace? :auto))\n\n                signal-delay-form\n                (let [{do-form          :do\n                       let-form         :let\n                       msg-form         :msg\n                       data-form        :data\n                       error-form       :error\n                       sample-rate-form :sample-rate} opts\n\n                      let-form (or let-form '[])\n                      msg-form (parse-msg-form msg-form)\n\n                      ctx-form\n                      (if-let [ctx+ (get opts :ctx+)]\n                        `(taoensso.encore.signals/update-ctx taoensso.telemere/*ctx* ~ctx+)\n                        (get opts :ctx                      `taoensso.telemere/*ctx*))\n\n                      middleware-form\n                      (if-let [middleware+ (get opts :middleware+)]\n                        `(taoensso.encore/comp-middleware taoensso.telemere/*middleware* ~middleware+)\n                        (get opts :middleware            `taoensso.telemere/*middleware*))\n\n                      kvs-form\n                      (not-empty\n                        (dissoc opts\n                          :elidable? :location :location* :inst :uid :middleware :middleware+,\n                          :sample-rate :ns :kind :id :level :filter :when #_:rate-limit #_:rate-limit-by,\n                          :ctx :ctx+ :parent #_:trace?, :do :let :data :msg :error,\n                          :run :run-form :run-val, :elide? :allow? #_:expansion-id :otel/context))\n\n                      _ ; Compile-time validation\n                      (do\n                        (when (and run-form error-form) ; Ambiguous source of error\n                          (throw\n                            (ex-info \"Signals cannot have both `:run` and `:error` opts at the same time\"\n                              {:run-form   run-form\n                               :error-form error-form\n                               :location   location\n                               :other-opts (dissoc opts :run :error)})))\n\n                        (when-let [e (find opts :msg_)] ; Common typo/confusion\n                          (throw\n                            (ex-info \"Signals cannot have `:msg_` opt (did you mean `:msg`?))\"\n                              {:msg_ (enc/typed-val (val e))}))))\n\n                      signal-form\n                      (let [record-form\n                            (let   [clause [(if run-form :run :no-run) (if clj? :clj :cljs)]]\n                              (case clause\n                                [:run    :clj ]  `(Signal. 1 ~'__inst ~'__uid, ~location ~'__ns ~line-form ~column-form ~file-form, (enc/host-info) ~'__thread ~'__otel-context1, ~sample-rate-form, ~'__kind ~'__id ~'__level, ~ctx-form ~parent-form ~'__root1, ~data-form ~kvs-form ~'_msg_,   ~'_run-err  '~show-run-form ~show-run-val ~'_end-inst ~'_run-nsecs)\n                                [:run    :cljs]  `(Signal. 1 ~'__inst ~'__uid, ~location ~'__ns ~line-form ~column-form ~file-form,                                               ~sample-rate-form, ~'__kind ~'__id ~'__level, ~ctx-form ~parent-form ~'__root1, ~data-form ~kvs-form ~'_msg_,   ~'_run-err  '~show-run-form ~show-run-val ~'_end-inst ~'_run-nsecs)\n                                [:no-run :clj ]  `(Signal. 1 ~'__inst ~'__uid, ~location ~'__ns ~line-form ~column-form ~file-form, (enc/host-info) ~'__thread ~'__otel-context1, ~sample-rate-form, ~'__kind ~'__id ~'__level, ~ctx-form ~parent-form ~'__root1, ~data-form ~kvs-form ~msg-form, ~error-form nil             nil           nil         nil)\n                                [:no-run :cljs]  `(Signal. 1 ~'__inst ~'__uid, ~location ~'__ns ~line-form ~column-form ~file-form,                                               ~sample-rate-form, ~'__kind ~'__id ~'__level, ~ctx-form ~parent-form ~'__root1, ~data-form ~kvs-form ~msg-form, ~error-form nil             nil           nil         nil)\n                                (enc/unexpected-arg! clause {:context :signal-constructor-args})))\n\n                            record-form\n                            (if-not run-form\n                              record-form\n                              `(let [~(with-meta '_run-result {:tag `RunResult}) ~'__run-result\n                                     ~'_run-nsecs (.-run-nsecs    ~'_run-result)\n                                     ~'_run-val   (.-value        ~'_run-result)\n                                     ~'_run-err   (.-error        ~'_run-result)\n                                     ~'_end-inst  (inst+nsecs ~'__inst ~'_run-nsecs)\n                                     ~'_msg_\n                                     (let [mf# ~msg-form]\n                                       (if (fn? mf#) ; Undocumented, handy for `trace!`/`spy!`, etc.\n                                         (delay (mf# '~show-run-form ~show-run-val ~'_run-err ~'_run-nsecs))\n                                         mf#))]\n                                 ~record-form))]\n\n                        (if-not kvs-form\n                          record-form\n                          `(let [signal# ~record-form]\n                             (reduce-kv assoc signal# (.-kvs signal#)))))]\n\n                  `(enc/bound-delay\n                     ;; Delay (cache) shared by all handlers, incl. `:let` eval,\n                     ;; signal construction, middleware, etc. Throws caught by handler.\n                     ~do-form\n                     (let [~@let-form ; Allow to throw, eval BEFORE data, msg, etc.\n                           signal# ~signal-form]\n\n                       ;; Final unwrapped signal value visible to users/handler-fns, allow to throw\n                       (if-let [sig-middleware# ~middleware-form]\n                         (sig-middleware# signal#) ; Apply signal middleware, can throw\n                         (do              signal#)))))\n\n                ;; Trade-off: avoid double `run-form` expansion\n                run-fn-form (when run-form `(fn [] ~run-form))\n                run-form*   (when run-form `(~'__run-fn-form))\n\n                into-let-form\n                (enc/cond!\n                  (not trace?) ; Don't trace\n                  `[~'__otel-context1 nil\n                    ~'__uid   ~(auto-> uid-form `(taoensso.telemere/*uid-fn* (if ~'__root0 false true)))\n                    ~'__root1 ~'__root0 ; Retain, but don't establish\n                    ~'__run-result\n                    ~(when run-form\n                       `(let [t0# (enc/now-nano*)]\n                          (enc/try*\n                            (do            (RunResult. ~run-form* nil (- (enc/now-nano*) t0#)))\n                            (catch :all t# (RunResult. nil        t#  (- (enc/now-nano*) t0#))))))]\n\n                  ;; Trace without OpenTelemetry\n                  (or cljs? (not enabled:otel-tracing?))\n                  `[~'__otel-context1 nil\n                    ~'__uid  ~(auto-> uid-form `(taoensso.telemere/*uid-fn* (if ~'__root0 false true)))\n                    ~'__root1 (or ~'__root0 ~(when trace? `{:id ~'__id, :uid ~'__uid}))\n                    ~'__run-result\n                    ~(when run-form\n                       `(binding [*trace-root*   ~'__root1\n                                  *trace-parent* {:id ~'__id, :uid ~'__uid}]\n                          (let [t0# (enc/now-nano*)]\n                            (enc/try*\n                              (do            (RunResult. ~run-form* nil (- (enc/now-nano*) t0#)))\n                              (catch :all t# (RunResult. nil        t#  (- (enc/now-nano*) t0#)))))))]\n\n                  ;; Trace with OpenTelemetry\n                  (and clj? enabled:otel-tracing?)\n                  `[~'__otel-context0 ~(get opts :otel/context `(otel-context)) ; Context\n                    ~'__otel-context1 ~(if run-form `(otel-context+span ~'__id ~'__inst ~'__otel-context0) ~'__otel-context0)\n                    ~'__uid           ~(auto-> uid-form `(or (otel-span-id ~'__otel-context1) (com.taoensso.encore.Ids/genHexId16)))\n                    ~'__root1\n                    (or ~'__root0\n                      ~(when trace?\n                         `{:id ~'__id, :uid (or (otel-trace-id ~'__otel-context1) (com.taoensso.encore.Ids/genHexId32))}))\n\n                    ~'__run-result\n                    ~(when run-form\n                       `(binding [*otel-context* ~'__otel-context1\n                                  *trace-root*   ~'__root1\n                                  *trace-parent* {:id ~'__id, :uid ~'__uid}]\n                          (let [otel-scope# (.makeCurrent ~'__otel-context1)\n                                t0#         (enc/now-nano*)]\n                            (enc/try*\n                              (do            (RunResult. ~run-form* nil (- (enc/now-nano*) t0#)))\n                              (catch :all t# (RunResult. nil        t#  (- (enc/now-nano*) t0#)))\n                              (finally (.close otel-scope#))))))])\n\n                final-form\n                ;; Unless otherwise specified, allow errors to throw on call\n                `(let [~'__run-fn-form ~run-fn-form\n                       ~'__kind        ~kind-form\n                       ~'__ns          ~ns-form\n                       ~'__id          ~id-form\n                       ~'__level       ~level-form]\n\n                   (enc/if-not ~allow?\n                     ~run-form*\n                     (let [~'__inst   ~inst-form\n                           ~'__thread ~thread-form\n                           ~'__root0  ~root-form0 ; ?{:keys [id uid]}\n\n                           ~@into-let-form ; Inject conditional bindings\n                           signal# ~signal-delay-form]\n\n                       (dispatch-signal!\n                         ;; Unconditionally send same wrapped signal to all handlers.\n                         ;; Each handler will use wrapper for handler filtering,\n                         ;; unwrapping (realizing) only allowed signals.\n                         (WrappedSignal. ~'__kind ~'__ns ~'__id ~'__level signal#))\n\n                       (if ~'__run-result\n                         ( ~'__run-result signal#)\n                         true))))]\n\n            (if-let [iife-wrap? true #_cljs?]\n              ;; Small perf hit to improve compatibility within `go` and other IOC-style bodies\n              `((fn [] ~final-form))\n              (do       final-form))))))))\n\n(comment\n  (with-signal  (signal! {:level :warn :let [x :x] :msg [\"Test\" \"message\" x] :data {:a :A :x x} :run (+ 1 2)}))\n  (macroexpand '(signal! {:level :warn :let [x :x] :msg [\"Test\" \"message\" x] :data {:a :A :x x} :run (+ 1 2)}))\n  (macroexpand '(signal! {:level :info}))\n\n  (do\n    (println \"---\")\n    (sigs/with-handler *sig-handlers* \"hf1\" (fn hf1 [x] (println x)) {}\n      (signal! {:level :info, :run \"run\"}))))\n\n#?(:clj\n   (defmacro ^:public signal-allowed?\n     \"Returns true iff signal with given opts would meet filtering conditions:\n       (when (signal-allowed? {:level :warn, <...>}) (my-custom-code))\n\n      Allows you to use Telemere's rich filtering system for conditionally\n      executing arbitrary code. Also handy for batching multiple signals\n      under a single set of conditions (incl. rate-limiting, sampling, etc.):\n\n        ;; Logs exactly 2 or 0 messages (never 1):\n        (when (signal-allowed? {:level :info, :sample-rate 0.5})\n          (log! {:allow? true} \\\"Message 1\\\")\n          (log! {:allow? true} \\\"Message 2\\\"))\"\n\n     ;; Used also for interop (tools.logging, SLF4J), etc.\n     {:arglists (signal-arglists :signal-allowed?)}\n     [opts]\n     (have? map? opts)\n     (let [defaults             (get    opts :defaults)\n           opts (merge defaults (dissoc opts :defaults))\n\n           {:keys [#_expansion-id #_location elide? allow?]}\n           (sigs/filterable-expansion\n             {:sf-arity 4\n              :ct-sig-filter     ct-sig-filter\n              :*rt-sig-filter* `*rt-sig-filter*}\n             (assoc opts :location*\n               (get opts :location* (enc/get-source &form &env))))]\n\n       (if elide? false `(if ~allow? true false)))))\n\n(comment (macroexpand '(signal-allowed? {:level :info})))\n\n;;;; Interop\n\n#?(:clj\n   (do\n     (enc/defonce ^:private interop-checks_\n       \"{<source-id> (fn check [])}\"\n       (atom\n         {:tools-logging  (fn [] {:present? present:tools-logging?, :enabled-by-env? enabled:tools-logging?})\n          :slf4j          (fn [] {:present? present:slf4j?, :telemere-provider-present? present:telemere-slf4j?})\n          :open-telemetry (fn [] {:present? present:otel?, :use-tracer? enabled:otel-tracing?})}))\n\n     (defn add-interop-check! [source-id check-fn] (swap! interop-checks_ assoc source-id check-fn))\n\n     (defn ^:public check-interop\n       \"Experimental, subject to change.\n       Runs Telemere's registered interop checks and returns info useful\n       for tests/debugging, e.g.:\n\n         {:open-telemetry {:present? false}\n          :tools-logging  {:present? false}\n          :slf4j          {:present? true\n                           :sending->telemere?  true\n                           :telemere-receiving? true}\n          ...}\"\n       []\n       (enc/map-vals (fn [check-fn] (check-fn))\n         @interop-checks_))\n\n     (defn test-interop! [msg test-fn]\n       (let [msg (str \"Interop test: \" msg \" (\" (enc/uuid-str) \")\")\n             signal\n             (binding [*rt-sig-filter* nil] ; Without runtime filters\n               (with-signal :raw :trap (test-fn msg)))]\n\n         (= (force (get signal :msg_)) msg)))))\n"],"x_google_ignoreList":[0]}