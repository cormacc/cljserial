{
"version":3,
"file":"module$node_modules$$supabase$storage_js$dist$main$packages$StorageFileApi.js",
"lineCount":268,
"mappings":"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",
"sources":["node_modules/@supabase/storage-js/dist/main/packages/StorageFileApi.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$$supabase$storage_js$dist$main$packages$StorageFileApi\"] = function(global,require,module,exports) {\nvar Buffer = require('buffer').Buffer;\n\"use strict\";\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst errors_1 = require(\"../lib/errors\");\nconst fetch_1 = require(\"../lib/fetch\");\nconst helpers_1 = require(\"../lib/helpers\");\nconst DEFAULT_SEARCH_OPTIONS = {\n    limit: 100,\n    offset: 0,\n    sortBy: {\n        column: 'name',\n        order: 'asc',\n    },\n};\nconst DEFAULT_FILE_OPTIONS = {\n    cacheControl: '3600',\n    contentType: 'text/plain;charset=UTF-8',\n    upsert: false,\n};\nclass StorageFileApi {\n    constructor(url, headers = {}, bucketId, fetch) {\n        this.url = url;\n        this.headers = headers;\n        this.bucketId = bucketId;\n        this.fetch = (0, helpers_1.resolveFetch)(fetch);\n    }\n    /**\n     * Uploads a file to an existing bucket or replaces an existing file at the specified path with a new one.\n     *\n     * @param method HTTP method.\n     * @param path The relative file path. Should be of the format `folder/subfolder/filename.png`. The bucket must already exist before attempting to upload.\n     * @param fileBody The body of the file to be stored in the bucket.\n     */\n    uploadOrUpdate(method, path, fileBody, fileOptions) {\n        return __awaiter(this, void 0, void 0, function* () {\n            try {\n                let body;\n                const options = Object.assign(Object.assign({}, DEFAULT_FILE_OPTIONS), fileOptions);\n                let headers = Object.assign(Object.assign({}, this.headers), (method === 'POST' && { 'x-upsert': String(options.upsert) }));\n                const metadata = options.metadata;\n                if (typeof Blob !== 'undefined' && fileBody instanceof Blob) {\n                    body = new FormData();\n                    body.append('cacheControl', options.cacheControl);\n                    if (metadata) {\n                        body.append('metadata', this.encodeMetadata(metadata));\n                    }\n                    body.append('', fileBody);\n                }\n                else if (typeof FormData !== 'undefined' && fileBody instanceof FormData) {\n                    body = fileBody;\n                    body.append('cacheControl', options.cacheControl);\n                    if (metadata) {\n                        body.append('metadata', this.encodeMetadata(metadata));\n                    }\n                }\n                else {\n                    body = fileBody;\n                    headers['cache-control'] = `max-age=${options.cacheControl}`;\n                    headers['content-type'] = options.contentType;\n                    if (metadata) {\n                        headers['x-metadata'] = this.toBase64(this.encodeMetadata(metadata));\n                    }\n                }\n                if (fileOptions === null || fileOptions === void 0 ? void 0 : fileOptions.headers) {\n                    headers = Object.assign(Object.assign({}, headers), fileOptions.headers);\n                }\n                const cleanPath = this._removeEmptyFolders(path);\n                const _path = this._getFinalPath(cleanPath);\n                const res = yield this.fetch(`${this.url}/object/${_path}`, Object.assign({ method, body: body, headers }, ((options === null || options === void 0 ? void 0 : options.duplex) ? { duplex: options.duplex } : {})));\n                const data = yield res.json();\n                if (res.ok) {\n                    return {\n                        data: { path: cleanPath, id: data.Id, fullPath: data.Key },\n                        error: null,\n                    };\n                }\n                else {\n                    const error = data;\n                    return { data: null, error };\n                }\n            }\n            catch (error) {\n                if ((0, errors_1.isStorageError)(error)) {\n                    return { data: null, error };\n                }\n                throw error;\n            }\n        });\n    }\n    /**\n     * Uploads a file to an existing bucket.\n     *\n     * @param path The file path, including the file name. Should be of the format `folder/subfolder/filename.png`. The bucket must already exist before attempting to upload.\n     * @param fileBody The body of the file to be stored in the bucket.\n     */\n    upload(path, fileBody, fileOptions) {\n        return __awaiter(this, void 0, void 0, function* () {\n            return this.uploadOrUpdate('POST', path, fileBody, fileOptions);\n        });\n    }\n    /**\n     * Upload a file with a token generated from `createSignedUploadUrl`.\n     * @param path The file path, including the file name. Should be of the format `folder/subfolder/filename.png`. The bucket must already exist before attempting to upload.\n     * @param token The token generated from `createSignedUploadUrl`\n     * @param fileBody The body of the file to be stored in the bucket.\n     */\n    uploadToSignedUrl(path, token, fileBody, fileOptions) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const cleanPath = this._removeEmptyFolders(path);\n            const _path = this._getFinalPath(cleanPath);\n            const url = new URL(this.url + `/object/upload/sign/${_path}`);\n            url.searchParams.set('token', token);\n            try {\n                let body;\n                const options = Object.assign({ upsert: DEFAULT_FILE_OPTIONS.upsert }, fileOptions);\n                const headers = Object.assign(Object.assign({}, this.headers), { 'x-upsert': String(options.upsert) });\n                if (typeof Blob !== 'undefined' && fileBody instanceof Blob) {\n                    body = new FormData();\n                    body.append('cacheControl', options.cacheControl);\n                    body.append('', fileBody);\n                }\n                else if (typeof FormData !== 'undefined' && fileBody instanceof FormData) {\n                    body = fileBody;\n                    body.append('cacheControl', options.cacheControl);\n                }\n                else {\n                    body = fileBody;\n                    headers['cache-control'] = `max-age=${options.cacheControl}`;\n                    headers['content-type'] = options.contentType;\n                }\n                const res = yield this.fetch(url.toString(), {\n                    method: 'PUT',\n                    body: body,\n                    headers,\n                });\n                const data = yield res.json();\n                if (res.ok) {\n                    return {\n                        data: { path: cleanPath, fullPath: data.Key },\n                        error: null,\n                    };\n                }\n                else {\n                    const error = data;\n                    return { data: null, error };\n                }\n            }\n            catch (error) {\n                if ((0, errors_1.isStorageError)(error)) {\n                    return { data: null, error };\n                }\n                throw error;\n            }\n        });\n    }\n    /**\n     * Creates a signed upload URL.\n     * Signed upload URLs can be used to upload files to the bucket without further authentication.\n     * They are valid for 2 hours.\n     * @param path The file path, including the current file name. For example `folder/image.png`.\n     * @param options.upsert If set to true, allows the file to be overwritten if it already exists.\n     */\n    createSignedUploadUrl(path, options) {\n        return __awaiter(this, void 0, void 0, function* () {\n            try {\n                let _path = this._getFinalPath(path);\n                const headers = Object.assign({}, this.headers);\n                if (options === null || options === void 0 ? void 0 : options.upsert) {\n                    headers['x-upsert'] = 'true';\n                }\n                const data = yield (0, fetch_1.post)(this.fetch, `${this.url}/object/upload/sign/${_path}`, {}, { headers });\n                const url = new URL(this.url + data.url);\n                const token = url.searchParams.get('token');\n                if (!token) {\n                    throw new errors_1.StorageError('No token returned by API');\n                }\n                return { data: { signedUrl: url.toString(), path, token }, error: null };\n            }\n            catch (error) {\n                if ((0, errors_1.isStorageError)(error)) {\n                    return { data: null, error };\n                }\n                throw error;\n            }\n        });\n    }\n    /**\n     * Replaces an existing file at the specified path with a new one.\n     *\n     * @param path The relative file path. Should be of the format `folder/subfolder/filename.png`. The bucket must already exist before attempting to update.\n     * @param fileBody The body of the file to be stored in the bucket.\n     */\n    update(path, fileBody, fileOptions) {\n        return __awaiter(this, void 0, void 0, function* () {\n            return this.uploadOrUpdate('PUT', path, fileBody, fileOptions);\n        });\n    }\n    /**\n     * Moves an existing file to a new path in the same bucket.\n     *\n     * @param fromPath The original file path, including the current file name. For example `folder/image.png`.\n     * @param toPath The new file path, including the new file name. For example `folder/image-new.png`.\n     * @param options The destination options.\n     */\n    move(fromPath, toPath, options) {\n        return __awaiter(this, void 0, void 0, function* () {\n            try {\n                const data = yield (0, fetch_1.post)(this.fetch, `${this.url}/object/move`, {\n                    bucketId: this.bucketId,\n                    sourceKey: fromPath,\n                    destinationKey: toPath,\n                    destinationBucket: options === null || options === void 0 ? void 0 : options.destinationBucket,\n                }, { headers: this.headers });\n                return { data, error: null };\n            }\n            catch (error) {\n                if ((0, errors_1.isStorageError)(error)) {\n                    return { data: null, error };\n                }\n                throw error;\n            }\n        });\n    }\n    /**\n     * Copies an existing file to a new path in the same bucket.\n     *\n     * @param fromPath The original file path, including the current file name. For example `folder/image.png`.\n     * @param toPath The new file path, including the new file name. For example `folder/image-copy.png`.\n     * @param options The destination options.\n     */\n    copy(fromPath, toPath, options) {\n        return __awaiter(this, void 0, void 0, function* () {\n            try {\n                const data = yield (0, fetch_1.post)(this.fetch, `${this.url}/object/copy`, {\n                    bucketId: this.bucketId,\n                    sourceKey: fromPath,\n                    destinationKey: toPath,\n                    destinationBucket: options === null || options === void 0 ? void 0 : options.destinationBucket,\n                }, { headers: this.headers });\n                return { data: { path: data.Key }, error: null };\n            }\n            catch (error) {\n                if ((0, errors_1.isStorageError)(error)) {\n                    return { data: null, error };\n                }\n                throw error;\n            }\n        });\n    }\n    /**\n     * Creates a signed URL. Use a signed URL to share a file for a fixed amount of time.\n     *\n     * @param path The file path, including the current file name. For example `folder/image.png`.\n     * @param expiresIn The number of seconds until the signed URL expires. For example, `60` for a URL which is valid for one minute.\n     * @param options.download triggers the file as a download if set to true. Set this parameter as the name of the file if you want to trigger the download with a different filename.\n     * @param options.transform Transform the asset before serving it to the client.\n     */\n    createSignedUrl(path, expiresIn, options) {\n        return __awaiter(this, void 0, void 0, function* () {\n            try {\n                let _path = this._getFinalPath(path);\n                let data = yield (0, fetch_1.post)(this.fetch, `${this.url}/object/sign/${_path}`, Object.assign({ expiresIn }, ((options === null || options === void 0 ? void 0 : options.transform) ? { transform: options.transform } : {})), { headers: this.headers });\n                const downloadQueryParam = (options === null || options === void 0 ? void 0 : options.download)\n                    ? `&download=${options.download === true ? '' : options.download}`\n                    : '';\n                const signedUrl = encodeURI(`${this.url}${data.signedURL}${downloadQueryParam}`);\n                data = { signedUrl };\n                return { data, error: null };\n            }\n            catch (error) {\n                if ((0, errors_1.isStorageError)(error)) {\n                    return { data: null, error };\n                }\n                throw error;\n            }\n        });\n    }\n    /**\n     * Creates multiple signed URLs. Use a signed URL to share a file for a fixed amount of time.\n     *\n     * @param paths The file paths to be downloaded, including the current file names. For example `['folder/image.png', 'folder2/image2.png']`.\n     * @param expiresIn The number of seconds until the signed URLs expire. For example, `60` for URLs which are valid for one minute.\n     * @param options.download triggers the file as a download if set to true. Set this parameter as the name of the file if you want to trigger the download with a different filename.\n     */\n    createSignedUrls(paths, expiresIn, options) {\n        return __awaiter(this, void 0, void 0, function* () {\n            try {\n                const data = yield (0, fetch_1.post)(this.fetch, `${this.url}/object/sign/${this.bucketId}`, { expiresIn, paths }, { headers: this.headers });\n                const downloadQueryParam = (options === null || options === void 0 ? void 0 : options.download)\n                    ? `&download=${options.download === true ? '' : options.download}`\n                    : '';\n                return {\n                    data: data.map((datum) => (Object.assign(Object.assign({}, datum), { signedUrl: datum.signedURL\n                            ? encodeURI(`${this.url}${datum.signedURL}${downloadQueryParam}`)\n                            : null }))),\n                    error: null,\n                };\n            }\n            catch (error) {\n                if ((0, errors_1.isStorageError)(error)) {\n                    return { data: null, error };\n                }\n                throw error;\n            }\n        });\n    }\n    /**\n     * Downloads a file from a private bucket. For public buckets, make a request to the URL returned from `getPublicUrl` instead.\n     *\n     * @param path The full path and file name of the file to be downloaded. For example `folder/image.png`.\n     * @param options.transform Transform the asset before serving it to the client.\n     */\n    download(path, options) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const wantsTransformation = typeof (options === null || options === void 0 ? void 0 : options.transform) !== 'undefined';\n            const renderPath = wantsTransformation ? 'render/image/authenticated' : 'object';\n            const transformationQuery = this.transformOptsToQueryString((options === null || options === void 0 ? void 0 : options.transform) || {});\n            const queryString = transformationQuery ? `?${transformationQuery}` : '';\n            try {\n                const _path = this._getFinalPath(path);\n                const res = yield (0, fetch_1.get)(this.fetch, `${this.url}/${renderPath}/${_path}${queryString}`, {\n                    headers: this.headers,\n                    noResolveJson: true,\n                });\n                const data = yield res.blob();\n                return { data, error: null };\n            }\n            catch (error) {\n                if ((0, errors_1.isStorageError)(error)) {\n                    return { data: null, error };\n                }\n                throw error;\n            }\n        });\n    }\n    /**\n     * Retrieves the details of an existing file.\n     * @param path\n     */\n    info(path) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const _path = this._getFinalPath(path);\n            try {\n                const data = yield (0, fetch_1.get)(this.fetch, `${this.url}/object/info/${_path}`, {\n                    headers: this.headers,\n                });\n                return { data: (0, helpers_1.recursiveToCamel)(data), error: null };\n            }\n            catch (error) {\n                if ((0, errors_1.isStorageError)(error)) {\n                    return { data: null, error };\n                }\n                throw error;\n            }\n        });\n    }\n    /**\n     * Checks the existence of a file.\n     * @param path\n     */\n    exists(path) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const _path = this._getFinalPath(path);\n            try {\n                yield (0, fetch_1.head)(this.fetch, `${this.url}/object/${_path}`, {\n                    headers: this.headers,\n                });\n                return { data: true, error: null };\n            }\n            catch (error) {\n                if ((0, errors_1.isStorageError)(error) && error instanceof errors_1.StorageUnknownError) {\n                    const originalError = error.originalError;\n                    if ([400, 404].includes(originalError === null || originalError === void 0 ? void 0 : originalError.status)) {\n                        return { data: false, error };\n                    }\n                }\n                throw error;\n            }\n        });\n    }\n    /**\n     * A simple convenience function to get the URL for an asset in a public bucket. If you do not want to use this function, you can construct the public URL by concatenating the bucket URL with the path to the asset.\n     * This function does not verify if the bucket is public. If a public URL is created for a bucket which is not public, you will not be able to download the asset.\n     *\n     * @param path The path and name of the file to generate the public URL for. For example `folder/image.png`.\n     * @param options.download Triggers the file as a download if set to true. Set this parameter as the name of the file if you want to trigger the download with a different filename.\n     * @param options.transform Transform the asset before serving it to the client.\n     */\n    getPublicUrl(path, options) {\n        const _path = this._getFinalPath(path);\n        const _queryString = [];\n        const downloadQueryParam = (options === null || options === void 0 ? void 0 : options.download)\n            ? `download=${options.download === true ? '' : options.download}`\n            : '';\n        if (downloadQueryParam !== '') {\n            _queryString.push(downloadQueryParam);\n        }\n        const wantsTransformation = typeof (options === null || options === void 0 ? void 0 : options.transform) !== 'undefined';\n        const renderPath = wantsTransformation ? 'render/image' : 'object';\n        const transformationQuery = this.transformOptsToQueryString((options === null || options === void 0 ? void 0 : options.transform) || {});\n        if (transformationQuery !== '') {\n            _queryString.push(transformationQuery);\n        }\n        let queryString = _queryString.join('&');\n        if (queryString !== '') {\n            queryString = `?${queryString}`;\n        }\n        return {\n            data: { publicUrl: encodeURI(`${this.url}/${renderPath}/public/${_path}${queryString}`) },\n        };\n    }\n    /**\n     * Deletes files within the same bucket\n     *\n     * @param paths An array of files to delete, including the path and file name. For example [`'folder/image.png'`].\n     */\n    remove(paths) {\n        return __awaiter(this, void 0, void 0, function* () {\n            try {\n                const data = yield (0, fetch_1.remove)(this.fetch, `${this.url}/object/${this.bucketId}`, { prefixes: paths }, { headers: this.headers });\n                return { data, error: null };\n            }\n            catch (error) {\n                if ((0, errors_1.isStorageError)(error)) {\n                    return { data: null, error };\n                }\n                throw error;\n            }\n        });\n    }\n    /**\n     * Get file metadata\n     * @param id the file id to retrieve metadata\n     */\n    // async getMetadata(\n    //   id: string\n    // ): Promise<\n    //   | {\n    //       data: Metadata\n    //       error: null\n    //     }\n    //   | {\n    //       data: null\n    //       error: StorageError\n    //     }\n    // > {\n    //   try {\n    //     const data = await get(this.fetch, `${this.url}/metadata/${id}`, { headers: this.headers })\n    //     return { data, error: null }\n    //   } catch (error) {\n    //     if (isStorageError(error)) {\n    //       return { data: null, error }\n    //     }\n    //     throw error\n    //   }\n    // }\n    /**\n     * Update file metadata\n     * @param id the file id to update metadata\n     * @param meta the new file metadata\n     */\n    // async updateMetadata(\n    //   id: string,\n    //   meta: Metadata\n    // ): Promise<\n    //   | {\n    //       data: Metadata\n    //       error: null\n    //     }\n    //   | {\n    //       data: null\n    //       error: StorageError\n    //     }\n    // > {\n    //   try {\n    //     const data = await post(\n    //       this.fetch,\n    //       `${this.url}/metadata/${id}`,\n    //       { ...meta },\n    //       { headers: this.headers }\n    //     )\n    //     return { data, error: null }\n    //   } catch (error) {\n    //     if (isStorageError(error)) {\n    //       return { data: null, error }\n    //     }\n    //     throw error\n    //   }\n    // }\n    /**\n     * Lists all the files within a bucket.\n     * @param path The folder path.\n     */\n    list(path, options, parameters) {\n        return __awaiter(this, void 0, void 0, function* () {\n            try {\n                const body = Object.assign(Object.assign(Object.assign({}, DEFAULT_SEARCH_OPTIONS), options), { prefix: path || '' });\n                const data = yield (0, fetch_1.post)(this.fetch, `${this.url}/object/list/${this.bucketId}`, body, { headers: this.headers }, parameters);\n                return { data, error: null };\n            }\n            catch (error) {\n                if ((0, errors_1.isStorageError)(error)) {\n                    return { data: null, error };\n                }\n                throw error;\n            }\n        });\n    }\n    encodeMetadata(metadata) {\n        return JSON.stringify(metadata);\n    }\n    toBase64(data) {\n        if (typeof Buffer !== 'undefined') {\n            return Buffer.from(data).toString('base64');\n        }\n        return btoa(data);\n    }\n    _getFinalPath(path) {\n        return `${this.bucketId}/${path}`;\n    }\n    _removeEmptyFolders(path) {\n        return path.replace(/^\\/|\\/$/g, '').replace(/\\/+/g, '/');\n    }\n    transformOptsToQueryString(transform) {\n        const params = [];\n        if (transform.width) {\n            params.push(`width=${transform.width}`);\n        }\n        if (transform.height) {\n            params.push(`height=${transform.height}`);\n        }\n        if (transform.resize) {\n            params.push(`resize=${transform.resize}`);\n        }\n        if (transform.format) {\n            params.push(`format=${transform.format}`);\n        }\n        if (transform.quality) {\n            params.push(`quality=${transform.quality}`);\n        }\n        return params.join('&');\n    }\n}\nexports.default = StorageFileApi;\n//# sourceMappingURL=StorageFileApi.js.map\n};"],
"names":["shadow$provide","global","require","module","exports","Buffer","__awaiter","thisArg","_arguments","P","generator","adopt","value","resolve","Promise","reject","fulfilled","step","next","e","rejected","result","done","then","apply","Object","defineProperty","errors_1","fetch_1","helpers_1","DEFAULT_SEARCH_OPTIONS","limit","offset","sortBy","column","order","DEFAULT_FILE_OPTIONS","cacheControl","contentType","upsert","StorageFileApi","constructor","url","headers","bucketId","fetch","resolveFetch","uploadOrUpdate","method","path","fileBody","fileOptions","body","options","assign","String","metadata","Blob","FormData","append","encodeMetadata","toBase64","cleanPath","_removeEmptyFolders","_path","_getFinalPath","res","duplex","data","json","ok","id","Id","fullPath","Key","error","isStorageError","upload","uploadToSignedUrl","token","URL","searchParams","set","toString","createSignedUploadUrl","post","get","StorageError","signedUrl","update","move","fromPath","toPath","sourceKey","destinationKey","destinationBucket","copy","createSignedUrl","expiresIn","transform","encodeURI","signedURL","downloadQueryParam","download","createSignedUrls","paths","map","datum","renderPath","transformationQuery","transformOptsToQueryString","queryString","blob","noResolveJson","info","recursiveToCamel","exists","head","StorageUnknownError","originalError","includes","status","getPublicUrl","_queryString","push","join","publicUrl","remove","prefixes","list","parameters","prefix","JSON","stringify","from","btoa","replace","params","width","height","resize","format","quality","default"]
}
