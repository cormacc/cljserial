{"version":3,"sources":["refx/interceptors.cljc"],"mappings":"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","names":["refx.interceptors/debug","refx.interceptor.__GT_interceptor","context","refx.log.info","refx.interceptor.get_coeffect","event","orig-db","new-db","refx.interceptor.get_effect","cljs.core._EQ_","vec__86579","cljs.core.nth","only-before","only-after","clojure.data/diff","db-changed?","refx.interceptors/unwrap","vec__86592","_","payload","cljs.core/count","cljs.core/map?","refx.log.warn","refx.interceptor/assoc-coeffect","refx.interceptors/trim-v","cljs.core/vector?","cljs.core/type","refx.interceptor.update_coeffect","cljs.core/subvec","var_args","args__5732__auto__","len__5726__auto__","i__5727__auto__","argseq__5733__auto__","cljs.core/IndexedSeq","refx.interceptors/path","seq86636","self__5712__auto__","cljs.core/seq","args","path","cljs.core/flatten","cljs.core/empty?","refx.log.error","original-db","cljs.core.update","cljs.core/conj","cljs.core.get_in","db-store","cljs.core/peek","new-db-store","cljs.core/pop","context'","cljs.core.assoc","db","cljs.core/assoc-in","refx.interceptor/assoc-effect","refx.interceptors/enrich","f","prev-db","cljs.core/contains?","or__5002__auto__","refx.interceptors/after","refx.interceptors/on-changes","seq86699","G__86700","cljs.core/first","cljs.core/next","G__86701","self__5711__auto__","out-path","in-paths","old-db","new-ins","p1__86695#","cljs.core.map","old-ins","p1__86696#","changed-ins?","and__5000__auto__","cljs.core/some","cljs.core/false?","cljs.core/identical?","cljs.core.apply","js/refx","js/refx.interceptors","js/refx.interceptors.global-interceptors","refx.interceptors/global-interceptors","cljs.core.atom","refx.interop/empty-queue","refx.interceptors/inject-global-interceptors","p1__86725#","cljs.core/deref","cljs.core.into"],"sourcesContent":["(ns refx.interceptors\n  (:require [clojure.data :as data]\n            [refx.interceptor :refer [->interceptor assoc-coeffect\n                                      assoc-effect get-coeffect get-effect\n                                      update-coeffect]]\n            [refx.interop :as interop]\n            [refx.log :as log]))\n\n(def debug\n  (->interceptor\n   :id     :debug\n   :before (fn debug-before\n             [context]\n             (log/info \"Handling event:\" (get-coeffect context :event))\n             context)\n   :after  (fn debug-after\n             [context]\n             (let [event   (get-coeffect context :event)\n                   orig-db (get-coeffect context :db)\n                   new-db  (get-effect   context :db ::not-found)]\n               (if (= new-db ::not-found)\n                 (log/info \"No app-db changes in:\" event)\n                 (let [[only-before only-after] (data/diff orig-db new-db)\n                       db-changed?    (or (some? only-before) (some? only-after))]\n                   (if db-changed?\n                     (do (log/info \"only before:\" only-before)\n                         (log/info \"only after :\" only-after))\n                     (log/info \"No app-db changes resulted from:\" event))))\n               context))))\n\n(def unwrap\n  (->interceptor\n   :id      :unwrap\n   :before  (fn unwrap-before\n              [context]\n              (let [[_ payload :as event] (get-coeffect context :event)]\n                (if-not (and (= 2 (count event))\n                             (map? payload))\n                  (do\n                    (log/warn \"\\\"unwrap\\\" interceptor requires event to be a 2-vector of [event-id payload-map]. Got \" event)\n                    context)\n                  (assoc-coeffect context :event payload))))\n   :after   (fn unwrap-after\n              [context]\n              (assoc-coeffect context :event (get-coeffect context :original-event)))))\n\n(def trim-v\n  (->interceptor\n   :id      :trim-v\n   :before  (fn trim-v-before\n              [context]\n              (if-not (vector? (get-coeffect context :event))\n                (do\n                  (log/warn \"\\\"trim-v\\\" interceptor expected event to be a vector. Got a \" (type (get-coeffect context :event)))\n                  context)\n                (update-coeffect context :event subvec 1)))\n   :after   (fn trim-v-after\n              [context]\n              (assoc-coeffect context :event (get-coeffect context :original-event)))))\n\n(defn path\n  [& args]\n  (let [path (flatten args)]\n    (when (empty? path)\n      (log/error \"\\\"path\\\" interceptor given no params\"))\n    (->interceptor\n     :id      :path\n     :before  (fn\n                [context]\n                (let [original-db (get-coeffect context :db)]\n                  (-> context\n                      (update ::orig-db conj original-db)\n                      (assoc-coeffect :db (get-in original-db path)))))\n     :after   (fn [context]\n                (let [db-store     (::orig-db context)\n                      original-db  (peek db-store)\n                      new-db-store (pop db-store)\n                      context'     (-> (assoc context ::orig-db new-db-store)\n                                       (assoc-coeffect :db original-db))     ;; put the original db back so that things like debug work later on\n                      db           (get-effect context :db ::not-found)]\n                  (if (= db ::not-found)\n                    context'\n                    (->> (assoc-in original-db path db)\n                         (assoc-effect context' :db))))))))\n\n(defn enrich\n  [f]\n  (->interceptor\n   :id :enrich\n   :after (fn enrich-after\n            [context]\n            (let [event   (get-coeffect context :event)\n                  prev-db (if (contains? (get-effect context) :db)\n                            (get-effect context :db) ;; If no db effect is returned, we provide the original coeffect.\n                            (get-coeffect context :db))\n                  new-db  (f prev-db event)]\n              (assoc-effect context :db (or new-db prev-db)))))) ;; If the enriched db is nil, use the last known good db\n\n(defn after\n  [f]\n  (->interceptor\n   :id :after\n   :after (fn after-after\n            [context]\n            (let [db    (if (contains? (get-effect context) :db)\n                          (get-effect context :db)\n                          (get-coeffect context :db))\n                  event (get-coeffect context :event)]\n              (f db event) ;; call f for side effects\n              context)))) ;; context is unchanged\n\n(defn  on-changes\n  [f out-path & in-paths]\n  (->interceptor\n   :id    :on-changes\n   :after (fn on-change-after\n            [context]\n            (let [new-db   (get-effect context :db)\n                  old-db   (get-coeffect context :db)\n\n                   ;; work out if any \"inputs\" have changed\n                  new-ins      (map #(get-in new-db %) in-paths)\n                  old-ins      (map #(get-in old-db %) in-paths)\n                   ;; make sure the db is actually set in the effect\n                  changed-ins? (and (contains? (get-effect context) :db)\n                                    (some false? (map identical? new-ins old-ins)))]\n\n               ;; if one of the inputs has changed, then run 'f'\n              (if changed-ins?\n                (->> (apply f new-ins)\n                     (assoc-in new-db out-path)\n                     (assoc-effect context :db))\n                context)))))\n\n(defonce global-interceptors (atom interop/empty-queue))\n\n(def inject-global-interceptors\n  \"An interceptor which adds registered global interceptors to the context's queue.\n\n   NOTE: :queue is a Clojure.lang.PersistentQueue and not a vector.\"\n  (->interceptor\n   :id     :inject-global-interceptors\n   :before (fn inject-global-interceptors-before\n             [context]\n             (update context :queue #(into @global-interceptors %)))))\n"],"x_google_ignoreList":[0]}