{"version":3,"sources":["rewrite_clj/custom_zipper/core.cljc"],"mappings":"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","names":["rewrite-clj.custom-zipper.core/custom-zipper","root","rewrite-clj.custom-zipper.core/zipper","clojure.zip/zipper","rewrite-clj.node.protocols/inner?","cljs.core.comp","cljs.core/seq","rewrite-clj.node.protocols/children","rewrite-clj.node.protocols/replace-children","rewrite-clj.custom-zipper.core/custom-zipper?","value","G__65098","rewrite-clj.custom-zipper.switchable/custom-zipper?","clojure.zip/node","rewrite-clj.custom-zipper.core/node","zloc","G__65104","clojure.zip/branch?","rewrite-clj.custom-zipper.core/branch?","G__65116","map__65121","cljs.core/--destructure-map","cljs.core.get","clojure.zip/children","rewrite-clj.custom-zipper.core/children","node","cljs.core.ex_info","G__65125","G__65126","G__65127","clojure.zip/make-node","rewrite-clj.custom-zipper.core/make-node","_zloc","children","rewrite-clj.custom-zipper.core/position","rewrite-clj.custom-zipper.core/position-span","start-pos","rewrite-clj.node.protocols/+extent","rewrite-clj.node.protocols/extent","G__65147","clojure.zip/lefts","rewrite-clj.custom-zipper.core/lefts","cljs.core.map","cljs.core/first","G__65161","clojure.zip/down","rewrite-clj.custom-zipper.core/down","map__65174","vec__65175","cljs.core.nth","vec__65178","seq__65179","first__65180","cljs.core/next","row","col","c","cnext","cs","cljs.core/with-meta","rewrite-clj.node.protocols/leader-length","cljs.core/meta","G__65192","clojure.zip/up","rewrite-clj.custom-zipper.core/up","map__65199","parent","left","right","changed?","cljs.core.assoc","cljs.core.concat","cljs.core/cons","G__65205","clojure.zip/root","rewrite-clj.custom-zipper.core/root","p","G__65217","clojure.zip/right","rewrite-clj.custom-zipper.core/right","map__65220","vec__65221","seq__65222","first__65223","position","r","rnext","and__5000__auto__","cljs.core.conj","G__65239","clojure.zip/rightmost","rewrite-clj.custom-zipper.core/rightmost","temp__5821__auto__","next","G__65246","clojure.zip/left","rewrite-clj.custom-zipper.core/left","map__65253","vec__65263","lnode","lpos","cljs.core/peek","cljs.core/pop","G__65272","clojure.zip/leftmost","rewrite-clj.custom-zipper.core/leftmost","map__65279","vec__65283","cljs.core/rest","G__65289","G__65290","clojure.zip/insert-left","rewrite-clj.custom-zipper.core/insert-left","item","map__65296","cljs.core/not","G__65299","G__65300","clojure.zip/insert-right","rewrite-clj.custom-zipper.core/insert-right","map__65305","G__65308","G__65309","clojure.zip/replace","rewrite-clj.custom-zipper.core/replace","var_args","args__5732__auto__","len__5726__auto__","i__5727__auto__","argseq__5733__auto__","cljs.core/IndexedSeq","rewrite-clj.custom-zipper.core/edit","seq65328","G__65329","G__65330","self__5711__auto__","f","args","cljs.core.apply","clojure.zip/edit","G__65355","G__65356","clojure.zip/insert-child","rewrite-clj.custom-zipper.core/insert-child","G__65370","G__65371","clojure.zip/append-child","rewrite-clj.custom-zipper.core/append-child","G__65391","clojure.zip/next","rewrite-clj.custom-zipper.core/next","or__5002__auto__","G__65419","clojure.zip/prev","rewrite-clj.custom-zipper.core/prev","lloc","child","G__65428","clojure.zip/end?","rewrite-clj.custom-zipper.core/end?","G__65433","clojure.zip/remove","rewrite-clj.custom-zipper.core/remove","map__65436","vec__65453"],"sourcesContent":["; Interface and algorithms based on code in clojure.zip with is bundled with Clojure itself:\n\n;   Copyright (c) Rich Hickey. All rights reserved.\n;   The use and distribution terms for this software are covered by the\n;   Eclipse Public License 1.0 (http://opensource.org/licenses/eclipse-1.0.php)\n;   which can be found in the file epl-v10.html at the root of this distribution.\n;   By using this software in any fashion, you are agreeing to be bound by\n;   the terms of this license.\n;   You must not remove this notice, or any other, from this software.\n\n;functional hierarchical zipper, with navigation, editing and enumeration\n;see Huet\n\n(ns ^:no-doc rewrite-clj.custom-zipper.core\n  \"This is the underlying zipper that rewrite-clj uses.\n\n   It delegates to two different zipper implementations:\n   1. the code herein under defn-switchable bodies when the user has created a `:track-position?` zipper\n   2. otherwise clojure.zip, with some small exceptions:\n      - `edit` explicitly handles the delegation - I assume because defn-switchable could not handle the argument delegation\n      - there are fns exclusive to the position trakcing zipper, `position`, `position-span`\"\n  (:refer-clojure :exclude (replace remove next))\n  (:require [clojure.zip :as clj-zip]\n            [rewrite-clj.custom-zipper.switchable :refer [defn-switchable]]\n            [rewrite-clj.node.protocols :as node])\n  #?(:cljs (:require-macros [rewrite-clj.custom-zipper.switchable :refer [defn-switchable]])))\n\n#?(:clj (set! *warn-on-reflection* true))\n\n;; the custom zipper is used to support position-tracking, otherwise clojure.zip is used\n\n(defn custom-zipper\n  [root]\n  {::custom? true\n   :node     root\n   :position [1 1]\n   :parent   nil\n   :left     []\n   :right   '()})\n\n(defn zipper\n  [root]\n  (clj-zip/zipper\n    node/inner?\n    (comp seq node/children)\n    node/replace-children\n    root))\n\n(defn custom-zipper?\n  [value]\n  (::custom? value))\n\n;; ## Implementation\n\n(defn-switchable node\n  \"Returns the current node in `zloc`.\"\n  [zloc]\n  (:node zloc))\n\n(defn-switchable branch?\n  \"Returns true if the current node in `zloc` is a branch.\"\n  [zloc]\n  (node/inner? (:node zloc)))\n\n(defn-switchable children\n  \"Returns a seq of the children of current node in `zloc`, which must be a branch.\"\n  [{:keys [node] :as zloc}]\n  (if (branch? zloc)\n    (seq (node/children node))\n    (throw (ex-info \"called children on a leaf node\" {}))))\n\n(defn-switchable make-node\n  \"Returns a new branch node, given an existing `node` and new\n  `children`. \"\n  [_zloc node children]\n  (node/replace-children node children))\n\n(defn position\n  \"Returns the ones-based `[row col]` of the start of the current node in `zloc`.\n\n  Throws if `zloc` was not created with [position tracking](/doc/01-user-guide.adoc#position-tracking).\"\n  [zloc]\n  (if (custom-zipper? zloc)\n    (:position zloc)\n    (throw\n     (ex-info\n      (str \"to use position functions, please construct your zipper with \"\n           \"':track-position?'  set to true.\") {}))))\n\n(defn position-span\n  \"Returns the ones-based `[[start-row start-col] [end-row end-col]]` of the current node in `zloc`.\n  `end-col` is exclusive.\n\n  Throws if `zloc` was not created with [position tracking](/doc/01-user-guide.adoc#position-tracking).\"\n  [zloc]\n  (let [start-pos (position zloc)]\n    [start-pos (node/+extent start-pos (node/extent (node zloc)))]))\n\n(defn-switchable lefts\n  \"Returns a seq of the left siblings of current node in `zloc`.\"\n  [zloc]\n  (map first (:left zloc)))\n\n(defn-switchable down\n  \"Returns zipper with the location at the leftmost child of current node in `zloc`, or\n  nil if no children.\"\n  [zloc]\n  (when (branch? zloc)\n    (let [{:keys [node] [row col] :position} zloc\n          [c & cnext :as cs] (children zloc)]\n      (when cs\n        (with-meta\n          {::custom? true\n           :node     c\n           :position [row (+ col (node/leader-length node))]\n           :parent   zloc\n           :left     []\n           :right    cnext}\n          (meta zloc))))))\n\n(defn-switchable up\n  \"Returns zipper with the location at the parent of current node in `zloc`, or nil if at\n  the top.\"\n  [zloc]\n  (let [{:keys [node parent left right changed?]} zloc]\n    (when parent\n      (if changed?\n        (assoc parent\n               :changed? true\n               :node (make-node zloc\n                                (:node parent)\n                                (concat (map first left) (cons node right))))\n        parent))))\n\n(defn-switchable root\n  \"Zips all the way up `zloc` and returns the root node, reflecting any changes.\"\n  [zloc]\n  (if (:end? zloc)\n    (node zloc)\n    (let [p (up zloc)]\n      (if p\n        (recur p)\n        (node zloc)))))\n\n(defn-switchable right\n  \"Returns zipper with location at the right sibling of the current node in `zloc`, or nil.\"\n  [zloc]\n  (let [{:keys [node parent position left] [r & rnext :as right] :right} zloc]\n    (when (and parent right)\n      (assoc zloc\n             :node r\n             :left (conj left [node position])\n             :right rnext\n             :position (node/+extent position (node/extent node))))))\n\n(defn-switchable rightmost\n  \"Returns zipper with location at the rightmost sibling of the current node in `zloc`, or self.\"\n  [zloc]\n  (if-let [next (right zloc)]\n    (recur next)\n    zloc))\n\n(defn-switchable left\n  \"Returns zipper with location at the left sibling of the current node in `zloc`, or nil.\"\n  [zloc]\n  (let [{:keys [node parent left right]} zloc]\n    (when (and parent (seq left))\n      (let [[lnode lpos] (peek left)]\n        (assoc zloc\n               :node lnode\n               :position lpos\n               :left (pop left)\n               :right (cons node right))))))\n\n(defn-switchable leftmost\n  \"Returns zipper with location at the leftmost sibling of the current node in `zloc`, or self.\"\n  [zloc]\n  (let [{:keys [node parent left right]} zloc]\n    (if (and parent (seq left))\n      (let [[lnode lpos] (first left)]\n        (assoc zloc\n               :node lnode\n               :position lpos\n               :left []\n               :right (concat (map first (rest left)) [node] right)))\n      zloc)))\n\n(defn-switchable insert-left\n  \"Returns zipper with node `item` inserted as the left sibling of current node in `zloc`,\n without moving location.\"\n  [zloc item]\n  (let [{:keys [parent position left]} zloc]\n    (if-not parent\n      (throw (ex-info \"cannot insert left at top\" {}))\n      (assoc zloc\n             :changed? true\n             :left (conj left [item position])\n             :position (node/+extent position (node/extent item))))))\n\n(defn-switchable insert-right\n  \"Returns zipper with node `item` inserted as the right sibling of the current node in `zloc`,\n  without moving location.\"\n  [zloc item]\n  (let [{:keys [parent right]} zloc]\n    (if-not parent\n      (throw (ex-info \"cannot insert right at top\" {}))\n      (assoc zloc\n             :changed? true\n             :right (cons item right)))))\n\n(defn-switchable replace\n  \"Returns zipper with node `item` replacing current node in `zloc`, without moving location.\"\n  [zloc item]\n  (assoc zloc :changed? true :node item))\n\n(defn edit\n  \"Returns zipper with value of `(apply f current-node args)` replacing current node in `zloc`.\n\n   The result of `f` should be a rewrite-clj node.\"\n  [zloc f & args]\n  (if (custom-zipper? zloc)\n    (replace zloc (apply f (node zloc) args))\n    (apply clj-zip/edit zloc f args)))\n\n(defn-switchable insert-child\n  \"Returns zipper with node `item` inserted as the leftmost child of the current node in `zloc`,\n  without moving location.\"\n  [zloc item]\n  (replace zloc (make-node zloc (node zloc) (cons item (children zloc)))))\n\n(defn-switchable append-child\n  \"Returns zipper with node `item` inserted as the rightmost child of the current node in `zloc`,\n  without moving.\"\n  [zloc item]\n  (replace zloc (make-node zloc (node zloc) (concat (children zloc) [item]))))\n\n(defn-switchable next\n  \"Returns zipper with location at the next depth-first location in the hierarchy in `zloc`.\n  When reaching the end, returns a distinguished zipper detectable via [[end?]]. If already\n  at the end, stays there.\"\n  [zloc]\n  (if (:end? zloc)\n    zloc\n    (or\n     (and (branch? zloc) (down zloc))\n     (right zloc)\n     (loop [p zloc]\n       (if (up p)\n         (or (right (up p)) (recur (up p)))\n         (assoc p :end? true))))))\n\n(defn-switchable prev\n  \"Returns zipper with location at the previous depth-first location in the hierarchy in `zloc`.\n  If already at the root, returns nil.\"\n  [zloc]\n  (if-let [lloc (left zloc)]\n    (loop [zloc lloc]\n      (if-let [child (and (branch? zloc) (down zloc))]\n        (recur (rightmost child))\n        zloc))\n    (up zloc)))\n\n(defn-switchable end?\n  \"Returns true if at end of depth-first walk in `zloc`.\"\n  [zloc]\n  (:end? zloc))\n\n(defn-switchable remove\n  \"Returns zipper with current node in `zloc` removed, with location at node that would have preceded\n  it in a depth-first walk.\"\n  [zloc]\n  (let [{:keys [parent left right]} zloc]\n    (if-not parent\n      (throw (ex-info \"cannot remove at top\" {}))\n      (if (seq left)\n        (loop [zloc (let [[lnode lpos] (peek left)]\n                     (assoc zloc\n                            :changed? true\n                            :position lpos\n                            :node lnode\n                            :left (pop left)))]\n          (if-let [child (and (branch? zloc) (down zloc))]\n            (recur (rightmost child))\n            zloc))\n        (assoc parent\n               :changed? true\n               :node (make-node zloc (:node parent) right))))))\n"],"x_google_ignoreList":[0]}