{"version":3,"sources":["cuerdas/regexp.cljc"],"mappings":";AA8BA;;;;+BAAA,/BAAMA,sEAGHC;AAHH,AAIW,OAACC,wBAAkBD;;AAG9B;;;;wBAAA,xBAAME,wDAGHC;AAHH,AAKW,OAACC,yBAAkBD","names":["cuerdas.regexp/regexp?","x","cljs.core/regexp?","cuerdas.regexp/escape","s","goog.string/regExpEscape"],"sourcesContent":[";; Copyright (c) Andrey Antukh <niwi@niwi.nz>\n;; All rights reserved.\n;;\n;; Redistribution and use in source and binary forms, with or without\n;; modification, are permitted provided that the following conditions are met:\n;;\n;; * Redistributions of source code must retain the above copyright notice, this\n;;   list of conditions and the following disclaimer.\n;;\n;; * Redistributions in binary form must reproduce the above copyright notice,\n;;   this list of conditions and the following disclaimer in the documentation\n;;   and/or other materials provided with the distribution.\n;;\n;; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\n;; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\n;; IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n;; DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE\n;; FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL\n;; DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR\n;; SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER\n;; CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n;; OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\n;; OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n\n(ns cuerdas.regexp\n  \"A regexp helpers and enhancements (mostly for cljs).\"\n  (:refer-clojure :exclude [regexp?])\n  #?(:cljs (:require [goog.string :as gstr]))\n  #?(:clj (:import (java.util.regex Pattern))))\n\n(defn regexp?\n  \"Return `true` if `x` is a regexp pattern\n  instance.\"\n  [x]\n  #?(:cljs (cljs.core/regexp? x)\n     :clj (instance? Pattern x)))\n\n(defn escape\n  \"Escapes characters in the string that are not safe\n   to use in a RegExp.\"\n  [s]\n  #?(:clj  (Pattern/quote ^String s)\n     :cljs (gstr/regExpEscape s)))\n"],"x_google_ignoreList":[0]}