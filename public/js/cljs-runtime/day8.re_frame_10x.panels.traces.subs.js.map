{"version":3,"sources":["day8/re_frame_10x/panels/traces/subs.cljs"],"mappings":"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","names":["day8.re_frame_10x.inlined_deps.re_frame.v1v3v0.re_frame.core.reg_sub","p__75332","map__75333","cljs.core/--destructure-map","cljs.core.get","traces","_","p__75334","map__75335","categories","p__75337","map__75339","queries","p__75341","map__75342","draft-query","p__75346","map__75348","draft-query-type","or__5002__auto__","p__75352","map__75354","draft-query-error","p__75355","map__75356","expansions","p__75358","map__75359","all","cljs.core/count","p__75362","map__75363","filter-by-selected-epoch?","p__75364","vec__75365","cljs.core.nth","beginning","ending","cljs.core.into","day8.re-frame-10x.tools.coll/id-between-xf","p__75373","vec__75374","filtered","cljs.core/not","p__75379","vec__75380","namespaces","munged-namespaces","cljs.core.map","cljs.core.comp","cljs.core/munge","cljs.core/set","cljs.core.remove","trace","day8.re-frame-10x.tools.metamorphic/render?","cljs.core/contains?","cljs.core.subs","clojure.string.last_index_of","and__5000__auto__","cljs.core._EQ_","cljs.core.get_in","p__75384","vec__75385","cljs.core.filter","day8.re-frame-10x.panels.traces.subs/query->fn","query","clojure.string/includes?","clojure.string/lower-case","p__75389","vec__75390","cljs.core/empty?","cljs.core.conj","cljs.core/seq","cljs.core.reduce","ret","p1__75388#","cljs.core/some","cljs.core.sort_by","p__75396","vec__75397","ignored-events","event?","event-name","cljs.core/first"],"sourcesContent":["(ns day8.re-frame-10x.panels.traces.subs\n  (:require\n   [clojure.string                                               :as string]\n   [day8.re-frame-10x.inlined-deps.re-frame.v1v3v0.re-frame.core :as rf]\n   [day8.re-frame-10x.tools.metamorphic                          :as metam]\n   [day8.re-frame-10x.navigation.epochs.subs                     :as epochs.subs]\n   [day8.re-frame-10x.panels.settings.subs                       :as settings.subs]\n   [day8.re-frame-10x.tools.coll                                 :as tools.coll]))\n\n(rf/reg-sub\n ::root\n (fn [{:keys [traces]} _]\n   traces))\n\n(rf/reg-sub\n ::categories\n :<- [::root]\n (fn [{:keys [categories]} _]\n   categories))\n\n(rf/reg-sub\n ::queries\n :<- [::root]\n (fn [{:keys [queries]} _]\n   queries))\n\n(rf/reg-sub\n ::draft-query\n :<- [::root]\n (fn [{:keys [draft-query]} _]\n   draft-query))\n\n(rf/reg-sub\n ::draft-query-type\n :<- [::root]\n (fn [{:keys [draft-query-type]} _]\n   (or draft-query-type :contains)))\n\n(rf/reg-sub\n ::draft-query-error\n :<- [::root]\n (fn [{:keys [draft-query-error]} _]\n   draft-query-error))\n\n(rf/reg-sub\n ::expansions\n :<- [::root]\n (fn [{:keys [expansions]} _]\n   expansions))\n\n(rf/reg-sub\n ::all\n :<- [::root]\n (fn [{:keys [all]} _]\n   all))\n\n(rf/reg-sub\n ::count\n :<- [::all]\n (fn [traces _]\n   (count traces)))\n\n(rf/reg-sub\n ::filter-by-selected-epoch?\n :<- [::root]\n (fn [{:keys [filter-by-selected-epoch?]} _]\n   filter-by-selected-epoch?))\n\n(rf/reg-sub\n ::filtered-by-epoch-always\n :<- [::all]\n :<- [::epochs.subs/beginning-trace-id]\n :<- [::epochs.subs/ending-trace-id]\n (fn [[traces beginning ending] _]\n   (into [] (tools.coll/id-between-xf beginning ending) traces)))\n\n(rf/reg-sub\n ::filtered-by-epoch\n :<- [::filter-by-selected-epoch?]\n :<- [::all]\n :<- [::filtered-by-epoch-always]\n (fn [[filter-by-selected-epoch? all filtered] _]\n   (if-not filter-by-selected-epoch?\n     all\n     filtered)))\n\n(rf/reg-sub\n ::filtered-by-namespace\n :<- [::filtered-by-epoch]\n :<- [::settings.subs/filtered-view-trace]\n (fn [[traces namespaces] _]\n   (let [munged-namespaces (->> namespaces\n                                (map (comp munge :ns-str))\n                                (set))]\n     (into []\n            ;; Filter out view namespaces we don't care about.\n           (remove\n            (fn [trace] (and (metam/render? trace)\n                             (contains? munged-namespaces (subs (:operation trace) 0 (string/last-index-of (:operation trace) \".\"))))))\n           traces))))\n\n(rf/reg-sub\n ::filtered-by-cached-subscriptions\n :<- [::filtered-by-namespace]\n (fn [traces _]\n    ;; Remove cached subscriptions. Could add this back in as a setting later\n    ;; but it's pretty low signal/noise 99% of the time.\n   (remove (fn [trace] (and (= :sub/create (:op-trace trace))\n                            (get-in trace [:tags :cached?])))\n           traces)))\n\n(rf/reg-sub\n ::filtered-by-categories\n :<- [::filtered-by-cached-subscriptions]\n :<- [::categories]\n (fn [[traces categories] _]\n   (filter (fn [trace] (when (contains? categories (:op-type trace)) trace)) traces)))\n\n(defn query->fn [trace query]\n  (cond\n    (= :contains (:type query))\n    (string/includes? (string/lower-case (str (:operation trace) \" \" (:op-type trace)))\n                      (:query query))\n    (= :contains-not (:type query))\n    (not (string/includes? (string/lower-case (str (:operation trace) \" \" (:op-type trace)))\n                           (:query query)))\n    :else\n    (< (:query query) (:duration trace))))\n\n(rf/reg-sub\n ::filtered-by-queries\n :<- [::filtered-by-categories]\n :<- [::queries]\n :<- [::draft-query]\n :<- [::draft-query-type]\n (fn [[traces queries draft-query draft-query-type] _]\n   (let [queries (if-not (empty? draft-query) (conj queries {:type draft-query-type :query draft-query})\n                         queries)]\n     (if-not (seq queries)\n       traces\n        ;; loop over traces, retain traces that match any of the queries\n       (reduce (fn [ret trace]\n                 (if (some #(query->fn trace %) queries)\n                   (conj ret trace)\n                   ret)) [] traces)))))\n\n(rf/reg-sub\n ::sorted\n :<- [::filtered-by-queries]\n (fn [traces _]\n   (sort-by :id traces)))\n\n(rf/reg-sub\n ::filtered-by-ignored-events\n :<- [::sorted]\n :<- [::settings.subs/ignored-events]\n (fn [[traces ignored-events] _]\n   (let [ignored-events (->> ignored-events (map :event-id) set)]\n      ;; loop over traces and find events, then remove any events in `ignored events`\n     (remove (fn [trace]\n               (let [event?     (= :event (:op-type trace))\n                     event-name (when event? (first (get-in trace [:tags :event])))]\n                 (contains? ignored-events event-name))) traces))))\n"],"x_google_ignoreList":[0]}