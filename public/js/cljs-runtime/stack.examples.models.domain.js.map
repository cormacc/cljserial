{"version":3,"sources":["stack/examples/models/domain.cljc"],"mappings":";AAQA,0CAAA,1CAAKA;AAIL,sCAAA,tCAAKC;AAEL,oCAAA,mFAAA,mDAAA,mFAAA,8FAAA,mFAAA,oEAAA,mFAAA,0DAAA,2CAAA,kDAAA,4BAAA,mFAAA,qDAAA,h4BAAKC,+SAEGD;AAIR,0CAAA,mFAAA,qDAAA,kDAAA,2DAAA,/RAAKE;AAGL,AAAKC,4CAAa,AAACC,eAAKF;AAExB,wCAAA,mFAAA,mDAAA,mFAAA,wDAAA,mFAAA,oHAAA,mFAAA,yGAAA,mFAAA,wDAAA,mFAAA,mDAAA,mFAAA,kDAAA,4DAAA,mFAAA,yDAAA,4DAAA,mFAAA,qDAAA,99CAAKG,8cAEmBJ,8LACZC;AAWZ,sCAAA,2CAAA,yDAAA,2CAAA,2DAAA,hPAAKI;AAML,+CAAA,/CAAMC,sGAAiBC;AAAvB,AAAA,kDAAA,8EAAA,vBACU,AAACC,gBAAMD,4DACR,AAACC,gBAAM,+CAAA,/CAACC,oGAAaF;;AAE9B,yCAAA,zCAAMG,0FAAWC,YAAYJ;AAA7B,AACE,IAAMK,YAAU,iBAAAC,WAAMF;IAANE,eAAA,EAAA,CAAAA,oBAAAC,oBAAA,AAAAD,aAAA;AAAA,AAAA,QAAAA;KAAA;AACW,4BAAA,rBAACG;;;KADZ;AAAA;;;KAAA;AAGOC;;;;AAHP,MAAA,KAAAF,MAAA,CAAA,mEAAAF;;;;AAAhB,AAIE,OAACJ,+CAAOG,UAAUL;;AAKtB,6CAAA,7CAAMW,kGAAeC;AAArB,AACE,IAAAC,WAAA,AAAA;IAAAC,WAKKF;AALL,AAAA,0GAAAC,SAAAC,yCAAAD,SAAAC,7JAACC,kDAAAA,qEAAAA;;AAUH,wCAAA,xCAAMC,wFAAUC;AAAhB,AAAA,0FAAA,2CAAA,uFAAA,4DAAA,xEACsBA;;AAEtB,kDAAA,lDAAMC,4GAAoBC,QAAQC;AAAlC,AAAA,0FAAA,2CAAA,6DAAA,RACWD,oEAAmBC;;AAE9B,oDAAA,pDAAMC,gHAAsBF,QAAQF;AAApC,AAAA,0FAAA,2CAAA,6DAAA,RACWE,mFAA0BF;;AAErC,2CAAA,3CAAMK,8FAAaH;AAAnB,AAAA,0FAAA,mFAAA,iFACyBA","names":["stack.examples.models.domain/storage-id","stack.examples.models.domain/TaskId","stack.examples.models.domain/Task","stack.examples.models.domain/TaskFilter","stack.examples.models.domain/task-filters","cljs.core/rest","stack.examples.models.domain/TaskView","stack.examples.models.domain/schema","stack.examples.models.domain/get-task-counts","tasks","cljs.core/count","cljs.core.filter","stack.examples.models.domain/filter-by","task-filter","filter-fn","G__98202","cljs.core/Keyword","js/Error","cljs.core/complement","cljs.core/identity","stack.examples.models.domain/extract-tasks","db","G__98205","G__98206","datascript.core/q","stack.examples.models.domain/add-task","description","stack.examples.models.domain/set-task-completed","task-id","done","stack.examples.models.domain/set-task-description","stack.examples.models.domain/delete-task"],"sourcesContent":["(ns stack.examples.models.domain\n  (:require\n   [datascript.core :as d]))\n\n;; -------------------------------------------------------------------------------------\n;; -------------------------------------------------------------------------------------\n;; SCHEMA\n\n(def storage-id \"cljstack\")\n\n;; .... malli\n\n(def TaskId :int)\n\n(def Task\n  [:map\n   [:id TaskId]\n   [:description [:string {:min 1}]]\n   [:done :boolean]])\n\n(def TaskFilter [:enum :all :pending :done])\n\n;;TODO: There's probably a more malli way to do this....\n(def task-filters (rest TaskFilter))\n\n(def TaskView\n  [:map\n   [:tasks [:sequential Task]]\n   [:filter TaskFilter]\n   [:counts [:map\n             [:all :int]\n             [:active :int]\n             [:done :int]]]])\n\n;; ... Datascript\n;; Datascript schema only has to specify items that are unique or collections\n;; See https://cjohansen.no/a-unified-specification/ for a handy intro, and model for a unified ds/malli spec\n;; See https://github.com/kristianmandrup/datascript-tutorial/blob/master/create_schema.md\n\n(def schema\n  {:task/id {:db/unique :db.unique/identity}})\n\n;; -------------------------------------------------------------------------------------\n;; -------------------------------------------------------------------------------------\n;; Utilities\n(defn get-task-counts [tasks]\n  {:total (count tasks)\n   :done (count (filter :done tasks))})\n\n(defn filter-by [task-filter tasks]\n  (let [filter-fn (case task-filter\n                    :pending (complement :done)\n                    :done :done\n                    :all identity)]\n    (filter filter-fn tasks)))\n\n;; -------------------------------------------------------------------------------------\n;; -------------------------------------------------------------------------------------\n;; Queries\n(defn extract-tasks [db]\n  (d/q '[:find ?id ?desc ?done\n         :keys id description done\n         :where\n         [?id :task/description ?desc]\n         [?id :task/done ?done]]\n       db))\n\n;; -------------------------------------------------------------------------------------\n;; -------------------------------------------------------------------------------------\n;; Transactions\n(defn add-task [description]\n  [{:task/description description :task/done false}])\n\n(defn set-task-completed [task-id done]\n  [{:db/id task-id :task/done done}])\n\n(defn set-task-description [task-id description]\n  [{:db/id task-id :task/description description}])\n\n(defn delete-task [task-id]\n  [[:db.fn/retractEntity task-id]])\n"]}