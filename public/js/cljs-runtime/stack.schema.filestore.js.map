{"version":3,"sources":["stack/schema/filestore.cljs"],"mappings":";AAKA,8BAAA,mFAAA,0DAAA,2CAAA,kDAAA,xQAAKA;AAEL,kCAAA,mFAAA,qDAAA,8DAAA,xOAAKC;AAGL,mCAAA,mFAAA,tHAAKC;AAEL,8BAAA,mFAAA,mDAAA,mFAAA,yFAAA,mFAAA,qDAAA,mFAAA,yJAAA,mFAAA,oGAAA,mFAAA,uGAAA,mFAAA,mGAAA,mFAAA,qDAAA,n3CAAKC,4SAEKH,mTACM,AAAA,gFAAA,mKACHE,0LACCA,sLACFA;AAKZ,iCAAA,mFAAA,pHAAKE,6KACMJ,4BAAKG;AAEhB,gCAAA,mFAAA,mDAAA,mFAAA,2DAAA,4DAAA,mFAAA,sDAAA,4DAAA,mFAAA,2DAAA,2CAAA,6DAAA,aAAA,mFAAA,yDAAA,0DAAA,9/BAAKE;AAML,mCAAA,mFAAA,mDAAA,mFAAA,2FAAA,mFAAA,1aAAKC,iTAEKD,mLAEGD;AAEb;;;sCAAA,tCAAMG,oFAEHC;AAFH,AAGE,OAACC,eAAK,wDAAA,xDAACC,mDAAUF;;AAEnB;;;yCAAA,zCAAMG,0FAEHH;AAFH,AAGE,IAAMI,IAAE,EAAI,6CAAA,7CAACC,iDAAM,AAACC,gBAAMN,QAChB,kDAAA,lDAACO,6CAAKP,UACNA;AAFV,AAGE,4DAAA,rDAACE,mDAAUE;;AAEf;;;wCAAA,xCAAMI,wFAEHR;AAFH,AAGE,OAACS,kBAAQ,AAACN,uCAAgBH","names":["stack.schema.filestore/Path","stack.schema.filestore/FileType","stack.schema.filestore/Timestamp","stack.schema.filestore/File","stack.schema.filestore/FileMap","stack.schema.filestore/FSInfo","stack.schema.filestore/FileStore","stack.schema.filestore/get-filename","path","cljs.core/last","clojure.string.split","stack.schema.filestore/get-path-vector","p","cljs.core._EQ_","cljs.core/first","cljs.core.subs","stack.schema.filestore/get-dir-vector","cljs.core/butlast"],"sourcesContent":["(ns stack.schema.filestore\n  (:require\n   [clojure.string :as str]))\n\n\n(def Path [:string {:min 1}])\n\n(def FileType [:enum :directory :file])\n\n ;;TODO Revisit this type..\n(def Timestamp [:int])\n\n(def File\n  [:map\n   [:path Path]\n   [:size [:int (:min 0)]]\n   [:created Timestamp]\n   [:modified Timestamp]\n   [:synced Timestamp]\n   ;;FIXME: This should be optional\n   ;;FIXME: This should be a binary data type later\n   [:data :string]])\n\n(def FileMap\n  [:map-of Path File])\n\n(def FSInfo\n  [:map\n   [:capacity :int]\n   [:used :int]\n   [:details {:optional true} [:map-of :keyword :int]]])\n\n(def FileStore\n  [:map\n   [:info FSInfo]\n   ;;TODO: Rename this to files? Or will we reintroduce the notion of directory elements?\n   [:entries FileMap]])\n\n(defn get-filename\n  \"Extract the filename component of a path string of the form '/some/folders/filename.ext'.\"\n  [path]\n  (last (str/split path \"/\")))\n\n(defn get-path-vector\n  \"Extract a vector representation of a given path\"\n  [path]\n  (let [p (if (= \"/\" (first path))\n            (subs path 1)\n            path)]\n    (str/split p \"/\")))\n\n(defn get-dir-vector\n  \"Extract a vector representation of the folder components of a given path\"\n  [path]\n  (butlast (get-path-vector path)))\n"]}