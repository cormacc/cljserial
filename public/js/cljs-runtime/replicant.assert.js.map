{"version":3,"sources":["replicant/assert.cljc"],"mappings":";AAOA,AAAKA,mCAAgB,6CAAA,7CAACC;AACtB,AAAKC,gCAAa,6CAAA,7CAACD;AACnB,AAAKE,yBAAM,6CAAA,7CAACF;AAEZ,iCAAA,jCAAeG;AAAf,AAAA;;AAGA,8BAAA,9BAAeC;AAAf,AAAA;;AAyCA;;;;;gCAAA,hCAAeC,wEAIZC,EAAEC;AAJL,AAKE,8CAAA,9CAACC,uBAAaN;;AACd,OAACO,oBAAUP,uBAAMI,EAAE,WAAKI,EAAEA,MAAEA,MAAEC;AAAX,AAAkB,QAACJ,kCAAAA,yCAAAA,TAAEI,sBAAAA;;;;AAE1C;;;;;mCAAA,nCAAeC,8EAIZN;AAJH,AAKE,OAACE,uBAAaN,uBAAMI","names":["replicant.assert/current-context","cljs.core.atom","replicant.assert/current-node","replicant.assert/error","replicant.assert/assert?","replicant.assert/log?","replicant.assert/add-reporter","k","f","cljs.core/remove-watch","cljs.core/add-watch","_","error","replicant.assert/remove-reporter"],"sourcesContent":["(ns replicant.assert\n  (:require #?(:clj [replicant.env :as env])\n            [replicant.console-logger :as console]\n            [replicant.hiccup-headers :as hiccup])\n  (:refer-clojure :exclude [assert])\n  #?(:cljs (:require-macros [replicant.assert])))\n\n(def current-context (atom nil))\n(def current-node (atom nil))\n(def error (atom nil))\n\n(defn ^:no-doc assert? []\n  #?(:clj (env/enabled? :replicant/asserts? (env/dev?))))\n\n(defn ^:no-doc log? []\n  ;; Enabled by default in production builds, but not when asserts are enabled -\n  ;; they provide more detailed information.\n  #?(:clj (env/enabled? :replicant/log-errors? (not (assert?)))))\n\n(defmacro ^:no-doc log-error [s]\n  (when (log?)\n    (if (:ns &env)\n      `(js/console.error ~s)\n      `(prn ~s))))\n\n(defmacro ^:no-doc enter-node [headers]\n  (when (assert?)\n    `(when ~headers\n       (when-let [ctx# (or (:replicant/context (hiccup/attrs ~headers))\n                           (:replicant/context (meta (hiccup/sexp ~headers))))]\n         (reset! current-context ctx#))\n       (reset! current-node (hiccup/sexp ~headers)))))\n\n(defmacro ^:no-doc assert [test title message & [hiccup]]\n  (when (assert?)\n    `(when (not ~test)\n       (let [fn# (:fn-name @current-context)\n             alias# (:alias @current-context)\n             fd# (:data @current-context)]\n         (reset! error\n          (cond-> {:title ~title\n                   :message ~message\n                   :hiccup (or ~hiccup @current-node)}\n            fn# (assoc :fname fn#)\n            alias# (assoc :alias alias#)\n            fd# (assoc :data fd#)))))))\n\n;; Install default reporter\n\n(defmacro ^:no-doc configure []\n  (when (assert?)\n    `(add-watch error ::default (fn [_# _# _# error#] (console/report error#)))))\n\n;; API\n\n(defn ^:export add-reporter\n  \"Add assert error exporter. `k` is a keyword, `f` is a function that will be\n  called with an assert error, a map of\n  `{:title :message :hiccup :fname :alias :data}`.\"\n  [k f]\n  (remove-watch error ::default)\n  (add-watch error k (fn [_ _ _ error] (f error))))\n\n(defn ^:export remove-reporter\n  \"Remove a previoulsy added reporter, using the same `k` that was used to\n  register it. To remove the default reporter, use `:replicant.assert/default`\n  as `k`.\"\n  [k]\n  (remove-watch error k))\n"],"x_google_ignoreList":[0]}