{"version":3,"sources":["cljserial/utils/dbfx.cljs"],"mappings":";AAcA,GAAA,QAAAA,sCAAAC,4CAAAC,iDAAAC;AAAA;AAAA,AAAA,4BAAA,5BAASC;;AAGT,GAAI,uEAAA,vEAACC,6CAAED;AACL,AACE,AAAKE,+BAAQC;;AACb,AAAKC,+BAAQC;;AACb,AAAKC,gCAASC;;AACd,AAAKC,qCAAcC;;AACnB,AAAKC,8BAAOC;;AACZ,AAAKC,gCAASC;;AACd,AAAKC,oCAAaC;;AAClB,AAAKC,oCAAaC;;AAClB,AAAKC,mCAAYC;;AAGjB,AAAKC,wCAAcC;;AAEnB,8CAAA,9CAAKC;;AAEL,AAAKC,4BAAKC;;AACV,AAAKC,6BAAMC;;AACb,AACE,AAAKxB,+BAAQyB;;AACb,AAAKvB,+BAAQwB;;AACb,AAAKtB,gCAASuB;;AACd,AAAKrB,qCAAcsB;;AACnB,AAAKpB,8BAAOqB;;AACZ,AAAKnB,gCAASoB;;AACd,AAAKlB,oCAAamB;;AAClB,AAAKjB,oCAAakB;;AAClB,AAAKhB,mCAAYiB;;AAGjB,AAAKf,wCAAcgB;;AACnB,AAAKd,8CAAuBe;;AAE5B,AAAKd,4BAAKe;;AACV,AAAKb,6BAAMc;;AAGf;;;gDAAA,hDAAMC,wGAEHC;AAFH,AAGE,IAAAC,WAAO,AAACC,gDAAQC,uCAA6BH;AAA7C,AAAA,4HAAAC,kDAAAA,tKAACjB,2DAAAA,qEAAAA;;AAEH;;;iDAAA,jDAAMoB,0GAEHC;AAFH,AAEO,IAAAC,WAAA,WAAAC;AAAA,AAAQ,qCAAA,2CAAA,qDAAA,qDAAAA,nLAACC,2HAAmBH;;AAA5B,AAAA,4HAAAC,kDAAAA,tKAACtB,2DAAAA,qEAAAA","names":["js/cljserial","js/cljserial.utils","js/cljserial.utils.dbfx","js/cljserial.utils.dbfx.impl","cljserial.utils.dbfx/impl","cljs.core._EQ_","cljserial.utils.dbfx/reg-sub","refx.alpha/reg-sub","cljserial.utils.dbfx/use-sub","refx.alpha/use-sub","cljserial.utils.dbfx/dispatch","refx.alpha/dispatch","cljserial.utils.dbfx/dispatch-sync","refx.alpha/dispatch-sync","cljserial.utils.dbfx/reg-fx","refx.alpha/reg-fx","cljserial.utils.dbfx/reg-cofx","refx.alpha/reg-cofx","cljserial.utils.dbfx/reg-event-fx","refx.alpha/reg-event-fx","cljserial.utils.dbfx/reg-event-db","refx.alpha/reg-event-db","cljserial.utils.dbfx/inject-cofx","refx.alpha/inject-cofx","cljserial.utils.dbfx/->interceptor","refx.interceptor/->interceptor","cljserial.utils.dbfx/reg-global-interceptor","cljserial.utils.dbfx/path","refx.interceptors/path","cljserial.utils.dbfx/after","refx.interceptors/after","re-frame.core/reg-sub","cljserial.utils.uix-reframe/use-subscribe","re-frame.core/dispatch","re-frame.core/dispatch-sync","re-frame.core/reg-fx","re-frame.core/reg-cofx","re-frame.core/reg-event-fx","re-frame.core/reg-event-db","re-frame.core/inject-cofx","re-frame.core/->interceptor","re-frame.core/reg-global-interceptor","re-frame.core/path","re-frame.core/after","cljserial.utils.dbfx/schema-check-interceptor","schema","G__54723","cljs.core.partial","cljserial.utils.schema/check-and-throw","cljserial.utils.dbfx/browser-cache-interceptor","id","G__54731","p1__54725#","cljserial.utils.browser/write"],"sourcesContent":["(ns cljserial.utils.dbfx\n  \"Facade to allow switching between refx and re-frame for app state management.\n  Probably don't want to do this long term, but keeping options open for now.\n  Re-frame is more actively maintained and has some nice dev tooling (re-frame 10x etc).\n  refx is an adaptation to use more recent react conventions.\n  Might want to do comparative performance evaluation at some point (though likely a non-issue for our level of complexity). \"\n  (:require [refx.alpha :as refx]\n            [refx.interceptor]\n            [refx.interceptors]\n            [re-frame.core :as rf]\n            [cljserial.utils.uix-reframe :as rf-utils]\n            [cljserial.utils.browser :as browser]\n            [cljserial.utils.schema :as schema-utils]))\n\n(defonce impl :re-frame)\n\n\n(if (= impl :refx)\n  (do ;; refx aliases\n    (def reg-sub refx/reg-sub)\n    (def use-sub refx/use-sub)\n    (def dispatch refx/dispatch)\n    (def dispatch-sync refx/dispatch-sync)\n    (def reg-fx refx/reg-fx)\n    (def reg-cofx refx/reg-cofx)\n    (def reg-event-fx refx/reg-event-fx)\n    (def reg-event-db refx/reg-event-db)\n    (def inject-cofx refx/inject-cofx)\n\n    ;; The global interceptor -- instrument all published events\n    (def ->interceptor refx.interceptor/->interceptor)\n    ;;FIXME: Does this exist for refx?\n    (def reg-global-interceptor nil)\n\n    (def path refx.interceptors/path)\n    (def after refx.interceptors/after))\n  (do ;; re-frame aliases\n    (def reg-sub rf/reg-sub)\n    (def use-sub rf-utils/use-subscribe)\n    (def dispatch rf/dispatch)\n    (def dispatch-sync rf/dispatch-sync)\n    (def reg-fx rf/reg-fx)\n    (def reg-cofx rf/reg-cofx)\n    (def reg-event-fx rf/reg-event-fx)\n    (def reg-event-db rf/reg-event-db)\n    (def inject-cofx rf/inject-cofx)\n\n    ;; The global interceptor -- instrument all published events\n    (def ->interceptor rf/->interceptor)\n    (def reg-global-interceptor re-frame.core/reg-global-interceptor)\n\n    (def path rf/path)\n    (def after rf/after)))\n\n\n(defn schema-check-interceptor\n  \"Defines a refx interceptor that validates updated db content against a given (malli) `schema`\"\n  [schema]\n  (after (partial schema-utils/check-and-throw schema)))\n\n(defn browser-cache-interceptor\n  \"Defines a refx interceptor that caches data to browser local storage under the specified `id`\"\n  [id] (after #(browser/write {:id id :data %})))\n"]}