{"version":3,"sources":["connect/services/mbt_cd.cljs"],"mappings":"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","names":["connect.services.mbt-cd/CdState","stack.schema.version/Version","stack.schema.filestore/FileStore","connect.services.mbt-cd/initial-state","cljs.core/sorted-map","connect.services.mbt-cd/line-terminator","connect.services.mbt-cd/response-terminator","js/Error","connect.services.mbt-cd/command-complete?","cmd","resp","malli.core.validate","stack.utils.term/EventData","clojure.string/ends-with?","connect.services.mbt-cd/command-handlers","db","temp__5823__auto__","match","cljs.core/re-find","G__96552","stack.utils.dbfx/dispatch","cljs.core.assoc","cljs.core.get","du-match","G__96554","lines","clojure.string/split-lines","file-lines","p1__96548#","cljs.core.filter","clojure.string/includes?","files","cljs.core.into","iter__5480__auto__","s__96557","cljs.core/LazySeq","cljs.core/seq","cljs.core/chunked-seq?","c__5478__auto__","size__5479__auto__","cljs.core/count","b__96559","cljs.core/chunk-buffer","i__96558","cljs.core/-nth","cljs.core/chunk-append","cljs.core/chunk-cons","cljs.core/chunk","iter__96556","cljs.core/chunk-rest","cljs.core/first","cljs.core/cons","cljs.core/rest","f","f-match","connect.services.mbt-cd/controller","G__96570","statecharts.core/machine","ctx","e","__run-fn-form","__kind","__ns","__id","__level","sf","taoensso.telemere.impl/*rt-sig-filter*","__inst","js/Date","__thread","__root0","taoensso.telemere.impl/*trace-root*","__otel-context1","__uid","__root1","__run-result","signal__42410__auto__","cljs.core/Delay","signal__42401__auto__","taoensso.telemere.impl/Signal","taoensso.telemere/*ctx*","taoensso.telemere.impl/*trace-parent*","temp__5821__auto__","taoensso.telemere/*middleware*","sig-middleware__42402__auto__","taoensso.telemere.impl/dispatch-signal!","taoensso.telemere.impl/WrappedSignal","_ctx","_e","G__96582","G__96583","connect.services.mbt-cd/init","stack.services.command-parser/set-exchange-tokeniser","stack.services.command-parser/set-handlers","stack.utils.hsm/register","G__96593","G__96594","stack.utils.dbfx/reg-sub","_query-vector","cljs.core.get_in","cljs.core/chunk-first"],"sourcesContent":["(ns connect.services.mbt-cd\n  (:require\n   [clojure.string :as str]\n   [taoensso.telemere :as t]\n   [malli.core :as m]\n   [statecharts.core :as hsm]\n   [stack.utils.dbfx :as dbfx :refer [reg-sub]]\n   [stack.utils.hsm :as hsm-dbfx]\n   [stack.utils.term :as term]\n   [stack.schema.version :refer [Version]]\n   [stack.schema.filestore :refer [FileStore]]\n   [stack.services.command-parser :as commands]))\n\n\n;;---------------------------------------------------------------------------------------\n;; Schema\n\n\n(def CdState\n  [:map\n   [:serial :int]\n   [:hardware_rev :int]\n   [:firmware_rev Version]\n   [:build_configuration :string]\n   [:bluetooth_firmware :string]\n   [:track :int]\n   [:sd_card FileStore]])\n\n(def initial-state\n  {:serial 0\n   :hardware_rev 0\n   :firmware_rev {:major 0 :minor 0 :patch 0}\n   :build_configuration \"\"\n   :bluetooth_firmware \"\"\n   :track 0\n   :sd_card {:info {:capacity_mb 0 :used_mb 0}\n             :files (sorted-map)}})\n\n;;---------------------------------------------------------------------------------------\n;; CD commands\n\n(def line-terminator \"\\r\\n\")\n(def response-terminator (str line-terminator \"OK\" line-terminator))\n;;TODO: Rework this later to allow binary and text mode command handling...\n(defn command-complete? [cmd resp]\n  {:pre [(m/validate term/EventData cmd)\n         (m/validate term/EventData resp)]}\n  (str/ends-with? (:bytes resp) response-terminator))\n\n\n;; TODO: Rework this and webserial/commands module to allow effects as well as db modification\n;;       E.g. for file storage etc. we'll probably want to have coeffects to trigger file upload to S3 or whatever...\n(def command-handlers\n  [;; >> getid\n   ;; MBT Controller #00000092 / HW v1 / FW v15.2.9\n   ;; BT: Melody Audio V5.6 RC2 (MELODY_5x)\n   ;; IOD 1601#0000112 / 145 hrs\n   ;; OK\n   {:id :getid\n    :matcher #\"getid\"\n    :db-subpath nil\n    :response-parser\n    (fn [db resp]\n      (when-let [match (re-find #\"MBT (\\S+) #(\\d+) / HW v(\\d+) / FW v(\\d+)\\.(\\d+)\\.(\\d+)\" resp)]\n        (dbfx/dispatch [:mbt-cd-identified]) ; FIXME: This should be done via event-fx instead\n        (assoc db\n               :build_configuration (get match 1)\n               :serial (int (get match 2))\n               :hardware_rev (int (get match 3))\n               :firmware_rev\n               {:major (int (get match 4))\n                :minor (int (get match 5))\n                :patch (int (get match 6))})))}\n   ;; >> clin track\n   ;; Selected TRACK01\n   ;; OK\n   {:id :clin-track\n    :matcher #\"clin track\"\n    :db-subpath nil\n    :response-parser\n    (fn [db resp]\n      (when-let [match (re-find #\"Selected TRACK(\\d+)\" resp)]\n        (assoc db\n               :track (int (get match 1)))))}\n   ;; >> file ls\n   ;; MUTEBUTT.LOG :: ---- ::      18092 :: 24/03/06 21:59:54\n   ;; AKGK845B.CSV :: ---- ::        399 :: 24/03/01 14:02:00\n   ;; Total Files: 2 (18 KB)\n   ;; Used 0 of 7663 MB\n   ;; OK\n   {:id :file-ls\n    :matcher #\"file ls\"\n    :db-subpath nil\n    :response-parser\n    (fn [db resp]\n      (when-let [du-match (re-find #\"Used (\\d+) of (\\d+) MB\" resp)]\n        (dbfx/dispatch [:mbt-cd-files-listed])\n        (let [lines (str/split-lines resp)\n              file-lines (filter #(str/includes? % \" :: \") lines)\n              files (into (sorted-map) (for [f file-lines]\n                                         (let [f-match (re-find #\"(\\S+)\\s+::\\s+(\\S+)\\s+::\\s+(\\d+)\\s+::\\s+(.+)\" f)]\n                                           [(get f-match 1) {:path (get f-match 1)\n                                                             :attributes (get f-match 2)\n                                                             :size (int (get f-match 3))\n                                                             :timestamp (get f-match 4)}])))]\n          (assoc db\n                 :sd_card {:files files\n                           :info {:capacity_mb (int (get du-match 2)) :used_mb (int (get du-match 1))}}))))}\n   ;; END COMMAND HANDLERS\n   ])\n\n(comment\n  (def file-ls-parser (:response-parser (get command-handlers 2)))\n  (def file-ls-resp \"MUTEBUTT.LOG :: ---- ::      18092 :: 24/03/06 21:59:54\nAKGK845B.CSV :: ---- ::        399 :: 24/03/01 14:02:00\nTotal Files: 2 (18 KB)\nUsed 0 of 7663 MB\nOK\n\")\n  (file-ls-parser {} file-ls-resp)\n  ;;\n  )\n\n\n;;---------------------------------------------------------------------------------------\n;; Controller state machine\n(def controller\n  (hsm/machine\n   {:id :mbt-cd\n    :initial :disconnected\n    ;;:context nil ;Consider moving CD state to statemachine context? Though think through subscriptions...\n    :states {:disconnected {;;TODO: Entry handler -- reset state?\n                            :on {:webserial/connected :connected}}\n             :connected {:initial :identifying\n                         :entry (fn [ctx e]\n                                  (t/log! :info \"Yay we can run multiple state machines...\"))\n                         :on {:webserial/disconnected :disconnected}\n                         :states {:identifying {:entry (fn [_ctx _e]\n                                                         ;;TODO: associate the command with the handler above?\n                                                         (dbfx/dispatch [:serial-tx \"getid\"]))\n                                                :on {:mbt-cd-identified :listing-files}}\n                                  :listing-files {:entry (fn [_ctx _e] (dbfx/dispatch [:serial-tx \"file ls\"]))\n                                                  :on {:mbt-cd-files-listed :ready}}\n                                  :ready {:entry (fn [_ctx _e] (t/log! :info \"MBT ready for action!\"))}}}}}))\n\n\n\n(defn init []\n  ;; 1a. Initialise tokeniser with command copmletion indicator (\"OK\")\n  ;;    When found, this causes an event to be published...\n  (commands/set-exchange-tokeniser command-complete?)\n  ;; 1b. ... that causes a command handler to be looked up to handle the data\n  (commands/set-handlers command-handlers [:cd-info])\n  ;; 2. Register the statemachine with dbfx (re-frame or refx, depending on which backend we're using)\n  ;;    ... this causes an event listener to be registered for each event handled by the HSM.\n  ;;    ... N.B. re-frame only allows one handler/owner per event, though as many listeners as you like\n  ;;             can subscribe to the affected path of the re-frame db or whatever.\n  (hsm-dbfx/register controller)\n\n;; Subscription for cd state database updates...\n;; TODO: Maybe we should do this in (commands/set-handlers instead?)\n  (reg-sub\n   :cd-info\n   (fn [db _query-vector]\n     (get-in db [:cd-info]))))\n"]}