{"version":3,"sources":["cljserial/pages/converter.cljs"],"mappings":";AAQA,AAAA,mCAAA,nCAAOG;AAAP,AAAA,IAAAH,mBAAA;AAAA,AAAA,GAAAC;AAAA,AAAA,IAAAC,4BAAA,AAAAC;AAAA,AAAA,oBAAAD;AAAA,AAAA,IAAAE,0BAAAF;AAAA,AAAA,CAAAE,wDAAAA,0DAAAA;;AAAA;;AAAA;;AACE,IAAAU,cAA2B,mBAAA,nBAACI;aAA5B,AAAAH,4CAAAD,YAAA,IAAA,rEAAOE;uBAAP,AAAAD,4CAAAD,YAAA,IAAA,/EAAcG;AAAd,AACE,OAAAE,wBAAA,MAAA,CAAA,aAAA,kBAAA,CACG,AAAAA,wBAAA,QAAA,CAAA,WAAA,oBAAA,CAAA,gBACA,AAAAC,kCAAA,WAAA,CAAA,aAAA,gBAAA,gCAAA,+CAGe,WAASC;AAAT,AACE,IAAMC,QAAM,AAAA,AAAID;AAAhB,AACE,IAAAE,YAAa,AAACC,iCAAaF;AAA3B,AAAA,wGAAAC,yCAAAA,zIAACN,iDAAAA,4DAAAA;KALpB,IAMA,AAAAE,wBAAA,QAAA,CAAA,WAAA,qBAAA,CAAA,sBACA,AAAAC,kCAAA,WAAA,CAAA,aAAA,gBAAA,iCAAA,oEAAA,aAAA,AAAAK,qDAAA,VAIWT;;AAflB,AAAA,GAAAf;AAAA,IAAAI,iDAAAC;IAAAC,iDAAAJ;AAAA,AAAA,CAAAG,yCAAAC;;AAAA,IAAA,AAAA,OAAAP;UAAA,AAAA,CAAAM,yCAAAD;;AAAA,OAAAL;;;;AAAA,CAAA,AAAAG,wDAAA;;AAAA,CAAA,AAAAA,+CAAA;;AAAA,GAAAF;AAAA,AAAA,GAAA,QAAAO,mCAAAC,uCAAAC;AAAA,AAAA,IAAAC,4BAAA,AAAAC;AAAA,AAAA,CAAAD,0DAAAA,wDAAAR,iCAAA,4BAAA,KAAA,QAAAQ,qCAAAR,iCAAA,4BAAA,KAAA;;AAAA,AAAAU,8BAAAV,iCAAA,AAAAA;;AAAA,CAAA,AAAAA,0DAAAQ;;AAAA;;AAAA;AAiBA","names":["f__79553__auto__","js/goog.DEBUG","temp__5804__auto__","cljserial.pages.converter/layout","f__79486__auto__","*current-component*-orig-val__118192","uix.core/*current-component*","*current-component*-temp-val__118193","js/window","js/window.uix","js/window.uix.dev","sig__79495__auto__","js/window.uix.dev.signature!","js/window.uix.dev.register!","vec__118166","cljs.core.nth","output","set-output!","uix.core/use-state","uix.compiler.aot/>el","uix.compiler.aot/create-uix-input","event","input","G__118181","cljserial.utils.uix/html->uix","uix.compiler.attributes/keyword->string"],"sourcesContent":["(ns cljserial.pages.converter\n  \"A HTML -> UIX syntax converter for use during development.\n  Implemented using straight uix/react state hooks rather than re-frame/refx, to isolate it\n  from proper application state.\"\n  (:require\n   [uix.core :refer [defui $]]\n   [cljserial.utils.uix :as uu]))\n\n(defui layout []\n  (let [[output set-output!] (uix.core/use-state \"\")]\n    ($ :.flex.flex-col\n       ($ :label {:for \"converter-input\"} \"HTML  input\")\n       ($ :textarea.min-h-60\n          {:id \"converter-input\"\n           :placeholder \"Enter HTML markup in this box ...\"\n           :on-change (fn [^js event]\n                        (let [input (.. event -target -value)]\n                          (set-output! (uu/html->uix input))))})\n       ($ :label {:for \"converter-output\"} \"UIx markup output\")\n       ($ :textarea.min-h-60\n          {:id \"converter-output\"\n           :placeholder \"... and the corresponding UIx markup will appear here.\"\n           :readOnly true\n           :value output}))))\n\n(comment\n  ;; Get current content of input element for debugging\n  (def input\n    (.-value\n     (.getElementById js/document \"converter-input\")))\n  ;\n  )\n"]}