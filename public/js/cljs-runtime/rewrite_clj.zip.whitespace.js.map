{"version":3,"sources":["rewrite_clj/zip/whitespace.cljc"],"mappings":"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","names":["rewrite-clj.zip.whitespace/whitespace?","zloc","G__66334","rewrite-clj.custom-zipper.core/node","rewrite-clj.node.whitespace/whitespace?","rewrite-clj.zip.whitespace/linebreak?","G__66335","rewrite-clj.node.whitespace/linebreak?","rewrite-clj.zip.whitespace/comment?","G__66338","rewrite-clj.node.comment/comment?","rewrite-clj.zip.whitespace/whitespace-not-linebreak?","and__5000__auto__","cljs.core/not","rewrite-clj.zip.whitespace/whitespace-or-comment?","G__66341","rewrite-clj.node.extras/whitespace-or-comment?","rewrite-clj.zip.whitespace/skip","f","p?","cljs.core/iterate","cljs.core.take_while","cljs.core/identity","cljs.core/complement","rewrite-clj.custom-zipper.core/end?","cljs.core.drop_while","cljs.core/first","var_args","G__66343","rewrite-clj.zip.whitespace/skip-whitespace","js/Error","rewrite_clj.zip.whitespace.skip_whitespace","rewrite-clj.custom-zipper.core/right","rewrite-clj.zip.whitespace/skip-whitespace-left","rewrite-clj.custom-zipper.core/left","G__66348","rewrite-clj.zip.whitespace/insert-space-left","rewrite_clj.zip.whitespace.insert_space_left","n","rewrite-clj.custom-zipper.core/insert-left","rewrite-clj.node.whitespace/spaces","G__66351","rewrite-clj.zip.whitespace/insert-space-right","rewrite_clj.zip.whitespace.insert_space_right","rewrite-clj.custom-zipper.core/insert-right","G__66353","rewrite-clj.zip.whitespace/insert-newline-left","rewrite_clj.zip.whitespace.insert_newline_left","rewrite-clj.node.whitespace/newlines","G__66364","rewrite-clj.zip.whitespace/insert-newline-right","rewrite_clj.zip.whitespace.insert_newline_right","G__66376","rewrite-clj.zip.whitespace/prepend-space","or__5002__auto__","rewrite_clj.zip.whitespace.prepend_space","G__66386","rewrite-clj.zip.whitespace/append-space","rewrite_clj.zip.whitespace.append_space","G__66395","rewrite-clj.zip.whitespace/prepend-newline","rewrite_clj.zip.whitespace.prepend_newline","G__66399","rewrite-clj.zip.whitespace/append-newline","rewrite_clj.zip.whitespace.append_newline"],"sourcesContent":["(ns ^:no-doc rewrite-clj.zip.whitespace\n  (:require [rewrite-clj.custom-zipper.core :as zraw]\n            [rewrite-clj.node.comment :as ncomment]\n            [rewrite-clj.node.extras :as nextras]\n            [rewrite-clj.node.whitespace :as nwhitespace]))\n\n#?(:clj (set! *warn-on-reflection* true))\n\n;; ## Predicates\n\n(defn whitespace?\n  \"Returns true when the current the node in `zloc` is a Clojure whitespace (which includes the comma).\"\n  [zloc]\n  (some-> zloc zraw/node nwhitespace/whitespace?))\n\n(defn linebreak?\n  \"Returns true when the current node in `zloc` is a linebreak.\"\n  [zloc]\n  (some-> zloc zraw/node nwhitespace/linebreak?))\n\n(defn comment?\n  \"Returns true when the current node in `zloc` is a comment.\"\n  [zloc]\n  (some-> zloc zraw/node ncomment/comment?))\n\n(defn whitespace-not-linebreak?\n  \"Returns true when current node in `zloc` is a whitespace but not a linebreak.\"\n  [zloc]\n  (and\n   (whitespace? zloc)\n   (not (linebreak? zloc))))\n\n(defn whitespace-or-comment?\n  \"Returns true when current node in `zloc` is whitespace or a comment.\"\n  [zloc]\n  (some-> zloc zraw/node nextras/whitespace-or-comment?))\n\n;; ## Movement\n\n(defn skip\n  \"Return zipper with location moved to first location not satisfying predicate `p?` starting from the node in\n   `zloc` and traversing by function `f`.\"\n  [f p? zloc]\n  (->> (iterate f zloc)\n       (take-while identity)\n       (take-while (complement zraw/end?))\n       (drop-while p?)\n       (first)))\n\n(defn skip-whitespace\n  \"Return zipper with location moved to first non-whitespace/non-comment starting from current node in `zloc`\n   and traversing by function `f`.\n\n   `f` defaults to [[right]]\"\n  ([zloc] (skip-whitespace zraw/right zloc))\n  ([f zloc] (skip f whitespace-or-comment? zloc)))\n\n(defn skip-whitespace-left\n  \"Return zipper with location moved to first non-whitespace/non-comment starting from current node in `zloc` traversing left.\"\n  [zloc]\n  (skip-whitespace zraw/left zloc))\n\n;; ## Insertion\n\n(defn insert-space-left\n  \"Return zipper with `n` space whitespace node inserted to the left of the current node in `zloc`, without moving location.\n   `n` defaults to 1.\"\n  ([zloc] (insert-space-left zloc 1))\n  ([zloc n]\n   {:pre [(>= n 0)]}\n   (if (pos? n)\n     (zraw/insert-left zloc (nwhitespace/spaces n))\n     zloc)))\n\n(defn insert-space-right\n  \"Return zipper with `n` space whitespace node inserted to the right of the current node in `zloc`, without moving location.\n   `n` defaults to 1.\"\n  ([zloc] (insert-space-right zloc 1))\n  ([zloc n]\n   {:pre [(>= n 0)]}\n   (if (pos? n)\n     (zraw/insert-right zloc (nwhitespace/spaces n))\n     zloc)))\n\n(defn insert-newline-left\n  \"Return zipper with `n` newlines node inserted to the left of the current node in `zloc`, without moving location.\n   `n` defaults to 1.\"\n  ([zloc] (insert-newline-left zloc 1))\n  ([zloc n]\n   (zraw/insert-left zloc (nwhitespace/newlines n))))\n\n(defn insert-newline-right\n  \"Return zipper with `n` newlines node inserted to the right of the current node in `zloc`, without moving location.\n   `n` defaults to 1.\"\n  ([zloc] (insert-newline-right zloc 1))\n  ([zloc n]\n   (zraw/insert-right zloc (nwhitespace/newlines n))))\n\n;; ## Deprecated Functions\n\n(defn prepend-space\n   \"DEPRECATED: renamed to [[insert-space-left]].\"\n  ([zloc n]\n   (insert-space-left zloc (or n 1)))\n  ([zloc]\n   (prepend-space zloc nil)))\n\n(defn append-space\n   \"DEPRECATED: renamed to [[insert-space-right]].\"\n  ([zloc n]\n   (insert-space-right zloc (or n 1)))\n  ([zloc]\n   (append-space zloc nil)))\n\n(defn prepend-newline\n   \"DEPRECATED: renamed to [[insert-newline-left]].\"\n  ([zloc n]\n   (insert-newline-left zloc (or n 1)))\n  ([zloc]\n   (prepend-newline zloc nil)))\n\n(defn append-newline\n   \"DEPRECATED: renamed to [[insert-newline-right]].\"\n  ([zloc n]\n   (insert-newline-right zloc (or n 1)))\n  ([zloc]\n   (append-newline zloc nil)))\n"],"x_google_ignoreList":[0]}