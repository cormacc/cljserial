{"version":3,"sources":["cljserial/utils/uix.cljs"],"mappings":"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","names":["js/cljserial","js/cljserial.utils","js/cljserial.utils.uix","js/cljserial.utils.uix.uix-root","cljserial.utils.uix/uix-root","uix.dom.create_root","js/document.getElementById","cljserial.utils.uix/render","layout","uix.dom/render-root","cljserial.utils.uix/use-persistent-state","store-key","initial-value","vec__117356","cljs.core.nth","value","set-value!","uix.core/use-state","uix.hooks.alpha.use_effect","uix.core/jsfy-deps","clojure.edn.read_string","js/localStorage.getItem","G__117362","p1__117354#","cljs.core.into","js/localStorage.setItem","cljserial.utils.uix/from-hiccup","form","cljs.core/seq?","cljs.core.mapv","cljs.core/vector?","vec__117364","seq__117365","cljs.core/seq","first__117366","cljs.core/first","cljs.core/next","vec__117367","cljs.core._EQ_","cljs.core/rest","tag","attrs","children","cljs.core/map?","cljs.core/count","G__117370","cljs.core/contains?","cljs.core/meta","cljs.core.assoc","cljs.core.map","cljs.core.sequence","cljs.core.concat","cljs.core/List","cljserial.utils.uix/from-html","html-str","cljs.core.comp","hickory.core/as-hiccup","hickory.core/parse-fragment","cljserial.utils.uix/replace-last-","s","pattern","replacement","temp__5802__auto__","match-pos","clojure.string.last_index_of","prefix","cljs.core.subs","suffix","cljserial.utils.uix/dedup-parens-","str","clojure.string/starts-with?","clojure.string/replace-first","cljserial.utils.uix/html->uix","clojure.string/replace"],"sourcesContent":["(ns cljserial.utils.uix\n  (:require\n   [clojure.edn :as edn]\n   [clojure.string :as s]\n   [uix.dom]\n   [uix.core :as uix]\n   ;; FIXME: This import is failing as it's from dev.clj?\n   ;;        Likely blindingly easy to fix if I knew what I was doing...\n   ;; [uix.dev :refer [from-hiccup from-html]]\n   [hickory.core :as h]))\n\n(defonce uix-root\n  (uix.dom/create-root (js/document.getElementById \"root\")))\n\n(defn render [layout]\n  (uix.dom/render-root layout uix-root))\n\n(defn use-persistent-state\n  \"Loads initial state from local storage and persists every updated state value\n  Returns a tuple of the current state value and an updater function\"\n  [store-key initial-value]\n  (let [[value set-value!] (uix/use-state initial-value)]\n    (uix/use-effect\n      (fn []\n        (let [value (edn/read-string (js/localStorage.getItem store-key))]\n          (set-value! #(into % value))))\n      [store-key])\n    (uix/use-effect\n      (fn []\n        (js/localStorage.setItem store-key (str value)))\n      [value store-key])\n    [value set-value!]))\n\n;;\n;; These two functions are taken new in uix v1.1.0 I.e. written by roman liutikov\n;; Duplicated here because I don't know to import from dev.clj\n(defn from-hiccup [form]\n  (cond\n    (seq? form)\n    (mapv from-hiccup form)\n\n    (vector? form)\n    (let [form (cond\n                 (= :> (first form))\n                 (rest form)\n\n                 :else form)\n          [tag attrs & children] form\n          [attrs children] (cond\n                             (map? attrs) [attrs children]\n                             (> (count form) 1) [nil (into [attrs] children)]\n                             :else [nil children])\n          attrs (cond-> attrs\n                  (contains? (meta form) :key)\n                  (assoc :key (:key (meta form))))\n          children (map from-hiccup children)]\n      (if attrs\n        `(~'$ ~tag ~attrs ~@children)\n        `(~'$ ~tag ~@children)))\n\n    :else form))\n\n(comment\n  (from-hiccup\n   [:div\n    [:div {:class \"foo\"} \"bar\"]\n    [:> 'js-component]\n    [:<> [:button \"hello\"] [:span \"world\"]]\n    ^{:key \"hello\"} [:span \"world\"]]))\n\n(defn from-html\n  \"Converts a HTML string to a clojure form in UIx syntax.\"\n  [html-str]\n  (map (comp from-hiccup h/as-hiccup)\n       (h/parse-fragment html-str)))\n\n(comment\n  (from-html\n   \"<p class=\\\"c-fDhfVa c-fDhfVa-dkirSI-spaced-true c-fDhfVa-jFCKZD-family-default c-fDhfVa-grGuE-size-3 c-fDhfVa-hYBDYy-variant-default c-fDhfVa-kHnRXL-weight-2\\\">Finally, one last scene, just for fun! I ported to React Three Fiber a Three.js demo from <a href=\\\"http://barradeau.com/blog/?p=621\\\" class=\\\"c-iNkjEl c-iNkjEl-dNnDWN-underline-true c-iNkjEl-igJWTOZ-css\\\">an article</a> written by <a href=\\\"https://twitter.com/nicoptere\\\" class=\\\"c-iNkjEl c-iNkjEl-hGYKvZ-discreet-true c-iNkjEl-goIlEV-favicon-true c-iNkjEl-idwngVA-css\\\">@nicoptere</a> that does a pretty good job at deep diving into the FBO technique.</p>\"))\n\n\n;; TODO: Consider moving this to a stringutils module?\n(defn replace-last-\n  \"Replaces last occurrence of pattern with replacement in s.\n  Will probably break given a regex pattern.\"\n  [s pattern replacement]\n  (if-let [match-pos (s/last-index-of s pattern)]\n    (let [prefix (subs s 0 match-pos)\n          suffix (subs s (+ match-pos (count pattern)) (count s))]\n      (str prefix replacement suffix))\n    s))\n\n(defn dedup-parens-\n  \"If the opening and closing parentheses are doubled, undouble them.\n  i.e. '(($ :div))' -> '($ :div).\n  The html->uix conversion below gives doubled opening and closing parentheses - I'm not\n  clever enough to solve this at source, hence clunky workaround.\n  \"\n  [str]\n  (if (s/starts-with? str \"((\")\n    (-> str\n        (s/replace-first \"((\" \"(\")\n        (replace-last- \"((\" \"(\"))\n    str))\n\n(defn html->uix\n  \"Converts a HTML string to a string representation of a clojure form in UIx syntax.\"\n  [html-str]\n  (-> html-str\n      (from-html)\n      (str)\n      (s/replace #\"\\\"(\\\\n\\s*)*\\\"\" \"\\n\")\n      (dedup-parens-)\n;\n      ))\n"]}