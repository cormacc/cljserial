{"version":3,"sources":["cljserial/components/buttons.cljs"],"mappings":";AAOA,6CAAA,7CAAaA;AAEb,+CAAA,2CAAA,wDAAA,aAAA,yDAAA,xNAAaC;AAIb,gDAAA,2CAAA,0DAAA,gFAAA,+DAAA,pSAAaC;AAIb,8CAAA,2CAAA,gDAAA,oBAAA,kDAAA,oBAAA,gDAAA,wBAAA,gDAAA,oBAAA,kDAAA,jaAAaC;AAOb,AAAaC,sCAAO,AAACC,eAAKJ,AAAA;AAC1B,AAAaK,qCAAM,AAACD,eAAKF,AAAA;AACzB,AAAaI,uCAAQ,AAACF,eAAKH,AAAA;AAG3B,0CAAA,1CAAMM,4FAAYC,MAAMC,OAAOC;AAA/B,AACE,yDAAA,IAAA,tDAACC,yIAAcZ,AAAA,uGAAc,CAACS,sCAAAA,uOAAAA,nMAAMR,AAAA,oNAAAA,AAAA,kMAAiB,CAACS,uCAAAA,8WAAAA,zUAAOR,AAAA,2VAAAA,AAAA,wUAAkB,CAACS,qCAAAA,ybAAAA,tZAAKR,AAAA,saAAAA,AAAA;;AAEvF,AAAA,sCAAA,8CAAAU,pFAAOY;AAAP,AAAA,IAAAX,2BAAA,AAAAC,mBAAAF;IAAAG,cAAA,CAAAF;IAAAG,cAAA,AAAAC,4CAAAF,YAAA,IAAA;IAAAC,kBAAA,AAAAE,4BAAAF;YAAA,AAAAG,4CAAAH,gBAAA,uDAAA,3HACWR;aADX,AAAAW,4CAAAH,gBAAA,yDAAA,9HACiBP;WADjB,AAAAU,4CAAAH,gBAAA,qDAAA,xHACwBN;eADxB,AAAAS,4CAAAH,gBAAA,vEAC6BoB;eAD7B,AAAAjB,4CAAAH,gBAAA,vEACsCqB;IADtCjB,mBAAA;AAAA,AAAA,oBAES,eAAA,fAACkB,8DAAO9B,QAAOL;AAFxB;AAAA,AAAA,MAAA,KAAAkB,MAAA;;;AAAA,oBAGS,eAAA,fAACiB,8DAAO5B,OAAML;AAHvB;AAAA,AAAA,MAAA,KAAAgB,MAAA;;;AAAA,oBAIS,eAAA,fAACiB,8DAAO7B,SAAQH;AAJzB;AAAA,AAAA,MAAA,KAAAe,MAAA;;;AAAA,GAAAC;AAAA,AAAA,IAAAC,4BAAA,AAAAC;AAAA,AAAA,oBAAAD;AAAA,AAAA,IAAAE,0BAAAF;AAAA,AAAA,CAAAE,wDAAAA,0DAAAA;;AAAA;;AAAA;;AAKE,OAAAc,wBAAA,SAAA,CAAA,aAAA,AAAAC,kEAAA,wEAAA,8BAAA,jGAAmC,AAACjC,wCAAWC,MAAMC,OAAOC,iCAAgB0B,YAAUC;;AALxF,AAAA,GAAAf;AAAA,IAAAI,iDAAAC;IAAAC,iDAAAJ;AAAA,AAAA,CAAAG,yCAAAC;;AAAA,IAAA,AAAA,GAAA,EAAA,AAAAC,qBAAAhB,+BAAA,CAAAA,4BAAA;AAAA;AAAA,AAAA,MAAA,KAAAQ,MAAA,CAAA,kBAAA,CAAA,qGAAAR,oCAAA,KAAA;;;AAAA,OAAAO;UAAA,AAAA,CAAAO,yCAAAD;;AAAA,OAAAN;;;;AAAA,CAAA,AAAAI,2DAAA;;AAAA,CAAA,AAAAA,kDAAA;;AAAA,GAAAF;AAAA,AAAA,GAAA,QAAAQ,mCAAAC,uCAAAC;AAAA,AAAA,IAAAC,4BAAA,AAAAC;AAAA,AAAA,CAAAD,0DAAAA,wDAAAT,oCAAA,GAAA,KAAA,QAAAS,qCAAAT,oCAAA,GAAA,KAAA;;AAAA,AAAAW,8BAAAX,oCAAA,AAAAA;;AAAA,CAAA,AAAAA,6DAAAS;;AAAA;;AAAA","names":["cljserial.components.buttons/styles-common","cljserial.components.buttons/styles-by-shape","cljserial.components.buttons/styles-by-colour","cljserial.components.buttons/styles-by-size","cljserial.components.buttons/shapes","cljs.core/keys","cljserial.components.buttons/sizes","cljserial.components.buttons/colours","cljserial.components.buttons/get-styles","shape","colour","size","clojure.string.join","props__79555__auto__","clj-props__79556__auto__","uix.core/glue-args","vec__117802","map__117805","cljs.core.nth","cljs.core/--destructure-map","cljs.core.get","f__79557__auto__","js/Error","js/goog.DEBUG","temp__5804__auto__","cljserial.components.buttons/button","f__79486__auto__","*current-component*-orig-val__117815","uix.core/*current-component*","*current-component*-temp-val__117816","cljs.core/map?","js/window","js/window.uix","js/window.uix.dev","sig__79495__auto__","js/window.uix.dev.signature!","js/window.uix.dev.register!","on-click","children","cljs.core/some","uix.compiler.aot/>el","uix.compiler.attributes.class_names"],"sourcesContent":["(ns cljserial.components.buttons\n  (:require\n   [clojure.string :as str]\n   [uix.core :as uix :refer [defui $]]))\n\n;; See https://tailwindui.com/components/application-ui/elements/buttons\n\n(def ^:const styles-common \"font-semibold shadow-sm focus-visible:outline focus-visible:outline-2 focus-visible:outline-offset-2\")\n\n(def ^:const styles-by-shape\n  {:square \"rounded-md\"\n   :rounded \"rounded-full\"})\n\n(def ^:const styles-by-colour\n  {:primary  \"bg-indigo-600 hover:bg-indigo-500 focus-visible:outline-indigo-600 text-white\"\n   :secondary \"bg-white text-gray-900 ring-1 ring-inset ring-gray-300 hover:bg-gray-50\"})\n\n(def ^:const styles-by-size\n  {:xs \"text-xs px-2 py-1\"\n   :sm \"text-sm px-2 py-1\"\n   :md \"text-sm px-2.5 py-1.5\"\n   :lg \"text-sm px-3 py-2\"\n   :xl \"text-sm px-3.5 py-2.5\"})\n\n(def ^:const shapes (keys styles-by-shape))\n(def ^:const sizes (keys styles-by-size))\n(def ^:const colours (keys styles-by-colour))\n\n\n(defn get-styles [shape colour size]\n  (str/join \" \" [styles-common (shape styles-by-shape) (colour styles-by-colour) (size styles-by-size)]))\n\n(defui button\n  [{:keys [shape colour size on-click children] :or {shape :square size :md colour :primary}}]\n  {:pre [(some #{shape} shapes)\n         (some #{size} sizes)\n         (some #{colour} colours)]}\n  ($ :button {:type \"button\", :class (get-styles shape colour size) :on-click on-click} children))\n"]}