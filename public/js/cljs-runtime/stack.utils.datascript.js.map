{"version":3,"sources":["stack/utils/datascript.cljs"],"mappings":"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","names":["stack.utils.datascript/Datom","stack.utils.datascript/Transaction","stack.utils.datascript/TransactionLog","js/stack","js/stack.utils","js/stack.utils.datascript","js/stack.utils.datascript.tx-log-schema-version","stack.utils.datascript/tx-log-schema-version","js/stack.utils.datascript.tx-log-store-id","stack.utils.datascript/tx-log-store-id","js/stack.utils.datascript.tx-log-conn","stack.utils.datascript/tx-log-conn","cljs.core.atom","stack.utils.datascript/empty-db","id","schema","datascript.core.empty_db","stack.utils.datascript/load-db-value","or__5002__auto__","stack.apis.local-storage/deserialise","stack.utils.datascript/save-db-value","data","js/setTimeout","stack.apis.local-storage/serialise","stack.utils.datascript/reload-simple-db!","db-atom","map__96479","cljs.core/deref","cljs.core/--destructure-map","cljs.core.get","cljs.core/reset!","cljs.core/assoc-in","stack.utils.datascript/create-simple-db","cljs.core/add-watch","p__96481","map__96482","_key","_atom","_old_state","_new_state","stack.utils.datascript/replay","transactions","datoms","cljs.core.map","cljs.core.reduce","datascript.core/db-with","cljs.core/cons","p__96483","map__96484","stack.utils.datascript/rebuild","db","cljs.core.assoc","cljs.core.mapv","stack.utils.datascript/rebuild!","cljs.core.swap_BANG_","stack.utils.datascript/augment-transaction","tx-data","tx-id","datascript.db/datom-tx","cljs.core/first","timestamp","js/Date","var_args","args__5732__auto__","len__5726__auto__","i__5727__auto__","argseq__5733__auto__","cljs.core/IndexedSeq","stack.utils.datascript/as-of","p__96505","map__96506","seq96498","G__96499","cljs.core/next","self__5711__auto__","tx-time","valid-time","p1__96495#","cljs.core.filter","stack.utils.datascript/as-serialisable-datom","da","cljs.core.pr_str","stack.utils.datascript/as-serialisable-transaction","tx","p1__96519#","cljs.core.update_in","cljs.core.into","stack.utils.datascript/from-serialisable-datom","G__96528","G__96529","G__96530","G__96531","G__96532","datascript.core/datom","cljs.reader.read_string","stack.utils.datascript/from-serialisable-transaction","p1__96534#","stack.utils.datascript/add-tx+","stack.apis.indexed-db/add+","stack.utils.datascript/read-transactions+","idb-conn","__run-fn-form","__kind","__ns","__id","__level","sf","taoensso.telemere.impl/*rt-sig-filter*","__inst","__thread","__root0","taoensso.telemere.impl/*trace-root*","__otel-context1","__uid","__root1","__run-result","signal__42410__auto__","cljs.core/Delay","signal__42401__auto__","taoensso.telemere.impl/Signal","taoensso.telemere/*ctx*","taoensso.telemere.impl/*trace-parent*","temp__5821__auto__","taoensso.telemere/*middleware*","sig-middleware__42402__auto__","taoensso.telemere.impl/dispatch-signal!","taoensso.telemere.impl/WrappedSignal","stack.apis.indexed_db.get_all_PLUS_","p1__96544#","promesa.core.then","stack.utils.datascript/tx-log-schema-upgrade-handler","idb","cljs.core/clj->js","stack.utils.datascript/open-tx-log+","stack.apis.indexed_db.open_PLUS_","p1__96553#","stack.utils.datascript/load-bitemporal-db+","p1__96563#","stack.utils.datascript/bitemporal?","p__96573","map__96574","stack.utils.datascript/transact","domain-db","transaction","map__96575","db-after","datascript.core/with","new-transaction","cljs.core/conj","stack.utils.datascript/transact!","new-db","cljs.core/last","stack.utils.datascript/q","query","G__96587","G__96588","datascript.core/q"],"sourcesContent":["(ns stack.utils.datascript\n  (:require\n   [cljs.reader]\n   [taoensso.telemere :as t]\n   [promesa.core :as p]\n   [datascript.core :as d]\n   [datascript.db :as ddb]\n   [stack.apis.local-storage :as local-storage]\n   [stack.apis.indexed-db :as indexed-db]))\n\n;; See https://cljdoc.org/d/datascript/datascript/1.7.3/api/datascript.core\n\n;; Malli schema for the transaction log\n;; (Though we're not actually using it anywhere as yet)\n(def Datom\n  [:map\n   [:e :int]\n   [:a :keyword]\n   [:v :any]\n   [:added :bool]])\n\n(def Transaction\n  [:map\n   [:id :int]\n   [:tx-time :int]\n   [:valid-time :int]\n   [:datoms [:vector Datom]]])\n\n(def TransactionLog\n  [:vector Transaction])\n\n\n(defonce tx-log-schema-version 1)\n(defonce tx-log-store-id \"tx-log\")\n(defonce tx-log-conn (atom nil))\n\n(defn empty-db [id schema]\n  {:id id\n   :data (d/empty-db schema)\n   :tx-log nil})\n\n\n;; CURRENT VALUE PERSISTENCE TO LOCAL STORAGE\n;; This persists and reloads the current value of the datascript DB\n(defn- load-db-value [id schema]\n  (or (local-storage/deserialise id)\n      (d/empty-db schema)))\n\n(defn- save-db-value [id data]\n  (js/setTimeout #(local-storage/serialise id data)))\n\n(defn- reload-simple-db! [db-atom]\n  (let [{:keys [id data]} @db-atom\n        schema (:schema data)]\n    (reset! db-atom (assoc-in @db-atom [:data] (load-db-value id schema)))))\n\n(defn create-simple-db\n  \"Create a DB with value persistence (i.e. no transaction log / temporal functionality)\"\n  [id schema]\n  (let [db-atom (atom (empty-db id schema))]\n    (reload-simple-db! db-atom)\n    (add-watch db-atom :local-storage\n               (fn [_key _atom _old_state {:keys [data] :as _new_state}]\n                 (save-db-value id data)))\n    db-atom))\n\n\n;; TRANSACTION LOG PERSISTENCE\n;; This gives us an temporal database in the browser\n\n(defn replay [schema transactions]\n  (let [data (d/empty-db schema)\n        datoms (map :datoms transactions)]\n    (reduce d/db-with (cons data datoms))))\n\n(defn rebuild [{:keys [data] :as db} transactions]\n  (let [schema (:schema data)]\n    (-> db\n        (assoc :data (replay schema transactions))\n        (assoc :tx-log transactions)\n        (assoc :tx-times (mapv :tx-time transactions))\n        (assoc :valid-times (mapv :valid-time transactions)))))\n\n(defn rebuild! [db-atom transactions]\n  (swap! db-atom rebuild transactions))\n\n(defn- augment-transaction [tx-data]\n  (let [tx-id (ddb/datom-tx (first tx-data))\n        timestamp (.now js/Date)]\n    {:id tx-id\n     :tx-time timestamp\n     :valid-time timestamp\n     :datoms tx-data}))\n\n(defn as-of [db & {:keys [tx-time valid-time]\n                   :or {tx-time (.now js/Date)\n                        valid-time (.now js/Date)}}]\n  (let [transactions (filter #(and\n                               (<= (:tx-time %) tx-time)\n                               (<= (:valid-time %) valid-time))\n                             (:tx-log db))]\n    (replay (:schema db) transactions)))\n\n;; .... TO indexedDB\n(defn as-serialisable-datom [da]\n  {:e (:e da) :a (pr-str (:a da)) :v (pr-str (:v da)) :tx (:tx da) :added (:added da)})\n\n(defn as-serialisable-transaction [tx]\n  (update-in tx [:datoms] #(into [] (map as-serialisable-datom %))))\n\n(defn from-serialisable-datom [da]\n  (d/datom (:e da) (cljs.reader/read-string (:a da)) (cljs.reader/read-string (:v da)) (:tx da) (:added da)))\n\n(defn from-serialisable-transaction [tx]\n  (update-in tx [:datoms] #(into [] (map from-serialisable-datom %))))\n\n(defn add-tx+ [tx]\n  (indexed-db/add+ @tx-log-conn tx-log-store-id (as-serialisable-transaction tx)))\n\n(defn read-transactions+ [idb-conn]\n  (t/event! ::read-transactions {:data {:conn idb-conn :id (.-name idb-conn)}})\n  (-> (indexed-db/get-all+ idb-conn tx-log-store-id :as :vector)\n      (p/then #(into [] (map from-serialisable-transaction %)))))\n\n(defn- tx-log-schema-upgrade-handler [idb]\n  ;; TODO: Add a schema version check here?\n  ;; TODO: Create additional indices for the transaction? E.g. on local and remote IDs?\n  (.createObjectStore idb tx-log-store-id (clj->js {:keyPath \"id\"})))\n\n\n(defn open-tx-log+ [id]\n  (-> (indexed-db/open+ id\n                        :schema-version tx-log-schema-version\n                        :on-upgrade tx-log-schema-upgrade-handler)\n      (p/then #(reset! tx-log-conn %))\n      (p/then read-transactions+)))\n\n(defn load-bitemporal-db+ [id schema]\n  (let [db (empty-db id schema)]\n    (-> (open-tx-log+ id)\n        (p/then #(rebuild db %)))))\n\n;; SHARED API\n;; Functions applicable to simple and temporal dbs\n\n(defn bitemporal? [db]\n  (not (nil? (:tx-log db))))\n\n(defn transact [{:keys [data] :as domain-db} transaction]\n  (let [{:keys [db-after tx-data]} (d/with data transaction)\n        new-transaction (augment-transaction tx-data)]\n    (-> domain-db\n        (assoc-in [:data] db-after)\n        ;;TODO: Update this to allow operation without a transaction log -- state persistence only....?\n        ;;      Or maybe keep that simple with a listen/watch\n        (update-in [:tx-log] conj new-transaction)\n        (update-in [:tx-times] conj (:tx-time new-transaction))\n        (update-in [:valid-times] conj (:valid-time new-transaction)))))\n\n(defn transact!\n  \"Apply a datascript transaction and persist it to the transaction log.\n  Returns the new db state after applying the transaction.\"\n  [db transaction]\n  (let [new-db (transact db transaction)\n        tx-data (last (:tx-log new-db))]\n    (add-tx+ tx-data)\n    new-db))\n\n;; (defn reload-db! [db-atom]\n;;   (if (bitemporal? @db-atom)\n;;     (reload-bitemporal-db! db-atom)\n;;     (reload-simple-db! db-atom)))\n\n;; (defn reset-db! [db-atom]\n;;   (let [{:keys [id data]} @db-atom\n;;         schema (:schema data)]\n;;     (reset! db-atom (empty-db id schema)))\n;;   (when (bitemporal? @db-atom)\n;;     (swap! db-atom assoc-in [:tx-log] [])))\n\n(defn q [db query]\n  (d/q query (:data db)))\n"]}