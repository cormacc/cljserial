{"version":3,"sources":["day8/re_frame_10x/inlined_deps/spade/git_sha_5197e54/runtime.cljc"],"mappings":";AAOA,GAAA,QAAAA,iCAAAC,8CAAAC,2DAAAC,iEAAAC,iFAAAC,yFAAAC;AAAA;AAAA,AAAA,6FAAA,2CAAA,kFAAA,1NAAmBC,+MACSC,+FAEMA;;AAGlC,GAAA,QAAAR,iCAAAC,8CAAAC,2DAAAC,iEAAAC,iFAAAC,yFAAAI;AAAA;AAAA,AAAA,AAAmBC,2FAAkB,AAACC;;AAEtC,4EAAA,5EAAMC,gKAAWC;AAAjB,AACE,mFAAA,5EAACC,kFAAoBD;;AAEvB,2EAAA,3EAAME,8JAAaC;AAAnB,AACE,OAACC,qJAAWV,2FAAoBS;;AAElC,6EAAA,qFAAAE,lKAAOI;AAAP,AAAA,IAAAH,aAAAD;IAAAC,iBAAA,AAAAC,4BAAAD;iBAAA,AAAAE,4CAAAF,eAAA,xEAAuBI;eAAvB,AAAAF,4CAAAF,eAAA,tEAAwCK;AAAxC,AACE,GAAA,AAAAC,cAAQD;AACND;;6DAKK,AAACK,4CAAI,WAAKC,pHAeV,yDAAA,lDAACG;AAfI,AACE,GACE,OAASH;AAAMA;;AADjB,GAIE,EAAK,AAACC,qBAAKD,WACN,OAAS,AAAA,sFAAQA;AACtB,OAAA,sFAAQA;;AANV,AASE,MAAO,kJAAA,2CAAA,2EAAA,xQAACE,gDACC,CAAA,iFACKF,2HACQN,iEACLM;;;;GAjB1B,2GAAA,zGAAI,AAACH,4BAAYF,WACf,AAACG,6CAAKH,SAASD,+FACdC,SAASD;;;AAkBrB,kFAAA,lFAAMU,4KAAeC,KAAKC,SAASC,aAAaC,cAAcC;AAA9D,AACE,IAAMf,aAAW,CAACa,6CAAAA,qDAAAA,VAAaE,kCAAAA;IACzBE,wBAAgB,iBAAAC,mBAAI,AAAA,gHAAqBN;AAAzB,AAAA,oBAAAM;AAAAA;;AACI,OAAA,kHAAsBlC;;;IAI1CmC,eAAa,yCAAA,KAAA,5BAAUF,4BACR,AAACG,4EAAgBjC,yFAAkBa;IAPxDgB,aAS0B,iBAAAE,mBACEC;AADF,AAAA,oBAAAD;AAAAA;;AAIE,QAACJ,8CAAAA,iEAAAA,rBAAcd,8CAAAA,nCAAWe,8CAAAA;;;IAbtDC,iBAAA,AAAAnB,4BAAAmB;WAAAA,PASoBM;UATpB,AAAAxB,4CAAAkB,eAAA,jEASOK;AATP,AAeE,oBAAUF;AAAV;AAAA,AACE,AAACI,iFAAgBpC,yFAAkBa,WAAWqB,IAAIC;;;AAEpD,IAAAE,WAAMb;IAANa,eAAA,EAAA,CAAAA,oBAAAC,oBAAA,AAAAD,aAAA;AAAA,AAAA,QAAAA;KAAA;AAAA,kDAAA,wDACiB,AAACzB,2EAAcuB;;;KADhC;KAAA;AAEsB,OAACvB,2EAAcuB;;;KAFrC;AAGUD;;;;AAHV,MAAA,KAAAK,MAAA,CAAA,mEAAAF","names":["js/day8","js/day8.re-frame-10x","js/day8.re-frame-10x.inlined-deps","js/day8.re-frame-10x.inlined-deps.spade","js/day8.re-frame-10x.inlined-deps.spade.git-sha-5197e54","js/day8.re-frame-10x.inlined-deps.spade.git-sha-5197e54.runtime","js/day8.re-frame-10x.inlined-deps.spade.git-sha-5197e54.runtime.*css-compile-flags*","day8.re-frame-10x.inlined-deps.spade.git-sha-5197e54.runtime/*css-compile-flags*","js/goog.DEBUG","js/day8.re-frame-10x.inlined-deps.spade.git-sha-5197e54.runtime.*style-container*","day8.re-frame-10x.inlined-deps.spade.git-sha-5197e54.runtime/*style-container*","day8.re-frame-10x.inlined-deps.spade.git-sha-5197e54.runtime.defaults/create-container","day8.re-frame-10x.inlined-deps.spade.git-sha-5197e54.runtime/->css-var","n","day8.re-frame-10x.inlined-deps.garden.v1v3v10.garden.types/->CSSFunction","day8.re-frame-10x.inlined-deps.spade.git-sha-5197e54.runtime/compile-css","elements","day8.re_frame_10x.inlined_deps.garden.v1v3v10.garden.core.css","p__62816","map__62817","cljs.core/--destructure-map","cljs.core.get","day8.re-frame-10x.inlined-deps.spade.git-sha-5197e54.runtime/compose-names","style-name","composed","cljs.core/not","cljs.core/sequential?","cljs.core.conj","cljs.core.map","item","cljs.core/map?","cljs.core.ex_info","clojure.string.join","day8.re-frame-10x.inlined-deps.spade.git-sha-5197e54.runtime/ensure-style!","mode","metadata","name-factory","style-factory","params","map__62820","always-compile?","or__5002__auto__","mounted-info","day8.re-frame-10x.inlined-deps.spade.git-sha-5197e54.container/mounted-info","css","info","day8.re-frame-10x.inlined-deps.spade.git-sha-5197e54.container/mount-style!","G__62825","cljs.core/Keyword","js/Error"],"sourcesContent":["(ns day8.re-frame-10x.inlined-deps.spade.git-sha-5197e54.runtime\n  (:require [clojure.string :as str]\n            [day8.re-frame-10x.inlined-deps.garden.v1v3v10.garden.core :as garden]\n            [day8.re-frame-10x.inlined-deps.garden.v1v3v10.garden.types :refer [->CSSFunction]]\n            [day8.re-frame-10x.inlined-deps.spade.git-sha-5197e54.container :as sc]\n            [day8.re-frame-10x.inlined-deps.spade.git-sha-5197e54.runtime.defaults :as defaults]))\n\n(defonce ^:dynamic *css-compile-flags*\n  {:pretty-print? #? (:cljs goog.DEBUG\n                      :clj false)\n   :always-compile-css? #? (:cljs goog.DEBUG\n                            :clj false)})\n\n(defonce ^:dynamic *style-container* (defaults/create-container))\n\n(defn ->css-var [n]\n  (->CSSFunction \"var\" n))\n\n(defn compile-css [elements]\n  (garden/css *css-compile-flags* elements))\n\n(defn- compose-names [{style-name :name composed :composes}]\n  (if-not composed\n    style-name\n\n    (->> (if (sequential? composed)\n           (conj composed style-name)\n           [composed style-name])\n         (map (fn [item]\n                (cond\n                  (string? item) item\n\n                  ; unpack a defattrs\n                  (and (map? item)\n                       (string? (:class item)))\n                  (:class item)\n\n                  :else\n                  (throw (ex-info\n                           (str \"Invalid argument to :composes key:\"\n                                item)\n                           {:style-name style-name\n                            :value item})))))\n         (str/join \" \"))))\n\n(defn ensure-style! [mode metadata name-factory style-factory params]\n  (let [style-name (name-factory params)\n        always-compile? (or (:always-compile-css metadata)\n                            (:always-compile-css? *css-compile-flags*))\n\n        ; NOTE: If we've been instructed to always compile css, then always\n        ; assume it's unmounted. The container can update a mounted style\n        mounted-info (when-not always-compile?\n                       (sc/mounted-info *style-container* style-name))\n\n        {css :css :as info} (or\n                              mounted-info\n\n                              ; Not mounted *or* we always want to compile\n                              (style-factory style-name params))]\n\n    (when-not mounted-info\n      (sc/mount-style! *style-container* style-name css info))\n\n    (case mode\n      :attrs {:class (compose-names info)}\n      (:class :keyframes) (compose-names info)\n      :global css)))\n"],"x_google_ignoreList":[0]}