{"version":3,"sources":["gadget/core.cljc"],"mappings":"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","names":["js/gadget","js/gadget.core","js/gadget.core.render-data","method-table__5599__auto__","cljs.core.atom","prefer-table__5600__auto__","method-cache__5601__auto__","cached-hierarchy__5602__auto__","hierarchy__5603__auto__","cljs.core.get","fexpr__61428","cljs.core/MultiFn","cljs.core.symbol","gadget.core/render-data","cljs.core/identity","js/gadget.core.enabled?","gadget.core/enabled?","js/gadget.core.store","gadget.core/store","gadget.core/deserialize","payload","cljs.reader.read_string","gadget.core/pending-action?","gadget.core/action","map__61433","cljs.core/--destructure-map","action","args","cljs.core/reset!","gadget.actions/exec-action","gadget.core/type-pref","v","cljs.core/Keyword","cljs.core/Symbol","cljs.core/map?","cljs.core/vector?","cljs.core/list?","cljs.core/set?","cljs.core/seq?","cljs.core/boolean?","gadget.core/sort-keys","m","cljs.core.sort_by","cljs.core.comp","cljs.core/pr-str","cljs.core/first","gadget.core/sort-vals","xs","gadget.core/key-order","ks","cljs.core/reverse","p__61437","vec__61438","cljs.core.nth","k","js/gadget.core.render","fexpr__61441","gadget.core/render","view","data","gadget.core/render-with-view","label","path","raw","gadget.datafy/synthetic-type","gadget.datafy/datafy","gadget.core/bespoke-labels","gadget.core/prep-browser-entries","entries","cljs.core.map","entry","vec__61448","target-path","cljs.core.conj","cljs.core/meta","cljs.core/contains?","gadget.core/prepare-path","path-elems","G__61462","vec__61463","seq__61464","cljs.core/seq","first__61465","cljs.core/next","vec__61492","seq__61493","first__61494","x","res","button","cljs.core.into","cljs.core/rest","cljs.core/vec","gadget.core/browser-data","metadata","cljs.core.concat","p__61580","map__61581","_","cljs.core.pr_str","p__61590","map__61591","p__61624","map__61627","p__61629","map__61630","p__61633","map__61634","p__61648","map__61649","gadget.core/constructor","cljs.core/second","cljs.core/re-find","cljs.core/type","p__61654","map__61655","cljs.core._EQ_","js/Object","p__61663","map__61664","vec__61668","prefix","str","clojure.string.split","p__61678","map__61680","vec__61684","gadget.core/inline-length-limit","gadget.core/too-long-for-inline?","gadget.core/inflect","n","w","var_args","args__5732__auto__","len__5726__auto__","i__5727__auto__","argseq__5733__auto__","cljs.core/IndexedSeq","gadget.core/summarize","p__61726","vec__61727","seq61719","G__61721","G__61722","G__61723","self__5711__auto__","pre","c","post","num","cljs.core/count","types","or__5002__auto__","cljs.core/name","p__61744","map__61746","p1__61742#","p__61752","map__61754","p1__61750#","p__61765","map__61769","p1__61761#","p__61775","map__61776","gadget.core.summarize","p1__61771#","p__61787","vec__61788","cljs.core.interpose","cljs.core.mapcat","p__61798","map__61800","lazy-sample","gadget.browsable/lazy-sample","selection","cljs.core.take","p1__61796#","p2__61797#","cljs.core.map_indexed","t","gadget.datafy/symbolic-type","cljs.core.not_EQ_","cljs.core.assoc","G__61824","cljs.core/PROTOCOL_SENTINEL","cljs.core/native-satisfies?","gadget.browsable/Browsable","gadget.browsable/entries","gadget.core/rendered","gadget.core/browser-hiccup","cljs.core/deref","state","hiccup","gadget.core/tx-summary","tx","G__61857","gadget.core/same-date?","a","b","gadget.core/tx-hiccup","txes","now","js/Date","p1__61897#","map__61933","instant","gadget.std/pad","p__61976","map__61978","gadget.core/prepare-data","window","ref","gadget.datafy/nav-in","G__61985","expanded?","current-tab","cljs.core/not","gadget.core/prepare","p1__62020#","gadget.core/render-data-now","f","gadget.core/render-data-debounced","gadget.std/debounce","gadget.core/set-render-debounce-ms!","ms","gadget.core/render-inspector","render-fn","G__62050","cljs.core/add-watch","gadget.core/atom?","cljs.core/IAtom","p__62075","map__62078","gadget.core/inspectable?","inspectable?","cljs.core/ifn?","G__62089","gadget.core/now","gadget.core/create-tx","old-state","new-state","prev-tx-data","cljs.core.get_in","limit","tx-data","valid-tx?","G__62100","p1__62094#","cljs.core.swap_BANG_","cljs.core/update-in","cljs.core/update","gadget.core/inspect","p__62127","vec__62130","seq62107","G__62108","G__62109","opts","cljs.core/assoc","cljs.core.merge","gadget.core/create-atom","p__62166","vec__62169","seq62156","G__62157","val","gadget.core/pause!","gadget.core/resume!","p__62189","vec__62190","store"],"sourcesContent":["(ns gadget.core\n  (:require #?(:cljs [cljs.reader :as reader])\n            [clojure.string :as str]\n            [gadget.datafy :as datafy]\n            [gadget.actions :as actions]\n            [gadget.browsable :as browsable]\n            [gadget.std :refer [debounce pad]]))\n\n(defmulti render-data identity)\n\n(defonce enabled? (atom true))\n(defonce store (atom {:data {}}))\n\n(defn deserialize [payload]\n  #?(:cljs (reader/read-string payload)\n     :clj (read-string payload)))\n\n(def pending-action?\n  \"This atom is used to bypass the debounce on render when processing actions from\n  the inspector UI. It should probably be removed in favor of `action` calling\n  on render without debouncing in a more direct fashion.\"\n  (atom false))\n\n(defn action [payload]\n  (let [{:keys [action args]} (deserialize payload)]\n    (reset! pending-action? true)\n    (actions/exec-action store action args)))\n\n;; Sorting\n\n(defn type-pref [v]\n  (cond\n    (keyword? v) 0\n    (symbol? v) 1\n    (string? v) 2\n    (number? v) 3\n    (map? v) 4\n    (vector? v) 5\n    (list? v) 6\n    (set? v) 7\n    (seq? v) 8\n    (boolean? v) 9\n    :default 10))\n\n(defn sort-keys [m]\n  (->> m\n       (sort-by (comp pr-str first))\n       (sort-by (comp type-pref first))))\n\n(defn sort-vals [xs]\n  (->> xs\n       (sort-by pr-str)\n       (sort-by type-pref)))\n\n(defn key-order [ks]\n  (let [ks (reverse ks)]\n    (fn [[k v]] (- (.indexOf ks k)))))\n\n;; Rendering\n\n(defmulti render (fn [view data] [view (:type data)]))\n\n(defn render-with-view [view label path raw]\n  (render view {:raw raw\n                :type (datafy/synthetic-type raw)\n                :data (datafy/datafy raw)\n                :label label\n                :path path}))\n\n(def bespoke-labels\n  {:gadget/value 'Value\n   :gadget/type 'Type})\n\n(defn prep-browser-entries [label path entries]\n  (->> entries\n       (map (fn [entry]\n              (let [[k v] entry\n                    target-path (conj path k)]\n                {:k (when-not (-> entry meta :synthetic-key?)\n                      (render-with-view :inline label path (get bespoke-labels k k)))\n                 :v (render-with-view :inline label target-path v)\n                 :actions (when-not (contains? bespoke-labels k)\n                            {:go [[:assoc-state [label :path] target-path]]\n                             :copy [[:copy-to-clipboard label target-path]]})})))))\n\n(defn- prepare-path [path-elems]\n  (loop [[x & xs] path-elems\n         path []\n         res [:div {}]]\n    (if (seq xs)\n      (let [path (conj path x)\n            button {:actions [[:assoc-state [(first path) :path] (into [] (rest path))]]\n                    :content (str x)}]\n        (recur (vec xs) path (conj res [:gadget/button button] \" \")))\n      (if x\n        (conj res [:strong {} (str x)] \" \")\n        res))))\n\n(defn- browser-data [label path metadata data]\n  [:gadget/browser {:key (str label \"-browser\")\n                    :metadata (prep-browser-entries label path metadata)\n                    :data (prep-browser-entries label path data)\n                    :path (prepare-path (concat [label] path))\n                    :actions {:copy [[:copy-to-clipboard label path]]}}])\n\n(defmethod render [:inline :keyword] [_ {:keys [raw]}]\n  [:gadget/keyword (pr-str raw)])\n\n(defmethod render [:inline :number] [_ {:keys [raw]}]\n  [:gadget/number (pr-str raw)])\n\n(defmethod render [:inline :boolean] [_ {:keys [raw]}]\n  [:gadget/boolean (pr-str raw)])\n\n(defmethod render [:inline :string] [_ {:keys [raw]}]\n  [:gadget/string (pr-str raw)])\n\n(defmethod render [:inline :nil] [_ {:keys [raw]}]\n  [:gadget/code {} \"nil\"])\n\n(defmethod render [:inline :symbol] [_ {:keys [raw]}]\n  [:gadget/code {} (str raw)])\n\n(defn- constructor [v]\n  (second (re-find #\"function (.*)\\(\" (str (type v)))))\n\n(defmethod render [:inline :object] [_ {:keys [raw]}]\n  [:gadget/code {}\n   \"object[\" [:strong {} (constructor raw)] \"]\"\n   #?(:cljs (when-not (= (.. js/Object -prototype -toString) (.-toString raw))\n              [:span \"{\" [:gadget/string (str \"\\\"\" (.toString raw) \"\\\"\")] \"}\"]))])\n\n(defmethod render [:inline :date] [_ {:keys [raw]}]\n  (let [[prefix str] (str/split (pr-str raw) #\" \")]\n    [:gadget/literal {:prefix prefix :str str}]))\n\n(defmethod render [:inline :uuid] [_ {:keys [raw]}]\n  (let [[prefix str] (str/split (pr-str raw) #\" \")]\n    [:gadget/literal {:prefix prefix :str str}]))\n\n(def inline-length-limit 120)\n\n(defn- too-long-for-inline? [v]\n  (< inline-length-limit\n     (count (pr-str v))))\n\n(defn- inflect [n w]\n  (if (= n 1)\n    w\n    (str w \"s\")))\n\n(defn- summarize [pre c post & [w]]\n  (let [num (count c)\n        types (into #{} (map datafy/synthetic-type c))\n        w (or w (if (= 1 (count types)) (name (first types)) \"item\"))]\n    (str pre num \" \" (inflect num w) post)))\n\n(defmethod render [:inline :set] [_ {:keys [raw label path]}]\n  (if (too-long-for-inline? raw)\n    [:gadget/link [:gadget/code {} (summarize \"#{\" raw \"}\")]]\n    [:gadget/inline-coll {:brackets [\"#{\" \"}\"]\n                          :xs (->> raw\n                                   sort-vals\n                                   (map #(render-with-view :summary label path %)))}]))\n\n(defmethod render [:inline :vector] [_ {:keys [raw label path]}]\n  (if (too-long-for-inline? raw)\n    [:gadget/link [:gadget/code {} (summarize \"[\" raw \"]\")]]\n    [:gadget/inline-coll {:brackets [\"[\" \"]\"]\n                          :xs (map #(render-with-view :summary label path %) raw)}]))\n\n(defmethod render [:inline :list] [_ {:keys [raw label path]}]\n  (if (too-long-for-inline? raw)\n    [:gadget/link [:gadget/code {} (summarize \"'(\" raw \")\")]]\n    [:gadget/inline-coll {:brackets [\"'(\" \")\"]\n                          :xs (map #(render-with-view :summary label path %) raw)}]))\n\n(defmethod render [:inline :map] [_ {:keys [raw label path]}]\n  (if (too-long-for-inline? raw)\n    (let [ks (map first (sort-keys raw))]\n      (if (too-long-for-inline? ks)\n        [:gadget/link [:gadget/code {} (summarize \"{\" ks \"}\" \"key\")]]\n        [:gadget/code {}\n         [:gadget/inline-coll\n          {:brackets [\"{\" \"}\"]\n           :xs (map #(render-with-view :inline label (conj path %) %) ks)}]]))\n    [:gadget/inline-coll\n     {:brackets [\"{\" \"}\"]\n      :xs (->> raw\n               sort-keys\n               (map (fn [[k v]]\n                      [(render-with-view :inline label path k)\n                       \" \"\n                       (render-with-view :inline label (conj path k) v)]))\n               (interpose \", \")\n               (mapcat identity))}]))\n\n(defmethod render [:inline :seq] [_ {:keys [label path raw]}]\n  (let [lazy-sample browsable/lazy-sample\n        selection (take lazy-sample raw)]\n    (cond\n      (= (count selection) lazy-sample)\n      [:gadget/link\n       [:gadget/code {}\n        (str \"(\" lazy-sample \"+ items, click to load 0-\" lazy-sample \")\")]]\n\n      (too-long-for-inline? raw)\n      [:gadget/link [:gadget/code {} (summarize \"(\" raw \")\")]]\n\n      :default\n      [:gadget/inline-coll\n       {:brackets [\"(\" \")\"]\n        :xs (->> raw\n                 sort-vals\n                 (map-indexed #(render-with-view :summary label (conj path %1) %2)))}])))\n\n(defmethod render :default [view v]\n  (if (= :summary view)\n    (render :inline v)\n    (let [t (datafy/symbolic-type (:data v))]\n      (cond\n        (not= t (:type v))\n        (render view (assoc v :type t))\n\n        (= :full view)\n        (->> (cond\n               (satisfies? browsable/Browsable (:data v))\n               (browsable/entries (:data v))\n\n               ;; Handle the map default here instead of implementing the Browsable\n               ;; protocol for maps, because ClojureScript currently has a bug where you\n               ;; cannot override a protocol implementation on a type from metadata. This\n               ;; way, you can implement Browsable from metadata, and have that\n               ;; implementation override this default behavior.\n               (map? (:data v))\n               (sort-keys (:data v))\n\n               :default\n               [[:gadget/type (let [t (datafy/symbolic-type (:data v))]\n                                (if (= :object t)\n                                  (constructor (:data v))\n                                  t))]\n                [:gadget/value (:data v)]])\n\n             (browser-data (:label v) (:path v) (meta (:data v))))\n\n        :default\n        [:span {:style {:padding \"6px\"}} (pr-str (:raw v))]))))\n\n(def rendered (atom {:data nil :hiccup nil :meta nil}))\n\n(defn- browser-hiccup [label path raw data]\n  (let [state @rendered]\n    (if (and (= data (:data state)) (= (meta data) (:meta state)))\n      (:hiccup state)\n      (let [hiccup (render :full {:label label\n                                  :path path\n                                  :raw raw\n                                  :data data\n                                  :type (datafy/synthetic-type raw)})]\n        (reset! rendered {:data data :hiccup hiccup :meta (meta data)})\n        hiccup))))\n\n(defn tx-summary [tx]\n  (some->> (:gadget.tx/data tx)\n           (render-with-view :inline \"tx\" [])))\n\n(defn same-date? [a b]\n  (and (= (.getYear a) (.getYear b))\n       (= (.getMonth a) (.getMonth b))\n       (= (.getDate a) (.getDate b))))\n\n(defn tx-hiccup [txes]\n  (let [now #?(:cljs (js/Date.)\n               :clj (java.util.Date.))]\n    [:gadget/tx-list\n     (map #(let [{:gadget.tx/keys [instant]} %]\n             [:div {}\n              [:strong {}\n               (when-not (same-date? instant now)\n                 (str (+ 1900 (.getYear instant)) \"-\"\n                      (pad (inc (.getMonth instant))) \"-\"\n                      (pad (.getDate instant)) \" \"))\n               (str (pad (.getHours instant)) \":\"\n                    (pad (.getMinutes instant)) \":\"\n                    (pad (.getSeconds instant)) \" \")]\n              (tx-summary %)])\n          txes)]))\n\n(defn prepare-data [window {:keys [label path ref data txes] :as state}]\n  (let [raw (datafy/nav-in (or (some-> ref deref) data) path)\n        expanded? (get state :expanded? true)\n        current-tab (when expanded? (get state :current-tab :browser))]\n    {:tabs (concat\n            [{:text (if expanded? [:strong label] label)\n              :actions [[:assoc-state [label :expanded?] (not expanded?)]]}\n             {:text \"Browse\"\n              :active? (= :browser current-tab)\n              :actions [[:assoc-state [label :current-tab] :browser]]}]\n            (when ref\n              [{:text \"Transactions\"\n                :actions [[:assoc-state [label :current-tab] :txes]]\n                :active? (= current-tab :txes)}]))\n     :hiccup (when expanded?\n               (if (= :txes current-tab)\n                 (tx-hiccup txes)\n                 (browser-hiccup label path raw (datafy/datafy raw))))}))\n\n(defn prepare [state]\n  {:data (->> (:data state)\n              (sort-by first)\n              (map (comp #(prepare-data (:window state) %) second)))})\n\n(defn render-data-now [f]\n  (render-data f))\n\n(def render-data-debounced (atom (debounce render-data-now 250)))\n\n(defn set-render-debounce-ms! [ms]\n  (reset!\n   render-data-debounced\n   (if (= ms 0)\n     render-data-now\n     (debounce render-data-now ms))))\n\n(defn render-inspector []\n  (when @enabled?\n    (let [render-fn (if @pending-action? render-data-now @render-data-debounced)]\n      (when @pending-action?\n        (reset! pending-action? false))\n      (render-fn\n       (fn []\n         (pr-str {:type :render\n                  :data (prepare @store)}))))))\n\n(add-watch store :gadget/inspector (fn [_ _ _ _] (render-inspector)))\n\n(defn- atom? [ref]\n  #?(:cljs (satisfies? IAtom ref)\n     :clj (instance? clojure.lang.IAtom ref)))\n\n(defn inspectable? [ref {:keys [inspectable?]}]\n  (or (not (ifn? inspectable?))\n      (inspectable? (if (atom? ref) @ref ref))))\n\n(defn now []\n  #?(:cljs (js/Date.)\n     :clj (java.util.Date.)))\n\n(defn create-tx [label old-state new-state]\n  (let [prev-tx-data (get-in @store [:data label :gadget.tx/data])\n        limit (get-in @store [:config label :tx-limit] 100)\n        tx-data (:gadget.tx/data new-state)\n        valid-tx? (not= prev-tx-data tx-data)\n        tx (cond-> {:gadget.tx/instant (now)\n                    :gadget.tx/state new-state}\n             valid-tx? (assoc :gadget.tx/data tx-data))]\n    (swap! store update-in [:data label] update :txes #(take limit (conj % tx)))))\n\n(defn inspect [label ref & [opts]]\n  (when (atom? ref)\n    (add-watch ref :gadget/inspector (fn [_ _ old-state new-state]\n                                       (create-tx label old-state new-state)\n                                       (when (inspectable? new-state opts)\n                                         (render-inspector)))))\n  (when (atom? ref)\n    (create-tx label nil @ref))\n  (when (inspectable? ref opts)\n    (swap! store update :data assoc label (merge\n                                           {:path [] :label label}\n                                           (get-in @store [:data label])\n                                           (if (atom? ref)\n                                             {:ref ref}\n                                             {:data ref}))))\n  nil)\n\n(defn create-atom [label & [val]]\n  (let [ref (atom val)]\n    (inspect label ref)\n    ref))\n\n(defn pause! []\n  (reset! enabled? false))\n\n(defn resume! []\n  (reset! enabled? true)\n  (render-inspector))\n\n(defmethod actions/exec-action :ping [store _ [k v]]\n  (render-inspector))\n"],"x_google_ignoreList":[0]}