{
"version":3,
"file":"module$node_modules$$supabase$postgrest_js$dist$cjs$PostgrestTransformBuilder.js",
"lineCount":77,
"mappings":"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",
"sources":["node_modules/@supabase/postgrest-js/dist/cjs/PostgrestTransformBuilder.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$$supabase$postgrest_js$dist$cjs$PostgrestTransformBuilder\"] = function(global,require,module,exports) {\n\"use strict\";\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst PostgrestBuilder_1 = __importDefault(require(\"./PostgrestBuilder\"));\nclass PostgrestTransformBuilder extends PostgrestBuilder_1.default {\n    /**\n     * Perform a SELECT on the query result.\n     *\n     * By default, `.insert()`, `.update()`, `.upsert()`, and `.delete()` do not\n     * return modified rows. By calling this method, modified rows are returned in\n     * `data`.\n     *\n     * @param columns - The columns to retrieve, separated by commas\n     */\n    select(columns) {\n        // Remove whitespaces except when quoted\n        let quoted = false;\n        const cleanedColumns = (columns !== null && columns !== void 0 ? columns : '*')\n            .split('')\n            .map((c) => {\n            if (/\\s/.test(c) && !quoted) {\n                return '';\n            }\n            if (c === '\"') {\n                quoted = !quoted;\n            }\n            return c;\n        })\n            .join('');\n        this.url.searchParams.set('select', cleanedColumns);\n        if (this.headers['Prefer']) {\n            this.headers['Prefer'] += ',';\n        }\n        this.headers['Prefer'] += 'return=representation';\n        return this;\n    }\n    /**\n     * Order the query result by `column`.\n     *\n     * You can call this method multiple times to order by multiple columns.\n     *\n     * You can order referenced tables, but it only affects the ordering of the\n     * parent table if you use `!inner` in the query.\n     *\n     * @param column - The column to order by\n     * @param options - Named parameters\n     * @param options.ascending - If `true`, the result will be in ascending order\n     * @param options.nullsFirst - If `true`, `null`s appear first. If `false`,\n     * `null`s appear last.\n     * @param options.referencedTable - Set this to order a referenced table by\n     * its columns\n     * @param options.foreignTable - Deprecated, use `options.referencedTable`\n     * instead\n     */\n    order(column, { ascending = true, nullsFirst, foreignTable, referencedTable = foreignTable, } = {}) {\n        const key = referencedTable ? `${referencedTable}.order` : 'order';\n        const existingOrder = this.url.searchParams.get(key);\n        this.url.searchParams.set(key, `${existingOrder ? `${existingOrder},` : ''}${column}.${ascending ? 'asc' : 'desc'}${nullsFirst === undefined ? '' : nullsFirst ? '.nullsfirst' : '.nullslast'}`);\n        return this;\n    }\n    /**\n     * Limit the query result by `count`.\n     *\n     * @param count - The maximum number of rows to return\n     * @param options - Named parameters\n     * @param options.referencedTable - Set this to limit rows of referenced\n     * tables instead of the parent table\n     * @param options.foreignTable - Deprecated, use `options.referencedTable`\n     * instead\n     */\n    limit(count, { foreignTable, referencedTable = foreignTable, } = {}) {\n        const key = typeof referencedTable === 'undefined' ? 'limit' : `${referencedTable}.limit`;\n        this.url.searchParams.set(key, `${count}`);\n        return this;\n    }\n    /**\n     * Limit the query result by starting at an offset `from` and ending at the offset `to`.\n     * Only records within this range are returned.\n     * This respects the query order and if there is no order clause the range could behave unexpectedly.\n     * The `from` and `to` values are 0-based and inclusive: `range(1, 3)` will include the second, third\n     * and fourth rows of the query.\n     *\n     * @param from - The starting index from which to limit the result\n     * @param to - The last index to which to limit the result\n     * @param options - Named parameters\n     * @param options.referencedTable - Set this to limit rows of referenced\n     * tables instead of the parent table\n     * @param options.foreignTable - Deprecated, use `options.referencedTable`\n     * instead\n     */\n    range(from, to, { foreignTable, referencedTable = foreignTable, } = {}) {\n        const keyOffset = typeof referencedTable === 'undefined' ? 'offset' : `${referencedTable}.offset`;\n        const keyLimit = typeof referencedTable === 'undefined' ? 'limit' : `${referencedTable}.limit`;\n        this.url.searchParams.set(keyOffset, `${from}`);\n        // Range is inclusive, so add 1\n        this.url.searchParams.set(keyLimit, `${to - from + 1}`);\n        return this;\n    }\n    /**\n     * Set the AbortSignal for the fetch request.\n     *\n     * @param signal - The AbortSignal to use for the fetch request\n     */\n    abortSignal(signal) {\n        this.signal = signal;\n        return this;\n    }\n    /**\n     * Return `data` as a single object instead of an array of objects.\n     *\n     * Query result must be one row (e.g. using `.limit(1)`), otherwise this\n     * returns an error.\n     */\n    single() {\n        this.headers['Accept'] = 'application/vnd.pgrst.object+json';\n        return this;\n    }\n    /**\n     * Return `data` as a single object instead of an array of objects.\n     *\n     * Query result must be zero or one row (e.g. using `.limit(1)`), otherwise\n     * this returns an error.\n     */\n    maybeSingle() {\n        // Temporary partial fix for https://github.com/supabase/postgrest-js/issues/361\n        // Issue persists e.g. for `.insert([...]).select().maybeSingle()`\n        if (this.method === 'GET') {\n            this.headers['Accept'] = 'application/json';\n        }\n        else {\n            this.headers['Accept'] = 'application/vnd.pgrst.object+json';\n        }\n        this.isMaybeSingle = true;\n        return this;\n    }\n    /**\n     * Return `data` as a string in CSV format.\n     */\n    csv() {\n        this.headers['Accept'] = 'text/csv';\n        return this;\n    }\n    /**\n     * Return `data` as an object in [GeoJSON](https://geojson.org) format.\n     */\n    geojson() {\n        this.headers['Accept'] = 'application/geo+json';\n        return this;\n    }\n    /**\n     * Return `data` as the EXPLAIN plan for the query.\n     *\n     * You need to enable the\n     * [db_plan_enabled](https://supabase.com/docs/guides/database/debugging-performance#enabling-explain)\n     * setting before using this method.\n     *\n     * @param options - Named parameters\n     *\n     * @param options.analyze - If `true`, the query will be executed and the\n     * actual run time will be returned\n     *\n     * @param options.verbose - If `true`, the query identifier will be returned\n     * and `data` will include the output columns of the query\n     *\n     * @param options.settings - If `true`, include information on configuration\n     * parameters that affect query planning\n     *\n     * @param options.buffers - If `true`, include information on buffer usage\n     *\n     * @param options.wal - If `true`, include information on WAL record generation\n     *\n     * @param options.format - The format of the output, can be `\"text\"` (default)\n     * or `\"json\"`\n     */\n    explain({ analyze = false, verbose = false, settings = false, buffers = false, wal = false, format = 'text', } = {}) {\n        var _a;\n        const options = [\n            analyze ? 'analyze' : null,\n            verbose ? 'verbose' : null,\n            settings ? 'settings' : null,\n            buffers ? 'buffers' : null,\n            wal ? 'wal' : null,\n        ]\n            .filter(Boolean)\n            .join('|');\n        // An Accept header can carry multiple media types but postgrest-js always sends one\n        const forMediatype = (_a = this.headers['Accept']) !== null && _a !== void 0 ? _a : 'application/json';\n        this.headers['Accept'] = `application/vnd.pgrst.plan+${format}; for=\"${forMediatype}\"; options=${options};`;\n        if (format === 'json')\n            return this;\n        else\n            return this;\n    }\n    /**\n     * Rollback the query.\n     *\n     * `data` will still be returned, but the query is not committed.\n     */\n    rollback() {\n        var _a;\n        if (((_a = this.headers['Prefer']) !== null && _a !== void 0 ? _a : '').trim().length > 0) {\n            this.headers['Prefer'] += ',tx=rollback';\n        }\n        else {\n            this.headers['Prefer'] = 'tx=rollback';\n        }\n        return this;\n    }\n    /**\n     * Override the type of the returned `data`.\n     *\n     * @typeParam NewResult - The new result type to override with\n     */\n    returns() {\n        return this;\n    }\n}\nexports.default = PostgrestTransformBuilder;\n//# sourceMappingURL=PostgrestTransformBuilder.js.map\n};"],
"names":["shadow$provide","global","require","module","exports","__importDefault","mod","__esModule","Object","defineProperty","value","PostgrestBuilder_1","PostgrestTransformBuilder","default","select","columns","quoted","cleanedColumns","split","map","c","test","join","url","searchParams","set","headers","order","column","ascending","nullsFirst","foreignTable","referencedTable","key","existingOrder","get","undefined","limit","count","range","from","to","keyLimit","keyOffset","abortSignal","signal","single","maybeSingle","method","isMaybeSingle","csv","geojson","explain","analyze","verbose","settings","buffers","wal","format","_a","options","filter","Boolean","forMediatype","rollback","trim","length","returns"]
}
