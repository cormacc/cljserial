{"version":3,"sources":["statecharts/delayed.cljc"],"mappings":"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","names":["statecharts$delayed$IScheduler$schedule$dyn","x__5350__auto__","m__5351__auto__","statecharts.delayed/schedule","goog/typeOf","m__5349__auto__","cljs.core/missing-protocol","statecharts$delayed$IScheduler$unschedule$dyn","statecharts.delayed/unschedule","statecharts.delayed/IScheduler","this","fsm","state","event","delay","statecharts.delayed/scheduler?","x","cljs.core/PROTOCOL_SENTINEL","cljs.core/native-satisfies?","statecharts.delayed/path-placeholder","statecharts.delayed/delay-fn-id","d","cljs.core/int?","statecharts.delayed/generate-delayed-events","txs","p1__92705#","cljs.core.mapv","cljs.core.dissoc","statecharts.delayed/derived-delay-info","delayed-transitions","seq__92707","cljs.core/seq","chunk__92708","count__92709","i__92710","temp__5823__auto__","cljs.core/chunked-seq?","c__5525__auto__","cljs.core/chunk-first","cljs.core/chunk-rest","cljs.core/count","cljs.core/first","cljs.core/next","dt","js/Error","cljs.core/contains?","cljs.core/group-by","cljs.core.map","p__92719","vec__92720","cljs.core.nth","cljs.core.reduce","accu","curr","cljs.core.merge_with","cljs.core/conj","statecharts.delayed/insert-delayed-transitions","node","after","cljs.core/not","map__92726","cljs.core/--destructure-map","cljs.core.get","entry","exit","on","cljs.core.into","vconcat","xs","ys","cljs.core.concat","cljs.core/vec","cljs.core.update","cljs.core/merge","statecharts.delayed/replace-path","path","form","clojure.walk/postwalk","cljs.core._EQ_","var_args","G__92734","statecharts.delayed/replace-delayed-place-holder","statecharts.delayed.replace_delayed_place_holder","replace-path","cljs.core.partial","G__92739","states","statecharts.utils/map-kv","id","cljs.core.conj"],"sourcesContent":["(ns statecharts.delayed\n  (:require [clojure.walk :refer [postwalk]]\n            [statecharts.utils :as u]))\n\n(defprotocol IScheduler\n  (schedule [this fsm state event delay])\n  (unschedule [this fsm state event]))\n\n(defn scheduler? [x]\n  (satisfies? IScheduler x))\n\n(def path-placeholder [:<path>])\n\n(defn delay-fn-id [d]\n  (if (int? d)\n    d\n    #?(:cljs (aget d \"name\")\n       :clj (str (type d)))))\n\n(defn generate-delayed-events [delay txs]\n  (let [event [:fsm/delay\n               path-placeholder\n               ;; When the delay is a context function, after each\n               ;; reload its value of change, causing the delayed\n               ;; event can't find a match in :on keys. To cope with\n               ;; this we extract the function name as the event\n               ;; element instead.\n               (delay-fn-id delay)]]\n    ;; (def vd1 delay)\n    {:entry {:action :fsm/schedule-event\n             :event-delay delay\n             :event event}\n     :exit {:action :fsm/unschedule-event\n            :event event}\n     :on [event (mapv #(dissoc % :delay) txs)]}))\n\n#_(generate-delayed-events 1000 [{:delay 1000 :target :s1 :guard :g1}\n                                 {:delay 1000 :target :s2}])\n\n#_(group-by odd? [1 2 3])\n\n;; statecharts.impl/T_DelayedTransition\n;; =>\n#_[:map\n   [:entry]\n   [:exit]\n   [:on]]\n(defn derived-delay-info [delayed-transitions]\n  (doseq [dt delayed-transitions]\n    (assert (contains? dt :delay)\n      (str \"no :delay key found in\" dt)))\n  (->> delayed-transitions\n       (group-by :delay)\n       ;; TODO: the transition's entry/exit shall be grouped by delay,\n       ;; otherwise a delay with multiple targets (e.g. with guards)\n       ;; would result in multiple entry/exit events.\n       (map (fn [[delay txs]]\n              (generate-delayed-events delay txs)))\n       (reduce (fn [accu curr]\n                 (merge-with conj accu curr))\n              {:entry [] :exit [] :on []})))\n\n#_(derived-delay-info [:s1] [{:delay 1000 :target :s1 :guard :g1}\n                             {:delay 2000 :target :s2}])\n\n(defn insert-delayed-transitions\n  \"Translate delayed transitions into internal entry/exit actions and\n  transitions.\"\n  [node]\n  ;; node\n  (let [after (:after node)]\n    (if-not after\n      node\n      (let [{:keys [entry exit on]} (derived-delay-info after)\n            on (into {} on)\n            vconcat (fn [xs ys]\n                      (-> (concat xs ys) vec))]\n        (-> node\n            (update :entry vconcat entry)\n            (update :exit vconcat exit)\n            (update :on merge on))))))\n\n(defn replace-path [path form]\n  (if (nil? form)\n    form\n    (postwalk (fn [x]\n                x\n                (if (= x path-placeholder)\n                  path\n                  x))\n              form)))\n\n(defn replace-delayed-place-holder\n  ([fsm]\n   (replace-delayed-place-holder fsm []))\n  ([node path]\n   (let [replace-path (partial replace-path path)]\n     (cond-> node\n       (:on node)\n       (update :on replace-path)\n\n       (:entry node)\n       (update :entry replace-path)\n\n       (:exit node)\n       (update :exit replace-path)\n\n       (:states node)\n       (update :states\n               (fn [states]\n                 (u/map-kv (fn [id node]\n                             [id\n                              (replace-delayed-place-holder node (conj path id))])\n                           states)))))))\n\n#_(replace-delayed-place-holder\n {:on {[:fsm/delay [:<path>] 1000] :s2}\n  :states {:s3 {:on {[:fsm/delay [:<path>] 1000] :s2}\n                :entry [{:fsm/type :schedule-event\n                         :fsm/delay 1000\n                         :fsm/event [:fsm/delay [:<path>] 1000]}]}}\n  :entry [{:fsm/type :schedule-event\n           :fsm/delay 1000\n           :fsm/event [:fsm/delay [:<path>] 1000]}]} [:root])\n"],"x_google_ignoreList":[0]}