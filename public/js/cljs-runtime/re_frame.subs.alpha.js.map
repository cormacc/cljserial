{"version":3,"sources":["re_frame/subs/alpha.cljc"],"mappings":"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","names":["re-frame.register.alpha/reg","_","k","f","cljs.core.swap_BANG_","re-frame.register.alpha/lifecycle->method","cljs.core/assoc","q","re-frame.trace/is-trace-enabled?","*current-trace*-orig-val__86944","re-frame.trace/*current-trace*","*current-trace*-temp-val__86945","re-frame.trace/start-trace","end__44041__auto__","re-frame.interop/now","duration__44042__auto__","re-frame.trace/traces","cljs.core/conj","cljs.core.assoc","re-frame.trace/run-tracing-callbacks!","re-frame.query.alpha/id","var_args","G__86957","re-frame.subs.alpha/sub","js/Error","cljs.core/Keyword","re_frame.subs.alpha.sub","md","re-frame.query.alpha/method","cljs.core/map?","cljs.core/vector?","G__86960","re-frame.query.alpha/lifecycle","id","kind","args","vec__86968","cljs.core.nth","inputs-fn","computation-fn","cljs.core.apply","re-frame.subs/sugar","re-frame.query.alpha/query?","re-frame.registrar/register-handler","subscriptions","rid","cljs.core.atom","r","re-frame.interop/make-reaction","*current-trace*-orig-val__86977","*current-trace*-temp-val__86978","cljs.core/deref","subscription","G__86979","G__86980","G__86982","G__86983","re-frame.subs/deref-input-signals","new-trace__44043__auto__","cljs.core.merge","cljs.core.update","cljs.core/merge","cljs.core.dissoc","cljs.core/reset!","re-frame.interop/reagent-id","vec__87004","*current-trace*-orig-val__87012","*current-trace*-temp-val__87013","or__5002__auto__","cljs.core.vary_meta","G__87024","G__87025","G__87031","G__87032","re-frame.subs.alpha/sub-reactive","re-frame.subs/warn-when-not-reactive","re-frame.query.alpha/cached","re-frame.query.alpha/handle","re-frame.interop/add-on-dispose!","re_frame.query.alpha.clear_BANG_","re-frame.query.alpha/cache!","re-frame.subs.alpha/sub-safe","re-frame.interop/reactive?","re-frame.subs.alpha/sub-forever","re-frame.subs.alpha/nil-ref","re-frame.interop/ratom","re-frame.subs.alpha/sub-flow","G__87057","cljs.core/second","re-frame.flow.alpha/lookup","cljs.core/meta"],"sourcesContent":["(ns re-frame.subs.alpha\n  (:require\n   [re-frame.subs :refer [deref-input-signals sugar warn-when-not-reactive]]\n   [re-frame.registrar :refer [register-handler]]\n   [re-frame.register.alpha :refer [reg lifecycle->method]]\n   [re-frame.interop :refer [add-on-dispose! make-reaction reactive? reagent-id ratom]]\n   [re-frame.query.alpha :as q]\n   [re-frame :as-alias rf]\n   [re-frame.trace :as trace :include-macros true]\n   [re-frame.flow.alpha :as flow]))\n\n(defmethod reg :sub-lifecycle [_ k f]\n  (swap! lifecycle->method assoc\n         k\n         (fn [q]\n           (trace/with-trace {:operation (q/id q)\n                              :op-type :sub/create\n                              :tags {:query q}}\n             (f q)))))\n\n(defn sub\n  ([q]\n   (if (keyword? q)\n     (sub q {})\n     (let [md (q/method q)]\n       (cond (map? q) (md q)\n             (vector? q) (md {::rf/q (q/id q)\n                              ::rf/lifecycle (q/lifecycle q)\n                              ::rf/query-v q})))))\n  ([id q]\n   (sub (assoc q ::rf/q id))))\n\n(defmethod reg :sub [kind id & args]\n  (let [[inputs-fn computation-fn] (apply sugar id sub q/query? args)]\n    (register-handler\n     kind\n     id\n     (fn subs-handler-fn [_ q]\n       (let [subscriptions (inputs-fn q nil)\n             rid (atom nil)\n             r (make-reaction\n                #(trace/with-trace {:operation (q/id q)\n                                    :op-type   :sub/run\n                                    :tags      {:query      q\n                                                :reaction   @rid}}\n                   (let [subscription (computation-fn\n                                       (deref-input-signals subscriptions id)\n                                       q)]\n                     (trace/merge-trace! {:tags {:value subscription}})\n                     subscription)))]\n         (reset! rid (reagent-id r))\n         r)))))\n\n(defmethod reg :legacy-sub [_ id & args]\n  (let [[inputs-fn computation-fn] (apply sugar id sub q/query? args)]\n    (register-handler\n     :sub\n     id\n     (fn subs-handler-fn [_ q]\n       (let [subscriptions (inputs-fn q nil)\n             rid (atom nil)\n             r (make-reaction\n                #(trace/with-trace {:operation (q/id q)\n                                    :op-type   :sub/run\n                                    :tags      {:query      q\n                                                :reaction   @rid}}\n                   (let [q (if (map? q)\n                             (-> (or (::rf/query-v q) [(q/id q)])\n                                 (vary-meta assoc ::rf/lifecycle (q/lifecycle q)))\n                             q)\n                         subscription (computation-fn\n                                       (deref-input-signals subscriptions id)\n                                       q)]\n                     (trace/merge-trace! {:tags {:value subscription}})\n                     subscription)))]\n         (reset! rid (reagent-id r))\n         r)))))\n\n(defn sub-reactive [q]\n  (warn-when-not-reactive)\n  (or (q/cached q)\n      (let [md (q/lifecycle q)\n            r (q/handle q)]\n        (add-on-dispose! r #(q/clear! q md))\n        (q/cache! q r))))\n\n(reg :sub-lifecycle :reactive sub-reactive)\n\n(defn sub-safe [q]\n  (if (reactive?)\n    (sub-reactive q)\n    (or (q/cached q)\n        (q/handle q))))\n\n(reg :sub-lifecycle :safe sub-safe)\n(reg :sub-lifecycle :default sub-safe)\n\n(defn sub-forever [q]\n  (or (q/cached q)\n      (q/cache! q (q/handle q))))\n\n(reg :sub-lifecycle :forever sub-forever)\n\n(def nil-ref (ratom nil))\n\n(defn sub-flow [q]\n  (or (some-> (:id (or (second (::rf/query-v q)) q))\n              flow/lookup meta :re-frame.flow.alpha/ref)\n      nil-ref))\n\n(reg :sub-lifecycle :flow sub-flow)\n"],"x_google_ignoreList":[0]}