shadow$provide.module$node_modules$$supabase$storage_js$dist$main$packages$StorageBucketApi = function(global, require, module, exports) {
  var __awaiter = this && this.__awaiter || function(thisArg, _arguments, P, generator) {
    function adopt(value) {
      return value instanceof P ? value : new P(function(resolve) {
        resolve(value);
      });
    }
    return new (P || (P = Promise))(function(resolve, reject) {
      function fulfilled(value) {
        try {
          step(generator.next(value));
        } catch (e) {
          reject(e);
        }
      }
      function rejected(value) {
        try {
          step(generator["throw"](value));
        } catch (e) {
          reject(e);
        }
      }
      function step(result) {
        result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
      }
      step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
  };
  Object.defineProperty(exports, "__esModule", {value:!0});
  const constants_1 = require("module$node_modules$$supabase$storage_js$dist$main$lib$constants"), errors_1 = require("module$node_modules$$supabase$storage_js$dist$main$lib$errors"), fetch_1 = require("module$node_modules$$supabase$storage_js$dist$main$lib$fetch"), helpers_1 = require("module$node_modules$$supabase$storage_js$dist$main$lib$helpers");
  class StorageBucketApi {
    constructor(url, headers = {}, fetch) {
      this.url = url;
      this.headers = Object.assign(Object.assign({}, constants_1.DEFAULT_HEADERS), headers);
      this.fetch = (0,helpers_1.resolveFetch)(fetch);
    }
    listBuckets() {
      return __awaiter(this, void 0, void 0, function*() {
        try {
          return {data:yield (0,fetch_1.get)(this.fetch, `${this.url}/bucket`, {headers:this.headers}), error:null};
        } catch (error) {
          if ((0,errors_1.isStorageError)(error)) {
            return {data:null, error};
          }
          throw error;
        }
      });
    }
    getBucket(id) {
      return __awaiter(this, void 0, void 0, function*() {
        try {
          return {data:yield (0,fetch_1.get)(this.fetch, `${this.url}/bucket/${id}`, {headers:this.headers}), error:null};
        } catch (error) {
          if ((0,errors_1.isStorageError)(error)) {
            return {data:null, error};
          }
          throw error;
        }
      });
    }
    createBucket(id, options = {public:!1}) {
      return __awaiter(this, void 0, void 0, function*() {
        try {
          return {data:yield (0,fetch_1.post)(this.fetch, `${this.url}/bucket`, {id, name:id, public:options.public, file_size_limit:options.fileSizeLimit, allowed_mime_types:options.allowedMimeTypes}, {headers:this.headers}), error:null};
        } catch (error) {
          if ((0,errors_1.isStorageError)(error)) {
            return {data:null, error};
          }
          throw error;
        }
      });
    }
    updateBucket(id, options) {
      return __awaiter(this, void 0, void 0, function*() {
        try {
          return {data:yield (0,fetch_1.put)(this.fetch, `${this.url}/bucket/${id}`, {id, name:id, public:options.public, file_size_limit:options.fileSizeLimit, allowed_mime_types:options.allowedMimeTypes}, {headers:this.headers}), error:null};
        } catch (error) {
          if ((0,errors_1.isStorageError)(error)) {
            return {data:null, error};
          }
          throw error;
        }
      });
    }
    emptyBucket(id) {
      return __awaiter(this, void 0, void 0, function*() {
        try {
          return {data:yield (0,fetch_1.post)(this.fetch, `${this.url}/bucket/${id}/empty`, {}, {headers:this.headers}), error:null};
        } catch (error) {
          if ((0,errors_1.isStorageError)(error)) {
            return {data:null, error};
          }
          throw error;
        }
      });
    }
    deleteBucket(id) {
      return __awaiter(this, void 0, void 0, function*() {
        try {
          return {data:yield (0,fetch_1.remove)(this.fetch, `${this.url}/bucket/${id}`, {}, {headers:this.headers}), error:null};
        } catch (error) {
          if ((0,errors_1.isStorageError)(error)) {
            return {data:null, error};
          }
          throw error;
        }
      });
    }
  }
  exports.default = StorageBucketApi;
};

//# sourceMappingURL=module$node_modules$$supabase$storage_js$dist$main$packages$StorageBucketApi.js.map
