{"version":3,"sources":["stack/services/todo.cljs"],"mappings":";AAWA,+BAAA,/BAAKA;AAGL,AAAKC,kDACH,AAACC,2CAA+BF;AAUlC,6CAAA,7CAAKG,gIACF,iBAAAC,WAAA,mFAAA,mEAAA;AAAA,AAAA,kHAAAA,6CAAAA,vJAACC,sDAAAA,gEAAAA;;AAWJ,IAAAC,iBAAA;IAAAC,iBAAA,yGAAA,mFAAA,zGAEEF;IAFFG,iBAGC,eAAAE,JAAKG;AAAL,AAAA,IAAAF,aAAAD;QAAA,AAAAE,4CAAAD,WAAA,IAAA,/DAAUG;oBAAV,AAAAF,4CAAAD,WAAA,IAAA,3EAAYI;AAAZ,AACEA;;AAJH,AAAA,2HAAAT,eAAAC,eAAAC,2DAAAF,eAAAC,eAAAC,jPAACC,8DAAAA,4GAAAA;AAOD,IAAAO,iBAAA;IAAAC,iBAEC,iBAAAE,NAAKE;AAAL,AAAA,IAAAD,aAAAD;QAAA,AAAAP,4CAAAQ,WAAA,IAAA,/DAAYN;WAAZ,AAAAF,4CAAAQ,WAAA,IAAA,lEAAcE;AAAd,AAAA,kDAAA,kDAAA,mFAAA,mFAAA,6DAAA,mFAAA,2CAAA,gFAAA,4DAAA,jEACuCA;;AAHxC,AAAA,2HAAAN,eAAAC,2DAAAD,eAAAC,nNAACC,8DAAAA,6FAAAA;AAKD,IAAAK,iBAAA;IAAAC,iBAECrB;IAFDsB,iBAGC,WAAAC,SAAAC;AAAA,AAAA,IAAAC,aAAAF;IAAAE,iBAAA,AAAAC,4BAAAD;SAAA,AAAAE,4CAAAF,eAAA,hEAAaI;IAAbD,aAAAJ;WAAA,AAAAf,4CAAAmB,WAAA,IAAA,lEAAmBE;cAAnB,AAAArB,4CAAAmB,WAAA,IAAA,rEAAwBG;AAAxB,AACE,IAAMC,OAAK,AAACL,4CAAIE,GAAGE;IACbE,cAAM,AAAA,mFAAOD;AADnB,AAAA,kDAAA,kDAAA,mFAAA,mFAAA,6DAAA,mFAAA,2CAAA,6DAAA,RAE4BD,oEAAmB,AAACG,cAAID;;AANvD,AAAA,2HAAAb,eAAAC,eAAAC,2DAAAF,eAAAC,eAAAC,jPAACP,8DAAAA,4GAAAA;AAQD,IAAAoB,iBAAA;IAAAC,iBAECpC;IAFDqC,iBAGC,iBAAAC,NAAKpB;AAAL,AAAA,IAAAqB,aAAAD;WAAA,AAAA7B,4CAAA8B,WAAA,IAAA,lEAAYT;cAAZ,AAAArB,4CAAA8B,WAAA,IAAA,rEAAiBR;kBAAjB,AAAAtB,4CAAA8B,WAAA,IAAA,zEAAyBC;AAAzB,AAAA,kDAAA,kDAAA,mFAAA,mFAAA,6DAAA,mFAAA,2CAAA,6DAAA,RAC4BT,mFAA0BS;;AAJvD,AAAA,2HAAAL,eAAAC,eAAAC,2DAAAF,eAAAC,eAAAC,jPAACtB,8DAAAA,4GAAAA;AAMD,IAAA0B,iBAAA;IAAAC,iBAEC1C;IAFD2C,iBAGC,iBAAAC,NAAK1B;AAAL,AAAA,IAAA2B,aAAAD;WAAA,AAAAnC,4CAAAoC,WAAA,IAAA,lEAAYf;cAAZ,AAAArB,4CAAAoC,WAAA,IAAA,rEAAiBd;AAAjB,AAAA,kDAAA,kDAAA,mFAAA,mFAAA,6DAAA,mFAAA,2CAAA,iFAC0CA;;AAJ3C,AAAA,2HAAAU,eAAAC,eAAAC,2DAAAF,eAAAC,eAAAC,jPAAC5B,8DAAAA,4GAAAA","names":["stack.services.todo/store-id","stack.services.todo/local-storage-write-cofx-id","stack.utils.dbfx/reg-local-store-read-cofx","stack.services.todo/todo-task-interceptors","G__55088","stack.utils.dbfx/path","G__55089","G__55090","G__55091","stack.utils.dbfx/reg-event-db","p__55092","vec__55093","cljs.core.nth","_db","_","new-filter-kw","G__55096","G__55097","stack.utils.dbfx/reg-event-fx","p__55098","vec__55099","_cofx","text","G__55105","G__55106","G__55107","p__55111","p__55112","map__55113","cljs.core/--destructure-map","cljs.core.get","vec__55118","db","_eid","task-id","task","done?","cljs.core/not","G__55128","G__55129","G__55130","p__55134","vec__55135","description","G__55139","G__55140","G__55141","p__55143","vec__55144"],"sourcesContent":["(ns stack.services.todo\n  (:require\n   [stack.utils.dbfx :as dbfx :refer [reg-event-db reg-sub path]]\n   ;;\n   ))\n\n\n\n;; -------------------------------------------------------------------------------------\n;; -------------------------------------------------------------------------------------\n;; COFX REGISTRATIONS\n(def store-id \"todos-dbfx\")                         ;; localstore key\n\n;; Register a coeffect to load todo data from browser local storage\n(def local-storage-write-cofx-id\n  (dbfx/reg-local-store-read-cofx store-id))\n\n\n\n\n;; -- Interceptor Chain ------------------------------------------------------ ;;\n;; Each event handler can have its own chain of interceptors.\n;; We now create the interceptor chain shared by all event handlers\n;; which manipulate todos.\n\n(def todo-task-interceptors\n  [(path [:domain-data :tasks])])\n\n;; -------------------------------------------------------------------------------------\n;; -------------------------------------------------------------------------------------\n;; EVENTS\n\n;; -- Helpers -----------------------------------------------------------------\n\n;; -- Event Handlers -----------------------------------------------------------------\n\n;; usage:  (dispatch [:apply-task-filter  :pending])\n(reg-event-db\n :apply-task-filter\n [dbfx/path [:task-filter]]\n (fn [_db [_ new-filter-kw]]     ;; new-filter-kw is one of :all, :active or :done\n   new-filter-kw))\n\n;; usage:  (dispatch [:add-task  \"a description string\"])\n(dbfx/reg-event-fx                     ;; given the text, create a new todo\n :add-task\n (fn [_cofx [_ text]]\n   {:fx [[:transact [{:task/description text :task/done false}]]]}))\n\n(dbfx/reg-event-fx\n :toggle-task\n todo-task-interceptors\n (fn [{:keys [db]} [_eid task-id]]\n   (let [task (get db task-id)\n         done? (:done task)]\n     {:fx [[:transact [{:db/id task-id :task/done (not done?)}]]]})))\n\n(dbfx/reg-event-fx\n :save-task\n todo-task-interceptors\n (fn [_cofx [_eid task-id description]]\n   {:fx [[:transact [{:db/id task-id :task/description description}]]]}))\n\n(dbfx/reg-event-fx\n :delete-task\n todo-task-interceptors\n (fn [_cofx [_eid task-id]]\n   {:fx [[:transact [{:db.fn/retractEntity task-id}]]]}))\n"]}