{"version":3,"sources":["stack/examples/replicant/model.cljs"],"mappings":";AASA,GAAA,QAAAA,kCAAAC,2CAAAC,qDAAAC,2DAAAC;AAAA;AAAA,AAAA,AAASC,6CAAO,6CAAA,7CAACC;;AAEjB,4CAAA,5CAAMC,gGAAOC;AAAb,AAEE,iEAAA,2CAAA,sFAAA,oEAAA,qGAAA,oFAAA,2KAAA,qGAAA,mGAAA,iEAAA,2CAAA,mEAAA,kDAAA,6DAAA,GAAA,4EAAA,IAAA,oFAAA,GAAA,kFAAA,GAAA,wEAAA,GAAA,2DAAA,IAAA,iEAAA,1hDAACC,sBAAOJ,+JAAwB,KAAAK,8DACTF,4EAEGG,+FACHC,0FACI,AAACC,gCAAYC,wCAAkBC,oGAC/BC,sGACA,AAACC;;uDAY3B,AAACC,gDAAuBJ,wCAAkBC,/IAC1C,OAACI,6KAAO,WAAKC;AAAL,AACE,8GAAA,9GAACC,mDAAMhB,2CAAOiB,8EAAiBF;;AAE/B,iHAAA,mFAAA,iEAAA,rQAACC,mDAAMhB,2CAAOkB,0OAAgC,AAACC,eAAK,AAAA,2FAAWJ;;AAC/D,wHAAA,mFAAA,iEAAA,rQAACC,mDAAMhB,2CAAOkB,gPAAmC,AAACC,eAAK,AAAA,kGAAcJ;;;AAElF,6CAAA,7CAAMK,kGAAQC;AAAd,AACE,+DAAA,/DAACC,oBAAUtB,0GAAkB,WAAKuB,EAAEA,MAAEC,UAAUC;AAAnB,AACE,GAAM,AAACC,gDAAKF,UAAUC;AAAtB,AACE,QAACJ,0CAAAA,qDAAAA,bAAUI,kCAAAA;;AADb;;;;AAG/B,IAAAE,WAAA,AAAAC,gBAAY5B;AAAZ,AAAA,0FAAA2B,iCAAAA,nHAACN,0CAAAA,oDAAAA","names":["js/stack","js/stack.examples","js/stack.examples.replicant","js/stack.examples.replicant.model","js/stack.examples.replicant.model.!state","stack.examples.replicant.model/!state","cljs.core.atom","stack.examples.replicant.model/init!","initial-route","cljs.core/reset!","js/Date","stack.utils.i18n/default-language-code","stack.utils.themes/default","stack.utils.datascript/empty-db","stack.examples.models.domain/storage-id","stack.examples.models.domain/schema","stack.utils.filestore/empty-filestore","stack.statecharts.webserial/init","stack.utils.datascript/load-bitemporal-db+","promesa.core.then","domain-db","cljs.core.swap_BANG_","cljs.core/assoc","cljs.core/assoc-in","cljs.core/last","stack.examples.replicant.model/watch!","render-fn","cljs.core/add-watch","_","old-state","new-state","cljs.core.not_EQ_","G__63434","cljs.core/deref"],"sourcesContent":["(ns stack.examples.replicant.model\n  (:require [promesa.core :as p]\n            [stack.utils.datascript :as du]\n            [stack.utils.i18n :as i18n]\n            [stack.utils.themes :as themes]\n            [stack.examples.models.domain :as domain]\n            [stack.utils.filestore :as fu]\n            [stack.statecharts.webserial :as webserial]))\n\n(defonce !state (atom {}))\n\n(defn init! [initial-route]\n  ;; Apply initial state\n  (reset! !state {:app-started-at (js/Date.)\n                  :route initial-route\n                  ;;TODO: Move language and theme under user-input? Maybe...\n                  :language i18n/default-language-code\n                  :theme themes/default\n                  :domain-db (du/empty-db domain/storage-id domain/schema)\n                  :filestore fu/empty-filestore\n                  :webserial (webserial/init)\n                  :user-input {:task-filter :all\n                               :new-task \"\"\n                               :create-file-path \"/\"\n                               :create-file-content \"\"\n                               :selected-file-path \"\"\n                               :webserial-cmd \"\"\n                               :tx-time 0\n                               :valid-time 0}})\n\n  ;;Reload the domain data from the indexedDB transaction log\n  (->\n   (du/load-bitemporal-db+ domain/storage-id domain/schema)\n   (p/then (fn [domain-db]\n             (swap! !state assoc :domain-db domain-db)\n             ;; Initialise the historic domain data view to current domain db state....\n             (swap! !state assoc-in [:user-input :tx-time] (last (:tx-times domain-db)))\n             (swap! !state assoc-in [:user-input :valid-time] (last (:valid-times domain-db)))))))\n\n(defn watch! [render-fn]\n  (add-watch !state :on-change (fn [_ _ old-state new-state]\n                                 (when (not= old-state new-state)\n                                   (render-fn new-state))))\n  ;;Do the initial render\n  (render-fn @!state))\n"]}