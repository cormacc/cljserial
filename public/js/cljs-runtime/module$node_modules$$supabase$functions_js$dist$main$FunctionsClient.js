shadow$provide.module$node_modules$$supabase$functions_js$dist$main$FunctionsClient = function(global, require, module, exports) {
  var __awaiter = this && this.__awaiter || function(thisArg, _arguments, P, generator) {
    function adopt(value) {
      return value instanceof P ? value : new P(function(resolve) {
        resolve(value);
      });
    }
    return new (P || (P = Promise))(function(resolve, reject) {
      function fulfilled(value) {
        try {
          step(generator.next(value));
        } catch (e) {
          reject(e);
        }
      }
      function rejected(value) {
        try {
          step(generator["throw"](value));
        } catch (e) {
          reject(e);
        }
      }
      function step(result) {
        result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
      }
      step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
  };
  Object.defineProperty(exports, "__esModule", {value:!0});
  exports.FunctionsClient = void 0;
  const helper_1 = require("module$node_modules$$supabase$functions_js$dist$main$helper"), types_1 = require("module$node_modules$$supabase$functions_js$dist$main$types");
  class FunctionsClient {
    constructor(url, {headers = {}, customFetch, region = types_1.FunctionRegion.Any} = {}) {
      this.url = url;
      this.headers = headers;
      this.region = region;
      this.fetch = (0,helper_1.resolveFetch)(customFetch);
    }
    setAuth(token) {
      this.headers.Authorization = `Bearer ${token}`;
    }
    invoke(functionName, options = {}) {
      var _a;
      return __awaiter(this, void 0, void 0, function*() {
        try {
          const {headers, method, body:functionArgs} = options;
          let _headers = {}, {region} = options;
          region || (region = this.region);
          region && "any" !== region && (_headers["x-region"] = region);
          let body;
          functionArgs && (headers && !Object.prototype.hasOwnProperty.call(headers, "Content-Type") || !headers) && ("undefined" !== typeof Blob && functionArgs instanceof Blob || functionArgs instanceof ArrayBuffer ? (_headers["Content-Type"] = "application/octet-stream", body = functionArgs) : "string" === typeof functionArgs ? (_headers["Content-Type"] = "text/plain", body = functionArgs) : "undefined" !== typeof FormData && functionArgs instanceof FormData ? body = functionArgs : (_headers["Content-Type"] = 
          "application/json", body = JSON.stringify(functionArgs)));
          const response = yield this.fetch(`${this.url}/${functionName}`, {method:method || "POST", headers:Object.assign(Object.assign(Object.assign({}, _headers), this.headers), headers), body}).catch(fetchError => {
            throw new types_1.FunctionsFetchError(fetchError);
          }), isRelayError = response.headers.get("x-relay-error");
          if (isRelayError && "true" === isRelayError) {
            throw new types_1.FunctionsRelayError(response);
          }
          if (!response.ok) {
            throw new types_1.FunctionsHttpError(response);
          }
          let responseType = (null !== (_a = response.headers.get("Content-Type")) && void 0 !== _a ? _a : "text/plain").split(";")[0].trim();
          return {data:"application/json" === responseType ? yield response.json() : "application/octet-stream" === responseType ? yield response.blob() : "text/event-stream" === responseType ? response : "multipart/form-data" === responseType ? yield response.formData() : yield response.text(), error:null};
        } catch (error) {
          return {data:null, error};
        }
      });
    }
  }
  exports.FunctionsClient = FunctionsClient;
};

//# sourceMappingURL=module$node_modules$$supabase$functions_js$dist$main$FunctionsClient.js.map
