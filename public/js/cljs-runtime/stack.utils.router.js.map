{"version":3,"sources":["stack/utils/router.cljs"],"mappings":";AAQA,iCAAA,jCAAMA,0EAAQC,OAAOC;AAArB,AACE,OAACC,iCACA,AAACC,qDAAUH,QAKX,WAAKI;AAAL,AACE,AAAA;AAAA,AAAA,IAAAC,gBAAA;IAAAC,SAAA;IAAAC,OAAA;IAAAC,OAAA;IAAAC,UAAA;AAAA,AAAA,oBAAA,iBAAAC,KAAAC;AAAA,AAAA,oBAAAD;AAAA,QAAAA,mCAAAA,iCAAAJ,OAAAC,KAAAC,KAAAC,WAAAC,cAAAJ,OAAAC,KAAAC,KAAAC;;AAAA;;;AAAA,IAAAG,SAAA,KAAAC;IAAAC,WAAA;IAAAC,UAAAC;IAAAC,kBAAA;IAAAC,QAAA;IAAAC,UAAAJ;IAAAK,eAAA;IAAAC,wBAAA,KAAAC,gBAAA;AAAA,AAAA;AAAA,IAAAC,wBAAA,KAAAC,8BAAA,IAAAZ,OAAAM,MAAA,2CAAA,gDAAA,qBAAA,oDAAA,GAAA,yDAAA,EAAA,sDAAA,qFAAAX,KAAA,GAAA,EAAA,6EAAA,KAAAD,OAAAE,KAAAC,QAAAgB,kCAAAC,gDAAAP,cAAA,KAAA,KAAA,KAAA,KAAA,KAAA,KAAA,KAAA,KAAA,KAAA,nDAA+Bf;AAA/B,AAAA,IAAAuB,qBAAAC;AAAA,AAAA,oBAAAD;AAAA,IAAAE,gCAAAF;AAAA,AAAA,QAAAE,8DAAAA,4DAAAN,yBAAAM,yCAAAN;;AAAA,AAAAA;;GAAA;AAAA,AAAA,AAAAO,6CAAA,KAAAC,qCAAAzB,OAAAC,KAAAC,KAAAC,QAAAY;;AAAA,oBAAAD;AAAA,QAAAA,6CAAAA,2CAAAC,yBAAAD,wBAAAC;;AAAA;;;AAAA;;;;AACA,QAACpB,kDAAAA,yDAAAA,TAAkBG,sCAAAA;GARtB,2CAAA,sEAAA;;AAYF,kCAAA,0CAAA4B,5EAAMM;AAAN,AAAA,IAAAL,aAAAD;WAAA,AAAAE,4CAAAD,WAAA,IAAA,lEAAeM;IAAfJ,aAAA,AAAAD,4CAAAD,WAAA,IAAA;IAAAE,iBAAA,AAAAC,4BAAAD;aAAAA,TAAsDQ;SAAtD,AAAAN,4CAAAF,eAAA,hEAA4BK;YAA5B,AAAAH,4CAAAF,eAAA,nEAA+BM;kBAA/B,AAAAJ,4CAAAF,eAAA,zEAAqCO;AAArC,AAAA,kDAAA,qDAAA,0DAAA,sHAAA,4DAAA,/OACOF,wDACED,0DACA,CAAA,gDAASA,sEACRE,0EACMC;;AAEhB,mCAAA,nCAAME,8EAAS5C;AAAf,AACE,oDAAA,7CAAC6C,8EAAQ,AAACC,4CAAIR,gCAAOtC","names":["stack.utils.router/start!","routes","dispatch-callback","reitit.frontend.easy/start!","reitit.frontend.router","match","__run-fn-form","__kind","__ns","__id","__level","sf","taoensso.telemere.impl/*rt-sig-filter*","__inst","js/Date","__thread","__root0","taoensso.telemere.impl/*trace-root*","__otel-context1","__uid","__root1","__run-result","signal__42410__auto__","cljs.core/Delay","signal__42401__auto__","taoensso.telemere.impl/Signal","taoensso.telemere/*ctx*","taoensso.telemere.impl/*trace-parent*","temp__5821__auto__","taoensso.telemere/*middleware*","sig-middleware__42402__auto__","taoensso.telemere.impl/dispatch-signal!","taoensso.telemere.impl/WrappedSignal","p__98754","vec__98755","cljs.core.nth","map__98758","cljs.core/--destructure-map","cljs.core.get","stack.utils.router/=>link","path","id","title","description","_attrs","stack.utils.router/=>links","cljs.core.into","cljs.core.map"],"sourcesContent":["(ns stack.utils.router\n  (:require\n   [taoensso.telemere :as t]\n   [reitit.frontend :as rf]\n   [reitit.frontend.easy :as rfe]))\n\n\n\n(defn start! [routes dispatch-callback]\n  (rfe/start!\n   (rf/router routes)\n   ;; reitit supports dynamic routes using tokens -- \"/:company/users/:user-id\" for example\n   ;; If using this, we'd want to enable coercion (we're just using simple routes currently)...\n   ;; See https://cljdoc.org/d/metosin/reitit/0.7.0-alpha7/doc/coercion/coercion-explained\n   ;; (rf/router reitit-routes {:data {:coercion rss/coercion}})\n   (fn [match]\n     (t/event! ::route-match {:data match})\n     (dispatch-callback match))\n    ;; set to false to enable HistoryAPI\n   {:use-fragment true}))\n\n(defn =>link [[path {:keys [id title description] :as _attrs}]]\n  {:id id\n   :path path\n   :href (str \"#\" path)\n   :title title\n   :description description})\n\n(defn =>links [routes]\n  (into [] (map =>link routes)))\n"]}