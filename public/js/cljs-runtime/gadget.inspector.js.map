{"version":3,"sources":["gadget/inspector.cljs"],"mappings":";AAIA,AAAeA,gDACb,kBAAM,iBAAAC,oBAAK,AAACC,cAAIC;AAAV,AAAA,GAAAF;AACK,yBAAA,lBAACG,6CAAkCC;;AADxCJ;;MAAN,AAAA,wBAAA;AAIF,gCAAA,hCAAKK;AACL,6BAAA,7BAAKC;AAEL,uCAAA,vCAAMC;AAAN,AACE,oBAAI,iBAAAP,oBAAK,kCAAA,jCAAMK;AAAX,AAAA,GAAAL;AAAyBD;;AAAzBC;;;OACE,uHAAA,YAAA,gBAAA,mBAAA,kBAAA,xLAACQ,MAAS,4FAAA,/CAAKT,mKAIM,eAAA,fAACU,8BAAkCC,6BACLC,jRACnD,0SAAA,WAAAC,rTACA,PACA;AAFA,AAAQ,OAAAA;SACR,WAAAC;AAAA,AAAQ,iEAAAA,mEAAA,2EAAA,xMAACC;SAER,WAAAC;AAAA,AAAA,IAAAC,aAAAD;IAAAC,iBAAA,AAAAC,4BAAAD;SAAA,AAAAE,4CAAAF,eAAA,hEAAaG;AAAb,AACE,AAAKd,gCACH,iBAAMe,SAAO,KAAAC,YAAiB,4FAAA,/CAAKtB,sGAA8BoB;AAAjE,AACE,wBAAA,xBAAmBC,iCAAgB,WAAKE;AAAL,AAAY,OAACC,mBAAS,AAAQD;;;AACjEF;;;AACJ,AAAKd,6BAAUa;;AACfA;;;AACP,OAACK,gBAAmBlB;;;AAExB,AAAAmB,qEAAA,4DAAA,WAAmCC;AAAnC,AACE,IAAMC,YAAU5B;AAAhB,AACE,oBACEG;AAA4B,OAAC0B,kBAAqB,CAACF,wCAAAA,0CAAAA;;AADrD,oBAEEC;OAAc,AAACpB,AACD,4CAAO,WAAKsB,9DAGZ;AAHO,AACE,OAACrB,MAAS,wDAAA,XAAKmB,kEAAqBE,qBAC1B,qBAAA,2CAAA,uDAAA,OAAA,oDAAA,OAAA,zLAACC,+OAA2C,CAACJ,wCAAAA,0CAAAA;UACxD;AAAA,AACE;gDAAA,hDAAe3B;;;;AAPzC;;;;AASJ,AAAKgC,2BAAQC;AACb,AAAKC,+BAAYC;AACjB,AAAKC,+BAAOC;AACZ,AAAKC,gCAAQC;AACb,AAAKC,gDAAwBC;AAE7B,GAAA,QAAAC,mCAAAC,6CAAAC;AAAA;AAAA,AAAA,AAASC,4BACP,wBAAA,xBAACC,kCAEA,WAAKvB;AAAL,AACE,GAAM,2DAAA,3DAACwB,6CAAE,AAAA,AAAIxB;AAAb,AACE,OAACC,mBAAS,AAAA,AAAID;;AADhB","names":["gadget.inspector/*remote-inspector*","and__5000__auto__","cljs.core/not","js/window.cljs_data_browser","cljs.core/re-find","js/location.origin","gadget.inspector/event-source","gadget.inspector/client-id","gadget.inspector/ensure-event-source","js/fetch","js/JSON.stringify","js/navigator.userAgent","js/location.host","p1__63338#","p1__63339#","cljs.core.js__GT_clj","p__63346","map__63347","cljs.core/--destructure-map","cljs.core.get","id","source","js/EventSource","event","gadget.core/action","js/Promise.resolve","gadget.core/render-data","data-fn","inspector","js/cljs_data_browser","client-id","cljs.core/clj->js","gadget.inspector/inspect","gadget.core/inspect","gadget.inspector/create-atom","gadget.core/create-atom","gadget.inspector/pause!","gadget.core/pause!","gadget.inspector/resume!","gadget.core/resume!","gadget.inspector/set-render-debounce-ms!","gadget.core/set-render-debounce-ms!","js/gadget","js/gadget.inspector","js/gadget.inspector.listener","gadget.inspector/listener","js/window.addEventListener","cljs.core._EQ_"],"sourcesContent":["(ns gadget.inspector\n  (:require [gadget.core :as g]\n            [gadget.extensions]))\n\n(def ^:dynamic *remote-inspector*\n  (when (and (not js/window.cljs_data_browser)\n             (re-find #\"^http://localhost(:|$)\" js/location.origin))\n    \"http://localhost:7117\"))\n\n(def event-source nil)\n(def client-id nil)\n\n(defn ensure-event-source []\n  (if (and (nil? event-source) *remote-inspector*)\n    (-> (js/fetch (str *remote-inspector* \"/clients\")\n                  #js {:method \"POST\"\n                       :mode \"cors\"\n                       :headers #js {\"content-type\" \"application/json\"}\n                       :body (js/JSON.stringify #js {:userAgent js/navigator.userAgent\n                                                     :host js/location.host})})\n        (.then #(.json %))\n        (.then #(js->clj % :keywordize-keys true))\n        (.then\n         (fn [{:keys [id]}]\n           (def event-source\n             (let [source (js/EventSource. (str *remote-inspector* \"/events/\" id))]\n               (.addEventListener source \"action\" (fn [event] (g/action (.-data event))))\n               source))\n           (def client-id id)\n           id)))\n    (js/Promise.resolve client-id)))\n\n(defmethod g/render-data :default [data-fn]\n  (let [inspector *remote-inspector*]\n    (cond\n      js/window.cljs_data_browser (js/cljs_data_browser (data-fn))\n      inspector (-> (ensure-event-source)\n                    (.then (fn [client-id]\n                             (js/fetch (str inspector \"/events/\" client-id)\n                                       (clj->js {:method \"POST\" :mode \"cors\" :body (data-fn)}))))\n                    (.catch (fn []\n                              (def ^:dynamic *remote-inspector* nil)))))))\n\n(def inspect g/inspect)\n(def create-atom g/create-atom)\n(def pause! g/pause!)\n(def resume! g/resume!)\n(def set-render-debounce-ms! g/set-render-debounce-ms!)\n\n(defonce listener\n  (js/window.addEventListener\n   \"message\"\n   (fn [event]\n     (when (= (.. event -data -id) \"cljs-data-browser-action\")\n       (g/action (.. event -data -message))))))\n"],"x_google_ignoreList":[0]}