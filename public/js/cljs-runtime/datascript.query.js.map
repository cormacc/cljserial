{"version":3,"sources":["datascript/query.cljc"],"mappings":";AA2BA,AAAeA,2CACb,qBAAA,rBAACC;AAEH,AAAA;AAAA;AAAA;AAAA,AAIA,AAAA,AAAA,AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,AAAA,CAAA,AAAA,uEAAA,WAAAC,mBAAAC,rGAAWsE;;AAAX,AAAA,IAAAvE,yBAAA;AAAA,AAAA,OAAAA,+DAAAC,gBAAA;;;AAAA,CAAA,AAAA,uEAAA,WAAAC,mBAAAC,OAAAC,5GAAWmE;;AAAX,AAAA,IAAArE,yBAAA;AAAA,AAAA,IAAAG,WAAAF;IAAAE,eAAA,EAAA,CAAAA,oBAAAC,oBAAA,AAAAD,aAAA;AAAA,AAAA,QAAAA;KAAA;AAAAE;;;KAAA;AAAAC;;;KAAA;AAAAC;;;;AAAA,OAAAC,4CAAAC,gBAAAR,OAAAC;;;;;AAAA,CAAA,AAAA,4EAAA,WAAAQ,mBAAAC,gBAAAC,1HAAWyD;;AAAX,AAAA,IAAA3D,yBAAA;AAAA,AAAA,OAAAG,+CAAA,WAAAC,kBAAAC;AAAA,AAAA,IAAAC,aAAAD;IAAAE,kBAAA,AAAAC,4CAAAF,WAAA,IAAA;IAAAG,kBAAA,AAAAD,4CAAAF,WAAA,IAAA;AAAA,AAAA,QAAAL,gDAAAA,8CAAAG,kBAAAG,gBAAAE,mBAAAR,2BAAAG,kBAAAG,gBAAAE;GAAAP,mBAAAF;;;AAAA,CAAA,AAAA,mFAAA,WAAAU,mBAAAC,qBAAAC,tIAAW+C;;AAAX,AAAA,IAAAjD,yBAAA;AAAA,AAAA,IAAAG,wBAAA,WAAAC;AAAA,AAAA,OAAAC,+BAAAJ,qBAAA,oBAAA,GAAA,IAAA,GAAAC,mBAAAE;;AAAA,AAAA,OAAAC,+BAAAJ,qBAAAE,sBAAA,6BAAA,KAAA,IAAAD,mBAAA,AAAAI,+CAAA,mFAAA,KAAAC,2BAAA,KAAA,EAAA,IAAA,AAAAA,sCAAA,CAAA,qDAAAtB,aAAA,OAAA,KAAAsB,2BAAA,KAAA,EAAA,IAAA,AAAAA,sCAAA,CAAA,2DAAArB,gBAAA,OAAA,KAAAqB,2BAAA,KAAA,EAAA,IAAA,AAAAA,sCAAA,CAAA,uDAAApB,cAAA,eAAAE;;;AAAA,CAAA,AAAA,2EAAA,WAAAmB,tFAAWyC;;AAAX,AAAA,IAAAzC,eAAA;AAAA,AAAA,YAAAC,qBAAA,IAAAD,aAAA,EAAA,mFAAA,qDAAA,2DAAA,+DAAA,kBAAAnB,iBAAA,AAAAqB,oBAAArB,iBAAA,AAAAsB;;;AAAA,CAAA,AAAA,mEAAA,WAAAC,9EAAWqC;;AAAX,AAAA,IAAArC,yBAAA;AAAA,AAAAC;;;AAAA,CAAA,AAAA,yEAAA,WAAAC,pFAAWmC;;AAAX,AAAA,IAAAnC,yBAAA;AAAA,AAAA,qCAAA7B,YAAAC,eAAAC,aAAA0B,cAAAxB,gBAAA0B,/FAAWkC;;;AAAX,CAAA,AAAA,uEAAA,WAAAjC,lFAAWiC;;AAAX,AAAA,IAAAjC,yBAAA;AAAA,AAAA,QAAA,IAAA,AAAAC,gBAAA5B;;;AAAA,CAAA,AAAA,mEAAA,WAAA6B,9EAAW+B;;AAAX,AAAA,IAAA/B,yBAAA;AAAA,AAAA,IAAAC,kBAAAJ;AAAA,AAAA,GAAA,GAAA,CAAAI,mBAAA;AAAAA;;AAAA,IAAAA,sBAAA,AAAA,WAAAC;AAAA,AAAA,QAAA,aAAA,AAAAC,8BAAAD;GAAAF;AAAA,AAAA,CAAAH,gBAAAI;;AAAAA;;;;AAAA,CAAA,AAAA,qEAAA,WAAAG,UAAAC,1FAAW0B;;AAAX,AAAA,IAAA3B,gBAAA;AAAA,AAAA,SAAA,GAAA,CAAAC,cAAA,aAAA,EAAA,CAAA,AAAAD,8BAAA,AAAAC,6BAAA,EAAA,AAAAC,6CAAA,AAAAF,mBAAA,AAAAC,sBAAA,EAAA,AAAAC,6CAAA,AAAAF,sBAAA,AAAAC,yBAAA,EAAA,AAAAC,6CAAA,AAAAF,oBAAA,AAAAC,uBAAA,AAAAC,6CAAA,AAAAF,uBAAA,AAAAC;;;AAAA,CAAA,AAAA,oEAAA,WAAAE,mBAAAC,lGAAWuB;;AAAX,AAAA,IAAAxB,yBAAA;AAAA,AAAA,GAAA,AAAAE,0BAAA,iFAAA,gEAAA,4DAAA,yEAAAD;AAAA,OAAAE,+CAAA,AAAAC,qBAAA,AAAAC,6CAAA,mCAAAL,wBAAAZ,eAAAa;;AAAA,qCAAAzC,YAAAC,eAAAC,aAAA0B,cAAA,AAAAkB,oBAAA,AAAAH,+CAAAvC,gBAAAqC,kBAAA,pLAAWuB;;;;AAAX,CAAA,AAAA,yFAAA,WAAAjB,mBAAAnD,vHAAWoE;;AAAX,AAAA,IAAAjB,yBAAA;AAAA,AAAA,IAAAC,WAAApD;IAAAoD,eAAA,EAAA,CAAAA,oBAAAjD,oBAAA,AAAAiD,aAAA;AAAA,AAAA,QAAAA;KAAA;KAAA;KAAA;AAAA;;;;AAAA,OAAAN,0BAAAtC,gBAAAR;;;;;AAAA,CAAA,AAAA,2EAAA,WAAAqD,mBAAAC,gBAAA3B,zHAAWyC;;AAAX,AAAA,IAAAf,yBAAA;AAAA,AAAA,IAAAE,cAAAC;IAAAC,cAAAH;AAAA,AAAA,oBAAA,CAAAC,4CAAAA,0CAAA,qDAAAE,eAAAF,uBAAA,qDAAAE;AAAA,qCAAA9B,SAAAtB,eAAAC,aAAA0B,cAAAxB,gBAAA,5FAAW4D;;AAAX,oBAAA,CAAAb,4CAAAA,0CAAA,2DAAAE,eAAAF,uBAAA,2DAAAE;AAAA,qCAAArD,YAAAuB,SAAArB,aAAA0B,cAAAxB,gBAAA,zFAAW4D;;AAAX,oBAAA,CAAAb,4CAAAA,0CAAA,uDAAAE,eAAAF,uBAAA,uDAAAE;AAAA,qCAAArD,YAAAC,eAAAsB,SAAAK,cAAAxB,gBAAA,3FAAW4D;;AAAX,qCAAAhE,YAAAC,eAAAC,aAAA0B,cAAA,AAAA0B,8CAAAlD,gBAAA8C,gBAAA3B,UAAA,vKAAWyC;;;;;;AAAX,CAAA,AAAA,qEAAA,WAAAT,hFAAWS;;AAAX,AAAA,IAAAT,yBAAA;AAAA,AAAA,OAAAC,cAAA,AAAAnC,+CAAA,mFAAA,KAAAoC,mBAAA,qDAAAzD,YAAA,OAAA,KAAAyD,mBAAA,2DAAAxD,eAAA,OAAA,KAAAwD,mBAAA,uDAAAvD,aAAA,eAAAE;;;AAAA,CAAA,AAAA,4EAAA,WAAAsD,mBAAAnC,1GAAWyC;;AAAX,AAAA,IAAAN,yBAAA;AAAA,AAAA,qCAAA1D,YAAAC,eAAAC,aAAAqB,SAAAnB,gBAAA0B,1FAAWkC;;;AAAX,CAAA,AAAA,yEAAA,WAAAL,mBAAAC,vGAAWI;;AAAX,AAAA,IAAAL,yBAAA;AAAA,AAAA,GAAA,AAAAE,wBAAAD;AAAA,OAAAD,mEAAA,AAAAG,eAAAF,oBAAA,KAAA,AAAAE,eAAAF,oBAAA;;AAAA,OAAApD,+CAAAuD,gBAAAJ,uBAAAC;;;;AAAA,CAAA,AAAAI,oCAAA;AAAA,AAAA,AAAA;;;AAAA,CAAA,AAAAA,0CAAA;;AAAA,CAAA,AAAAA,+CAAA,WAAAC;AAAA,AAAA,YAAAC,eAAA,KAAA,2BAAA,KAAA,IAAA;;;AAAA,CAAA,AAAAF,kDAAA,WAAAC,mBAAAE;AAAA,AAAA,OAAAC,iBAAAD,qBAAA;;;AAAA;;;gCAAA,hCAAWM,wEAASzE,KAAKC,QAAQC;AAAjC,AAAA,YAAA8D,4CAAA,KAAA,KAAA,7BAAoBhE,KAAKC,QAAQC;;;AAAjC;;;mCAAA,2CAAAmE,9EAAWK;AAAX,AAAA,IAAAJ,uBAAA,iBAAAC,WAAA,AAAA5B,sDAAA0B,SAAA,uGAAA,2DAAA;AAAA,AAAA,GAAA,AAAAG,wBAAAH;AAAA,OAAAxB,6CAAA,mCAAA0B;;AAAAA;;;AAAA,AAAA,YAAAP,yBAAA,AAAA,mFAAAK,UAAA,AAAA,yFAAAA,UAAA,AAAA,qFAAAA,UAAA,KAAA,AAAAvB,oBAAAwB,sBAAA;;;AAAAN,AAOA,AAAA,AAAA,AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,AAAA,CAAA,AAAA,wEAAA,WAAAvE,mBAAAC,tGAAW6F;;AAAX,AAAA,IAAA9F,yBAAA;AAAA,AAAA,OAAAA,+DAAAC,gBAAA;;;AAAA,CAAA,AAAA,wEAAA,WAAAC,mBAAAgF,OAAA9E,7GAAW0F;;AAAX,AAAA,IAAA5F,yBAAA;AAAA,AAAA,IAAAiF,WAAAD;IAAAC,eAAA,EAAA,CAAAA,oBAAA7E,oBAAA,AAAA6E,aAAA;AAAA,AAAA,QAAAA;KAAA;AAAAC;;;KAAA;AAAAC;;;;AAAA,OAAA3E,4CAAAC,gBAAAuE,OAAA9E;;;;;AAAA,CAAA,AAAA,6EAAA,WAAAQ,mBAAAC,gBAAAC,3HAAWgF;;AAAX,AAAA,IAAAlF,yBAAA;AAAA,AAAA,OAAAG,+CAAA,WAAAC,kBAAAsE;AAAA,AAAA,IAAAC,aAAAD;IAAAnE,kBAAA,AAAAC,4CAAAmE,WAAA,IAAA;IAAAlE,kBAAA,AAAAD,4CAAAmE,WAAA,IAAA;AAAA,AAAA,QAAA1E,gDAAAA,8CAAAG,kBAAAG,gBAAAE,mBAAAR,2BAAAG,kBAAAG,gBAAAE;GAAAP,mBAAAF;;;AAAA,CAAA,AAAA,oFAAA,WAAAU,mBAAAC,qBAAAC,vIAAWsE;;AAAX,AAAA,IAAAxE,yBAAA;AAAA,AAAA,IAAAG,wBAAA,WAAAC;AAAA,AAAA,OAAAC,+BAAAJ,qBAAA,oBAAA,GAAA,IAAA,GAAAC,mBAAAE;;AAAA,AAAA,OAAAC,+BAAAJ,qBAAAE,sBAAA,8BAAA,KAAA,IAAAD,mBAAA,AAAAI,+CAAA,mFAAA,KAAAC,2BAAA,KAAA,EAAA,IAAA,AAAAA,sCAAA,CAAA,wDAAAuD,cAAA,OAAA,KAAAvD,2BAAA,KAAA,EAAA,IAAA,AAAAA,sCAAA,CAAA,yDAAAwD,eAAA,eAAA1E;;;AAAA,CAAA,AAAA,4EAAA,WAAA6E,vFAAWM;;AAAX,AAAA,IAAAN,eAAA;AAAA,AAAA,YAAAzD,qBAAA,IAAAyD,aAAA,EAAA,mFAAA,wDAAA,iEAAA,kBAAA7E,iBAAA,AAAAqB,oBAAArB,iBAAA,AAAAsB;;;AAAA,CAAA,AAAA,oEAAA,WAAAC,/EAAW4D;;AAAX,AAAA,IAAA5D,yBAAA;AAAA,AAAAC;;;AAAA,CAAA,AAAA,0EAAA,WAAAC,rFAAW0D;;AAAX,AAAA,IAAA1D,yBAAA;AAAA,AAAA,sCAAAgD,aAAAC,cAAAlD,cAAAxB,gBAAA0B,nFAAWyD;;;AAAX,CAAA,AAAA,wEAAA,WAAAxD,nFAAWwD;;AAAX,AAAA,IAAAxD,yBAAA;AAAA,AAAA,QAAA,IAAA,AAAAC,gBAAA5B;;;AAAA,CAAA,AAAA,oEAAA,WAAA6B,/EAAWsD;;AAAX,AAAA,IAAAtD,yBAAA;AAAA,AAAA,IAAAC,kBAAAJ;AAAA,AAAA,GAAA,GAAA,CAAAI,mBAAA;AAAAA;;AAAA,IAAAA,sBAAA,AAAA,WAAAC;AAAA,AAAA,QAAA,aAAA,AAAAC,8BAAAD;GAAAF;AAAA,AAAA,CAAAH,gBAAAI;;AAAAA;;;;AAAA,CAAA,AAAA,sEAAA,WAAAgD,UAAAC,3FAAWI;;AAAX,AAAA,IAAAL,gBAAA;AAAA,AAAA,SAAA,GAAA,CAAAC,cAAA,aAAA,EAAA,CAAA,AAAAD,8BAAA,AAAAC,6BAAA,EAAA,AAAA5C,6CAAA,AAAA2C,oBAAA,AAAAC,uBAAA,EAAA,AAAA5C,6CAAA,AAAA2C,qBAAA,AAAAC,wBAAA,AAAA5C,6CAAA,AAAA2C,uBAAA,AAAAC;;;AAAA,CAAA,AAAA,qEAAA,WAAA3C,mBAAAC,nGAAW8C;;AAAX,AAAA,IAAA/C,yBAAA;AAAA,AAAA,GAAA,AAAAE,0BAAA,iFAAA,8DAAA,4EAAAD;AAAA,OAAAE,+CAAA,AAAAC,qBAAA,AAAAC,6CAAA,mCAAAL,wBAAAZ,eAAAa;;AAAA,sCAAAoC,aAAAC,cAAAlD,cAAA,AAAAkB,oBAAA,AAAAH,+CAAAvC,gBAAAqC,kBAAA,xKAAW8C;;;;AAAX,CAAA,AAAA,0FAAA,WAAAxC,mBAAA4B,xHAAWY;;AAAX,AAAA,IAAAxC,yBAAA;AAAA,AAAA,IAAAqC,WAAAT;IAAAS,eAAA,EAAA,CAAAA,oBAAArF,oBAAA,AAAAqF,aAAA;AAAA,AAAA,QAAAA;KAAA;KAAA;AAAA;;;;AAAA,OAAA1C,0BAAAtC,gBAAAuE;;;;;AAAA,CAAA,AAAA,4EAAA,WAAA1B,mBAAAC,gBAAA+B,1HAAWM;;AAAX,AAAA,IAAAtC,yBAAA;AAAA,AAAA,IAAAoC,cAAAjC;IAAAkC,cAAApC;AAAA,AAAA,oBAAA,CAAAmC,4CAAAA,0CAAA,wDAAAC,eAAAD,uBAAA,wDAAAC;AAAA,sCAAAL,SAAAH,cAAAlD,cAAAxB,gBAAA,/EAAWmF;;AAAX,oBAAA,CAAAF,4CAAAA,0CAAA,yDAAAC,eAAAD,uBAAA,yDAAAC;AAAA,sCAAAT,aAAAI,SAAArD,cAAAxB,gBAAA,9EAAWmF;;AAAX,sCAAAV,aAAAC,cAAAlD,cAAA,AAAA0B,8CAAAlD,gBAAA8C,gBAAA+B,UAAA,3JAAWM;;;;;AAAX,CAAA,AAAA,sEAAA,WAAAhC,jFAAWgC;;AAAX,AAAA,IAAAhC,yBAAA;AAAA,AAAA,OAAAC,cAAA,AAAAnC,+CAAA,mFAAA,KAAAoC,mBAAA,wDAAAoB,aAAA,OAAA,KAAApB,mBAAA,yDAAAqB,cAAA,eAAA1E;;;AAAA,CAAA,AAAA,6EAAA,WAAAsD,mBAAAuB,3GAAWM;;AAAX,AAAA,IAAA7B,yBAAA;AAAA,AAAA,sCAAAmB,aAAAC,cAAAG,SAAA7E,gBAAA0B,9EAAWyD;;;AAAX,CAAA,AAAA,0EAAA,WAAA5B,mBAAAC,xGAAW2B;;AAAX,AAAA,IAAA5B,yBAAA;AAAA,AAAA,GAAA,AAAAE,wBAAAD;AAAA,OAAAD,mEAAA,AAAAG,eAAAF,oBAAA,KAAA,AAAAE,eAAAF,oBAAA;;AAAA,OAAApD,+CAAAuD,gBAAAJ,uBAAAC;;;;AAAA,CAAA,AAAA2B,qCAAA;AAAA,AAAA,AAAA;;;AAAA,CAAA,AAAAA,2CAAA;;AAAA,CAAA,AAAAA,gDAAA,WAAAtB;AAAA,AAAA,YAAAC,eAAA,KAAA,4BAAA,KAAA,IAAA;;;AAAA,CAAA,AAAAqB,mDAAA,WAAAtB,mBAAAE;AAAA,AAAA,OAAAC,iBAAAD,qBAAA;;;AAAA;;;iCAAA,jCAAWuB,0EAAUb,MAAMC;AAA3B,AAAA,YAAAS,uCAAA,KAAA,KAAA,vBAAqBV,MAAMC;;;AAA3B;;;oCAAA,4CAAAU,hFAAWG;AAAX,AAAA,IAAArB,uBAAA,iBAAAmB,WAAA,AAAA9C,sDAAA6C,SAAA,0GAAA;AAAA,AAAA,GAAA,AAAAhB,wBAAAgB;AAAA,OAAA3C,6CAAA,mCAAA4C;;AAAAA;;;AAAA,AAAA,YAAAF,0BAAA,AAAA,sFAAAC,UAAA,AAAA,uFAAAA,UAAA,KAAA,AAAA1C,oBAAAwB,sBAAA;;;AAAAiB,AAaA,kCAAA,lCAAMK,4EAAgBC,OAAOC;AAA7B,AACE,OAACC,uDAAiB,AAACC,cAAI,AAACC,eAAKJ,SAC3B,AAACG,cAAI,AAACC,eAAKH;;AAEf,oCAAA,pCAAMI,gFAAYC,EAAEC;AAApB,AACE,kGAAA,zFAAK,AAAC7D,6CAAE,AAACP,gBAAMmE,GAAG,AAACnE,gBAAMoE,WACvB,uBAAA,WAAAC,lCAACC;AAAD,AAAS,mCAAAD,5BAAC3D,0BAAU0D;GAAK,AAACH,eAAKE,SAC/B,uBAAA,WAAAI,lCAACD;AAAD,AAAS,mCAAAC,5BAAC7D,0BAAUyD;GAAK,AAACF,eAAKG;;AAEnC,qCAAA,rCAAOI,kFAAaC,QAAQC;AAA5B,AACE,GACE,6CAAA,AAAA,7CAACnE,iGAAKkE;AADR;;AAAA,GAGE,6CAAA,AAAA,7CAAClE,0LAAOkE;AACR,OAACE,4BAAYD;;AAJf,GAKE,oBAAAE,nBAASH;AACT,OAAClE,6CAAEmE,KAAKD;;AANV,GAOE,AAACE,4BAAYF;AACb,GAAI,qEAAA,AAAA,rEAAClE,6CAAE,AAACsE,eAAKJ;AACX,SAAK,AAACE,4BAAYD,WAChB,AAACJ,uBAAO,WAAAQ;AAAA,AAAA,IAAAC,aAAAD;iBAAA,AAAAjG,4CAAAkG,WAAA,IAAA,xEAAMC;cAAN,AAAAnG,4CAAAkG,WAAA,IAAA,rEAAiBE;AAAjB,AAA2B,QAACT,mEAAAA,uFAAAA,tBAAYQ,oEAAAA,zDAAWC,oEAAAA;GACzD,AAACC,4CAAIC,iBAAO,AAACC,kBAAQX,SAASC;;AAClC,gDAAA,vCAAK,AAACC,4BAAYD,aAChB,AAACnE,6CAAE,AAACP,gBAAM0E,MAAM,AAAC1E,gBAAMyE,eACvB,AAACH,uBAAO,WAAAe;AAAA,AAAA,IAAAC,aAAAD;iBAAA,AAAAxG,4CAAAyG,WAAA,IAAA,xEAAMN;cAAN,AAAAnG,4CAAAyG,WAAA,IAAA,rEAAiBL;AAAjB,AAA2B,QAACT,mEAAAA,uFAAAA,tBAAYQ,oEAAAA,zDAAWC,oEAAAA;GACzD,AAACC,4CAAIC,iBAAOV,QAAQC;;;AAf5B,AAiBE,QAACD,wCAAAA,8CAAAA,RAAQC,2BAAAA;;;;;;;AAEb,iCAAA,jCAAMa,0EAASC;AAAf,AACE,SAAK,gBAAAZ,fAASY,sCACZ,6CAAA,7CAACjF,iDAAK,AAACkF,gBAAM,AAACC,eAAKF;;AAEvB,mCAAA,nCAAMG,8EAAWH;AAAjB,AACE,SAAK,gBAAAZ,fAASY,sCACZ,6CAAA,7CAACjF,iDAAK,AAACkF,gBAAM,AAACC,eAAKF;;AAEvB,+BAAA,/BAAMI,sEAAOlB;AAAb,AACE,SAAI,iBAAA3G,hBAAU2G,wCAAM,OAASA;;AAE/B,qCAAA,rCAAMmB,kFAAanB;AAAnB,AACE,mHAAA,1GACE,EAAI,AAACC,4BAAYD,WAAM,AAACoB,oDAAUpB,eAClC,6CAAA,7CAACnE,iDAAI,AAACP,gBAAM0E,YACZ,AAACkB,6BAAM,AAACH,gBAAMf;;AAoBf,+BAAA,/BAAMqB,sEAAaC,GAAGC,MACHC,GAAGC;AADtB,AAEE,IAAMC,KAAI,AAASH;IACbI,KAAI,AAASF;IACbG,MAAI,AAACC,kDAAc,CAAGH,KAAGC;AAF/B,AAGE,IAAAG,wBAAYJ;AAAZ,AAAA,cAAA,VAAUK;;AAAV,AAAA,GAAA,WAAAD,VAAUC;AAAV,AAAgB,CAAMH,IAAIG,WAAE,CAAST,GAAG,CAAMC,MAAMQ;;AAApD,eAAA,WAAA,VAAUA;;;;AAAV;;;;AACA,IAAAD,wBAAYH;AAAZ,AAAA,cAAA,VAAUI;;AAAV,AAAA,GAAA,WAAAD,VAAUC;AAAV,AAAgB,CAAMH,IAAI,CAAGF,KAAGK,YAAG,CAASP,GAAG,CAAMC,MAAMM;;AAA3D,eAAA,WAAA,VAAUA;;;;AAAV;;;;AACAH;;AAIP,iCAAA,jCAAOI,0EAAUC,QAAQC,SAASC,QAAQC;AAA1C,AACE,IAAMC,gBAAW,AAACC,cAAI,iBAAAC,qBAAA,uDAAAC;AAAA,AAAA,YAAAC,kBAAA,KAAA;AAAA,AAAA,IAAAD,eAAAA;;AAAA,AAAA,IAAAE,qBAAA,AAAA5F,cAAA0F;AAAA,AAAA,GAAAE;AAAA,AAAA,IAAAF,eAAAE;AAAA,AAAA,GAAA,AAAAC,6BAAAH;AAAA,IAAAI,kBAm1E2B,AAAA6B,sBAAAjC;IAn1E3BK,qBAAA,AAAAvH,gBAAAsH;IAAAE,WAAA,AAAAC,uBAAAF;AAAA,AAAA,GAAA,AAAA,iBAAAG,WAAA;;AAAA,AAAA,GAAA,CAAAA,WAAAH;AAAA,IAAAI,aAAA,AAAA7F,eAAAwF,gBAAAI;UAAA,AAAA7I,4CAAA8I,WAAA,IAAA,jEAAOnC;YAAP,AAAA3G,4CAAA8I,WAAA,IAAA,nEAAWS;AAAX,AAAA,AAAA,AAAAR,uBAAAJ,SAAA,mFACGY,MAAM,CAACzB,wCAAAA,6CAAAA,PAAQnB,0BAAAA;;AADlB,eAAA,CAAAkC,WAAA;;;;AAAA;;;;;AAAA,OAAAG,qBAAA,AAAAC,gBAAAN,UAAA,AAAAO,6CAAA,AAAAC,qBAAAd;;AAAA,OAAAW,qBAAA,AAAAC,gBAAAN,UAAA;;;AAAA,IAAAS,aAAA,AAAAxC,gBAAAyB;UAAA,AAAArI,4CAAAoJ,WAAA,IAAA,jEAAOzC;YAAP,AAAA3G,4CAAAoJ,WAAA,IAAA,nEAAWG;AAAX,AAAA,OAAAF,eAAA,gNAAA,AAAAH,6CAAA,AAAAI,eAAAjB,zLACGkB,MAAM,CAACzB,wCAAAA,6CAAAA,PAAQnB,0BAAAA;;;AADlB;;;;GAAA,KAAA;;AAAA,AAAA,OAAAyB,mBAAkBJ;;IAElCwB,qEAAa,AAACC,eAAK3B,5EAAS,AAACnI,+CAAO+J,hDAAK,yFAAA;IACzCC,sBAAQ,AAACC,2BACC,AAACjK,+CACC,WAAKkK,IAAIC;AAAT,AACE,IAAMC,qBAAO,AAACrC,kDAAc8B;AAA5B,AACE,IAAAQ,mBAAA,AAAArH,cAAsBuF;IAAtB+B,qBAAA;IAAAC,qBAAA;IAAAC,iBAAA;;AAAA,AAAA,GAAA,AAAA,CAAAA,iBAAAD;AAAA,IAAAE,mBAAA,AAAAH,yDAAAE;kBAAA,AAAAnK,4CAAAoK,iBAAA,IAAA,/EAASb;kBAAT,AAAAvJ,4CAAAoK,iBAAA,IAAA,/EAAeK;AAAf,AAAA,AACE,CAAMV,mBAAOU,eAAM,CAA4BX,QAAQP;;AADzD;AAAA,eAAAS;eAAAC;eAAAC;eAAA,CAAAC,iBAAA;;;;;;;AAAA,IAAA5B,2BAAA,AAAA5F,cAAAqH;AAAA,AAAA,GAAAzB;AAAA,AAAA,IAAAyB,uBAAAzB;AAAA,AAAA,GAAA,AAAAC,6BAAAwB;AAAA,IAAAK,wBAAA,AAAAC,sBAAAN;AAAA,AAAA,eAAA,AAAAb,qBAAAa;eAAAK;eAAA,AAAAlJ,gBAAAkJ;eAAA;;;;;;;AAAA,IAAAE,mBAAA,AAAA3D,gBAAAoD;kBAAA,AAAAhK,4CAAAuK,iBAAA,IAAA,/EAAShB;kBAAT,AAAAvJ,4CAAAuK,iBAAA,IAAA,/EAAeE;AAAf,AAAA,AACE,CAAMV,mBAAOU,eAAM,CAA4BX,QAAQP;;AADzD;AAAA,eAAA,AAAAiB,eAAAR;eAAA;eAAA;eAAA;;;;;;;;AAAA;;;;;AAEA,OAACU,mDAAMb,IAAIE;GACf,AAACY,qBAAU,AAACxC,cAAIJ,WAChBE;AAXlB,AAYE,YAAAvD,sDAAA,KAAA,KAAA,tCAAWoD,QAAQ6B;;AAEvB,2BAAA,3BAAMiB,8DAAStF,EAAEC;AAAjB,AACE,IAAAsF,aAAyCvF;IAAzCuF,iBAAA,AAAAC,4BAAAD;cAAA,AAAAvL,4CAAAuL,eAAA,rEAAO/C;eAAP,AAAAxI,4CAAAuL,eAAA,tEAAuB9C;IAAvBgD,aACyCxF;IADzCwF,iBAAA,AAAAD,4BAAAC;cAAA,AAAAzL,4CAAAyL,eAAA,rEACO/C;eADP,AAAA1I,4CAAAyL,eAAA,tEACuB9C;AADvB,AAEE,GACE,AAACvG,6CAAEoG,QAAQE;AACX,YAAAtD,iHAAA,KAAA,KAAA,jGAAWoD,QAAQ,AAAC9F,6CAAK,AAACmG,cAAIJ,UAAUE;;AAF1C,GAME,AAAC+C,uBAAOjD;AAAUxC;;AANpB,GAOE,AAACyF,uBAAO/C;AAAU3C;;AAPpB,GASE,GAAK,AAACD,kCAAWyC,QAAQE;AACzB,MAAA,AAAAiD,gDAAA,CAAA,kDAAA,AAAAC,sHAAA,QAAA,AAAAA,gIAAA,2CAAA,uDAAA,xPAAyDpD,8HAAgBE;;AAV3E,GAaE,AAACvC,uBAAO0F,wBAAQ,AAAC1B,eAAK3B;AACtB,OAACD,+BAASC,QAAQC,SAASC,QAAQC;;AAdrC,AAiBE,IAAMmD,eAAa,AAACC,iBAAO,AAACjG,eAAK0C,SAAS,AAACwD;AAA3C,eACM,4CAAA,5CAACzD,+BAASuD,8CAAgBtD,QAAQC,pGACpC,IAAAwD;IAAAC,WAASjG;AAAT,AAAA,wHAAAgG,SAAAC,gDAAAD,SAAAC,lLAACZ,yDAAAA,4EAAAA;;;;;;;;AAEX,AAAA,4BAAA,oCAAAa,hEAAME;AAAN,AAAA,IAAAD,WAAA,AAAA;AAAA,AAAA,QAAAA;KAAA;AAAA,OAAAC;;;KAAA;AAAA,OAAAA,wDAAA,CAAA,UAAA,MAAA,CAAA,UAAA;;;;AAAA,MAAA,KAAAC,MAAA,CAAA,8DAAA,AAAA;;;;;AAAA,CAAA,0DAAA,1DAAMD;AAAN,AACM,YAAAjH,0BAAA,mCAAA,kJAAA,KAAA,KAAA,zEAAe,kDAAA,lDAACgD;;;AADtB,CAAA,0DAAA,1DAAMiE,qEAEFE,KAAKC;AAFT,AAGG,IAAM9G,SAAO,AAACI,eAAK,AAAA,sFAAQyG;IACrB5G,SAAO,AAACG,eAAK,AAAA,sFAAQ0G;IACrB1E,QAAO,AAAC2E,mBAAS,AAAC1F,4CAAI,AAAA,sFAAQwF,MAAM7G;IACpCsC,QAAO,AAACyE,mBAAS,AAAC1F,4CAAI,AAAA,sFAAQyF,MAAM7G;AAH1C,AAIE,YAAAP,0BACE,AAAC2G,iBAAO,AAAC7K,+CAAOwE,OAAOC,QAAQ,AAACqG,iDAChC,AAAC1B,2BACC,AAACjK,+CACC,WAAKkK,IAAI1C;AAAT,AACE,OAACxH,+CAAO,WAAKkK,QAAIxC;AAAT,AACE,OAACqD,mDAAMb,QAAI,AAAC3C,6BAAYC,GAAGC,MAAMC,GAAGC;GAC5CuC,IAAI,AAAA,uFAASiC;yJAPvB,KAAA,KAAA,hKAQM,qBAAA,rBAACnB,uDAAc,AAAA,uFAASkB;;;AAfnC,CAAA,oDAAA,pDAAMF;;AAAN,AAmBA,+BAAA,/BAAMK,sEAAa3M;AAAnB,AACE,IAAMA,YAAM,EAAI,OAASA,oBAAO,AAAC4M,sDAAgB5M,OAAOA;AAAxD,AACE,AAAC6M,8BAAe7M;;AAChB,OAAC8M,mBAASC,iBAAO/M;;AAErB,6BAAA,7BAAMgN,kEAAWC;AAAjB,AACE,IAAMC,6GAAU,AAACC,wCAAyBF,9IAC7B,4CAAA,5CAACjG;AADd,AAEE,YAAA3B,iGAAA,iCAAA,KAAA,KAAA,lHAAW,AAAC2G,iBAAOkB,KAAK,AAACjB;;AAE7B,AAAA;AAAA;;;4BAAA,5BAAa0B;;AAAb,IAAAP,iDAAA,WACYH,QAAQW;AADpB,AAAA,IAAAP,kBAAA,EAAA,YAAA,OAAA,lBACYJ,uBAAAA;IADZK,kBAAA,CAAAC,4BAAA,AAAAC,YAAAH;AAAA,AAAA,GAAA,GAAA,CAAAC,mBAAA;AAAA,QAAAA,gDAAAA,+DAAAA,jBACYL,4CAAAA,pCAAQW,4CAAAA;;AADpB,IAAAH,kBAAA,CAAAF,4BAAA;AAAA,AAAA,GAAA,GAAA,CAAAE,mBAAA;AAAA,QAAAA,gDAAAA,+DAAAA,jBACYR,4CAAAA,pCAAQW,4CAAAA;;AADpB,MAAA,AAAAF,2BAAA,mBACYT;;;;AADZ,AAAA,8BAAA,9BACGM,oEAASN,QAAQW;AADpB,AAAA,GAAA,EAAA,GAAA,YAAA,aAAA,GAAA,CAAA,wDAAA,pFACYX,4BAAAA;AADZ,OACYA,qDAAAA,QAAQW;;AADpB,OAAAR,+CACYH,QAAQW;;;;AADpB,AAGA,AAAA,AAAA,CAAA,AAAA,oEAAAC,pEACEC;;AADF,CAAA,AAAA,AACEA,sFACA,WAAUC,EAAEA;AAAZ,AAAA,YAAA,RAAUA;AAAV,AACE,OAACC;;;AAHL,AAAA,CAAA,AAAA,oEAAAH,pEAKEI;;AALF,CAAA,AAAA,AAKEA,sFACA,WAAUhB,QAAQW;AAAlB,AAAA,kBAAA,dAAUX;AAAV,AACE,YAAA5H,0BAAA,8TAAA,MAAA,gPAAA,KAAA,KAAA,9gBAAY,2DAAA,mFAAA,6DAAA,3MAAC6I,+CAAOjB,wTAAiC,mDAAA,nDAACkB,sIAAYP;;;AAPtE,AAAA,CAAA,AAAA,kEAAAC,lEASEO;;AATF,CAAA,AAAA,AASEA,oFACA,WAAUnB,QAAQoB;AAAlB,AAAA,kBAAA,dAAUpB;AAAV,AACE,GACE,GAAK,AAACqB,6BAAYD;AAClB,MAAA,AAAAzC,gDAAA,CAAA,qBAAA,AAAAC,mHAAA,kBAAA,AAAAA,8JAAA,2CAAA,uDAAA,mEAAA,2DAAA,3ZAAiCwC,qIAAuB,AAACE,yBAAUtB,wPAClCoB,+DAAe,AAACE,yBAAUtB;;AAH7D,GAIE,AAACtB,uBAAO0C;AACR,OAACrB,2BAAUC;;AALb,+EAQI,4CAAA,WAAAuB,vDAACxH,/EACD,OAAC1G,+CAAOiL;AADR,AAAM,uDAAAiD,hDAACjB,4BAAQ,AAAUN;GADtBoB;;;;;;AAlBX,AAAA,CAAA,AAAA,mEAAAR,nEAsBEY;;AAtBF,CAAA,AAAA,AAsBEA,qFACA,WAAUxB,QAAQoB;AAAlB,AAAA,kBAAA,dAAUpB;AAAV,AACE,GACE,GAAK,AAACqB,6BAAYD;AAClB,MAAA,AAAAzC,gDAAA,CAAA,qBAAA,AAAAC,mHAAA,aAAA,AAAAA,8JAAA,2CAAA,uDAAA,mEAAA,2DAAA,tZAAiCwC,gIAAkB,AAACE,yBAAUtB,wPAC7BoB,+DAAe,AAACE,yBAAUtB;;AAH7D,GAIE,CAAG,AAACnL,gBAAMuM,QAAM,AAACvM,gBAAM,AAAWmL;AAClC,MAAA,AAAArB,gDAAA,CAAA,uCAAA,AAAAC,mHAAA,kBAAA,AAAAA,8JAAA,2CAAA,uDAAA,mEAAA,2DAAA,3ZAAmDwC,qIAAuB,AAACE,yBAAUtB,wPACpDoB,+DAAe,AAACE,yBAAUtB;;AAN7D,AAQE,OAAC3M,+CAAOgM,0BACN,4CAAA,WAAAoC,iBAAAC,xEAAC3H;AAAD,AAAM,mCAAA0H,iBAAAC,7CAACpB;GAAe,AAAWN,qBAASoB;;;;;AAElD,8BAAA,8CAAAO,5EAAME,oEAAYC;AAAlB,AAAA,IAAAF,aAAAD;cAAA,AAAAjO,4CAAAkO,WAAA,IAAA,rEAA2B5B;YAA3B,AAAAtM,4CAAAkO,WAAA,IAAA,nEAAmCjB;AAAnC,AACE,GACE,EAAK,oBAAWK,nBAAWhB,sDACzB,gHAAW+B,/GAAO,AAAA,2FAAW/B;AAC/B,8DAAA,vDAACgC,+CAAOF,mEAAiBG,gBAAM,uDAAA,mFAAA,6DAAA,vMAAChB,+CAAOjB,2NAA6BW;;AAHtE,GAIE,EAAK,oBAAWK,nBAAWhB,sDACzB,gHAAWkC,/GAAS,AAAA,2FAAWlC;AACjC,6DAAA,tDAAC7J,8CAAM2L,+DAAe,AAACpC,6BAAYiB;;AANrC,AAQE,8DAAA,vDAACqB,+CAAOF,6DAAcK,eAAK,AAAC7B,4BAAQN,QAAQW;;;;;AAEhD,+BAAA,/BAAMyB,sEAAaN,QAAQO,SAASC;AAApC,AACE,IAAMC,KAAG,AAAC1N,gBAAMwN;IACVG,KAAG,AAAC3N,gBAAMyN;AADhB,AAEE,GACE,CAAGC,KAAGC;AACN,MAAA,AAAA7D,gDAAA,CAAA,kCAAA,AAAAC,wGAA8C,6CAAA,WAAA6D,xDAACC;AAAD,AAAO,OAAA,uFAAS,eAAAD,fAACE;mBAA/D,UAAA,AAAA/D,2HAAA,2CAAA,uDAAA,kEAAA,sEAAA,/XAAwEyD,kIAAoBG,oPAC1DH,6DAAcC;;AAHlD,GAKE,CAAGC,KAAGC;AACN,MAAA,AAAA7D,gDAAA,CAAA,oCAAA,AAAAC,wGAAgD,6CAAA,WAAAgE,xDAACF;AAAD,AAAO,OAAA,uFAAS,eAAAE,fAACD;mBAAjE,UAAA,AAAA/D,2HAAA,2CAAA,uDAAA,kEAAA,sEAAA,/XAA0EyD,kIAAoBG,oPAC5DH,6DAAcC;;AAPlD,AAUE,OAACjP,+CAAOwO,4BAAWC,QAAQ,AAAC/C,iBAAOsD,SAASC;;;;;AAIlD;;;4CAAA,5CAEEO;AAEF;;;+CAAA,/CAEEC;AAEF,6BAAA,7BAAMC,kEAAWrL,MAAMsL;AAAvB,AACE,IAAMC,MAAI,CAACvL,sCAAAA,4CAAAA,RAAMsL,yBAAAA;AAAjB,AACE,GAAI,AAACzN,0BAAUsN,0CAAeG;AAC5B,GAAI,AAACE,qBAAKD;AACR,IAAMA,UAAI,OAAA,NAAKA;AAAf,AACE,sEAA6BE;AAA7B,AACE,IAAMC,MAAa,CAASD,MAAMF;AAAlC,AAIE,GACE,OAASG;AAASA;;AADpB,GAEE,AAAC5J,4BAAY4J;AAAK,OAACC,oBAASP,6CAAkBM;;AAFhD,GAGE,AAACzI,oDAAUyI;AAAO,OAACC,oBAASP,6CAAkBM;;AAHhD,AAIoBA;;;;;;;AAE1B,kEAAyBD;AAAzB,AACE,IAAMC,MAAa,CAASD,MAAMF;AAAlC,AAEE,GACE,OAASG;AAASA;;AADpB,GAEE,AAAC5J,4BAAY4J;AAAK,OAACC,oBAASP,6CAAkBM;;AAFhD,GAGE,AAACzI,oDAAUyI;AAAO,OAACC,oBAASP,6CAAkBM;;AAHhD,AAIoBA;;;;;;;;AAC1B,GAAI,AAACF,qBAAKD;AACR,IAAMA,UAAI,OAAA,NAAKA;AAAf,AACE,yDAAgBE;AAAhB,AACW,QAASA,MAAMF;;;AAK5B,qDAAYE;AAAZ,AACW,QAASA,MAAMF;;;;;AAGlC,gCAAA,hCAAMK,wEACH5L,MAAM6L;AADT,AAEE,IAAMC,IAAE,AAAC3O,gBAAM0O;AAAf,AACE,GAAI,OAAA,NAAIC;AACN,OAACT,2BAAUrL,MAAM,AAAC4C,gBAAMiJ;;AACxB,IAAeE,cACqB,AAACvC,mDAAWqC;AADhD,AAEE,QAAA,JAAOjI;;AAAP,AACE,GAAI,CAAGA,IAAEkI;AACP,AACE,CAAMC,YAAYnI,KAAE,AAACyH,2BAAUrL,MAAM,CAAM+L,YAAYnI;;AACvD,eAAO,KAAA,JAAeA;;;;AAUf;kBAAK6H;AAAL,AACE,OAACO,mDAAM,gBAAA,hBAAMD;kBAANE;AAAA,AAAmB,QAAAA,iDAAAA,wDAAAA,TAAGR,qCAAAA;;;;;;;;;;AAEpD,6BAAA,7BAAMS,kEACHC,EAAEC,KAAK1C;AADV,AAEE,OAAC9D,2BACC,AAACjK,+CACC,WAAK0Q,IAAIC;AAAT,AACE,IAAMC,IAAE,CAACJ,kCAAAA,qCAAAA,LAAEG,kBAAAA;AAAX,AACE,OAACE,oDAAOH,IAAIE,EAAE,AAACE,6CAAK,AAACnR,4CAAI+Q,IAAIE,EAAEH,MAAME;GACzC,qBAAA,rBAAC3F,yDAAc+C;;AAErB,8BAAA,9BAAMgD,oEAAYC,OAAO1M;AAAzB,AACE,yCAAA,AAAA,lCAACiM,2BAAUS,4BAAW1M;;AAExB,6BAAA,7BAAM2M,kEAAW/E,KAAKC;AAAtB,AACE,IAAM+E,UAAc,AAAA,uFAAShF;IACvBiF,UAAc,AAAA,uFAAShF;IACvB9G,SAAc,AAAA,sFAAQ6G;IACtB5G,SAAc,AAAA,sFAAQ6G;IACtB+D,eAAc,AAAC1H,cAAI,AAACpD,gCAAe,AAAA,sFAAQ8G,MAAM,AAAA,sFAAQC;IACzDiF,cAAc,AAAC3L,eAAKJ;IACpBgM,cAAc,2BACE,AAACC,oBAAU,8CAAYC,IAAIX,EAAEnD,nGAK7BxD;AALW,AACE,oBAAI,CAAC5E,uCAAAA,0CAAAA,LAAOuL,uBAAAA;AACVW;;AACA,OAACxG,mDAAMwG,IAAIX;;0DAJvBtL,vDAKD,qBAAA,rBAAC0F;IAEnBwG,aAAc,AAACpF,mBAAS,AAACtC,eAAKzE;IAC9BoM,aAAc,AAACrF,mBAAS,AAACsF,wBAAW,AAAChL,4CAAIpB,QAAQ+L;IACjDM,UAAc,AAAC1B,8BAAa5K,OAAO6K;IACnC0B,UAAc,AAAC3B,8BAAa3K,OAAO4K;IACnC2B,OAAc,AAACd,4BAAWY,QAAQT;IAClCY,wCAEgB,AAAC9R,+CAAO,6CAAWkK,IAAI6H,3HAQvB,AAAC9H;AARO,AACE,IAAM+H,MAAI,AAACJ,QAAQG;AAAnB,AACE,IAAAE,qBAA2C,AAACtS,4CAAIkS,KAAKG;AAArD,AAAA,GAAA,CAAAC,sBAAA;AAIE/H;;AAJF,kBAAA+H,dAAUf;AAAV,AACE,OAAClR,+CAAO,qDAAWkK,QAAIgI;AAAf,AACE,OAACnH,mDAAMb,QAAI,AAAC3C,6BAAY2K,OAAOV,WAAWO,OAAON;GACzDvH,IAAIgH;;0DANpBC,vDAQE,qBAAA,rBAACnG;AA3BzB,AA6BE,YAAAjG,+KAAA,KAAA,KAAA,/JAAW,AAAC2G,iBAAO,AAAC7K,+CAAOuQ,YAAYC,aAAa,AAAC1F,iDACnDmG;;AAEN,gCAAA,hCAAMK,wEAAcxM,EAAEC;AAAtB,AACE,IAAAwM,aAAyCzM;IAAzCyM,iBAAA,AAAAjH,4BAAAiH;cAAA,AAAAzS,4CAAAyS,eAAA,rEAAOjK;eAAP,AAAAxI,4CAAAyS,eAAA,tEAAuBhK;IAAvBiK,aACyCzM;IADzCyM,iBAAA,AAAAlH,4BAAAkH;cAAA,AAAA1S,4CAAA0S,eAAA,rEACOhK;eADP,AAAA1I,4CAAA0S,eAAA,tEACuB/J;IACjBjE,QAAU,AAACmE,cAAI,AAACpD,gCAAe+C,QAAQE;IACvCiK,WAAU,AAACrC,8BAAa5H,QAAQhE;IAChCwN,OAAU,AAACd,4BAAWuB,SAAShK;IAC/BiK,WAAU,AAACtC,8BAAa9H,QAAQ9D;AALtC,AAME,uDAAA,hDAACvB,8CAAM6C,2DACG,kBAAA,WAAA6M,7BAACC;AAAD,AAAU,QAAM,iBAAAC,WAAM,SAAAF,TAACD;AAAP,AAAA,gFAAAG,4BAAAA,pGAACb,qCAAAA,+CAAAA;QAAP;GAA2BzJ;;AAEnD,iCAAA,jCAAOuK,0EAAelE,QAAQzH;AAA9B,AACE,sBAAA,WAAA4L,1BAACC;AAAD,AAAO,GAAM,AAAC3Q,0BAAU,AAAA,sFAAA0Q,kBAAW5L;AAA5B,AAAA4L;;AAAA;;GAAoC,AAAA,mFAAOnE;;AAEpD,uCAAA,vCAAMqE,sFAAqBrE,QAAQjI;AAAnC,AACE,GAAM,AAACW,iCAAUX;AAAjB,AACE,IAAAuM,qBAAgB,AAACJ,+BAAclE,QAAQjI;AAAvC,AAAA,GAAA,CAAAuM,sBAAA;AAAA;;AAAA,UAAAA,NAAYC;AAAZ,AACE,IAAAD,yBAAkB,AAAC9L,gBAAM,AAAA,uFAAS+L;AAAlC,AAAA,GAAA,CAAAD,0BAAA;AAAA;;AAAA,YAAAA,RAAYjD;AAAZ,AACE,GAAM,iHAAA,hHAAM,AAACmD,gBAAM,AAAA,uFAASD;AAA5B,AACE,IAAMpD,MAAI,AAACjQ,4CAAI,AAAA,sFAAQqT,KAAKxM;AAA5B,AACE,QAA4BsJ,MAAMF;;AAFtC;;;;;AAHN;;;AAOF,wCAAA,xCAAMsD,wFAAsBzE,QAAQxI;AAApC,AACE,oDAAA,WAAAkN,xDAAC9D;AAAD,AAAO,IAAA+D,mBAAI,6CAAAD,7CAACL,qCAAoBrE;AAAzB,AAAA,oBAAA2E;AAAAA;;AAAAD;;GAAuClN;;AAEhD,+CAAA,/CAAMoN,sGAA6BC,OAAOrN;AAA1C,AACE,GAAI,EAAA,GAAA,WAAA,SAAA,EAAA,EAAA,WAAA,CAAAsH,gCAAA,8BAAA,KAAA,EAAA,EAAA,4CAAA,AAAAgG,4DAAA,QAAA,AAAAA,lCAAYC,oEAAAA,5PAAOF,mEAAAA,uCAAAA,gGAAAA,oEAAAA;AACrB,IAAAG,aAAiBxN;QAAjB,AAAA5F,4CAAAoT,WAAA,IAAA,/DAAOC;QAAP,AAAArT,4CAAAoT,WAAA,IAAA,/DAAS9N;QAAT,AAAAtF,4CAAAoT,WAAA,IAAA,/DAAWE;SAAX,AAAAtT,4CAAAoT,WAAA,IAAA,hEAAaG;IACPC,iBAAW,EAAI,EAAI,AAACxM,mCAAYqM,QAAG,AAACtM,6BAAMsM,MAC7B,AAACI,2BAAgBR,OAAOI,GACxBA;IACbK,iBAAW,kBAAI,iBAAAC,oBAAKL;AAAL,AAAA,oBAAAK;AAAA,8CAAA,rCAAO,AAAC5M,6BAAMzB,UAAG,AAACsO,yBAAQX,OAAO3N,QAAG,EAAI,AAAC0B,mCAAYsM,QAAG,AAACvM,6BAAMuM;;AAA/DK;;MACF,AAACF,2BAAgBR,OAAOK,GACxBA;IACbO,kBAAW,EAAI,AAAC7M,mCAAYuM,KACf,AAACE,2BAAgBR,OAAOM,IACxBA;AATnB,AAUE,sDAAA,2IAAA,1LAACO,kIAAQN,eAAGlO,EAAEoO,eAAGG,4BAAO,AAAC1S,gBAAMyE;;AACjCA;;;AAEJ,qCAAA,rCAAMmO,kFAAmB3F,QAAQ4F,GAAGpO;AAApC,AAEE,IAAMqO,iBAGiB,6CAAA,WAAAC,xDAAClF;AAAD,AAAO,GAAI,EAAI,6CAAAkF,iBAAA,AAAA,9DAACxS,wHAAQ,iCAAAwS,jCAACpN;AAAlB;;AAAAoN;;iGAHJtO,9CACH,AAACiN,sCAAqBzE,tFACtB,AAAC4E,6CAA4BgB;IAE9CG,SAAe,AAACC,sBAAWJ,GAAGC;IAC9BI,gGACiB,AAACC,+CAAO,WAAAC,1IACR,6CAAA,7CAACvS;AADO,AAAA,IAAAwS,aAAAD;QAAA,AAAAvU,4CAAAwU,WAAA,IAAA,/DAAMC;QAAN,AAAAzU,4CAAAwU,WAAA,IAAA,/DAAQpH;AAAR,AAAY,OAACtG,iCAAU2N;GAD5B,qEAAA,mFAAA,IAAA,IAAA,IAAA,pKAACpO,4CAAIC,iBAAOV;AALtC,AAQE,YAAAlB,+CAAA,KAAA,KAAA,/BAAW2P,cAAWF;;AAE1B,0CAAA,1CAAMO,4FAAkB9O,QAAQ6J;AAAhC,AACE,IAAOA,YAAQA;IACR7J,cAAQA;;AADf,AAEE,oBAAI,iBAAA+N,oBAAKlE;AAAL,AAAA,oBAAAkE;AAAW/N;;AAAX+N;;;AACF,IAAMgB,IAAE,AAAC/N,gBAAM6I;IACTmF,IAAE,AAAChO,gBAAMhB;AADf,AAEE,GAAI,2GAAA,zGAAI,+CAAA,AAAA,/CAAClE,6CAAEkT,8DAAM,AAAC9N,iCAAU8N,QAAG,AAAClT,6CAAEiT,EAAEC;AAClC,eAAO,AAACpK,eAAKiF;eAAO,AAACjF,eAAK5E;;;;;AAD5B;;;AAHJ;;;;;AAQJ,uCAAA,vCAAMiP,sFAAqBzG,QAAQV,KAAK9H;AAAxC,AACE,IAAMkP,OAAW,+CAAA,WAAAC,1DAACT;AAAD,AAAS,uDAAAS,hDAACL,wCAAiB9O;GAAW8H;IACjDsH,+FACa,AAACV,+CAAO,WAAAW,1IACR,6CAAA,7CAACjT;AADO,AAAA,IAAAkT,aAAAD;QAAA,AAAAjV,4CAAAkV,WAAA,IAAA,/DAAMT;QAAN,AAAAzU,4CAAAkV,WAAA,IAAA,/DAAQ9H;AAAR,AAAY,OAACtG,iCAAU2N;GAD5B,AAACpO,4CAAIC,iBAAOV,QAAQ,AAAC0F;AAD3C,AAIE,YAAA5G,6GAAA,KAAA,KAAA,7FAAWsQ,aAAU,AAAChG,6CAAKjD,mBAAS+I;;AAExC,4CAAA,5CAAMK,gGAA0BC;AAAhC,AACE,GAAI,AAAC1O,+BAAQ,AAACE,gBAAMwO;AAClBA;;AACA,sDAAA,mFAAA,AAAA,lIAAC5U,8LAAY4U;;;AAEjB,kCAAA,lCAAMC,4EAAgBjH,QAAQ6E,OAAOrN;AAArC,AACE,GAAI,EAAA,GAAA,WAAA,SAAA,EAAA,EAAA,WAAA,CAAAsH,gCAAA,kCAAA,KAAA,EAAA,EAAA,4CAAA,AAAAgG,gEAAA,QAAA,AAAAA,tCAAYoC,wEAAAA,pQAAWrC,mEAAAA,2CAAAA,oGAAAA,wEAAAA;AACzB,OAACc,mCAAkB3F,QAAQ6E,OAAOrN;;AAClC,OAACiP,qCAAoBzG,QAAQ6E,OAAOrN;;;AAExC,iCAAA,jCAAM2P,0EAAepW,KAAKqW;AAA1B,AACE,IAAOrW,WAAQA;IACRqW,cAAQA;UADf,NAEO3L;;AAFP,AAGE,IAAA+H,qBAAc,AAAChL,gBAAMzH;AAArB,AAAA,GAAA,CAAAyS,sBAAA;AAIE,OAACnB,6CAAK5G,IAAI2L;;AAJZ,UAAA5D,NAAUe;AAAV,AACE,oBAAI,AAAC1Q,oBAAU,AAAC8C,gCAAe,AAAA,sFAAQyQ,aAAS,AAAA,sFAAQ7C;AACtD,eAAO,AAACnI,eAAKrL;eAAM,AAACyR,2BAAU+B,IAAI6C;eAAS3L;;;;;;AAC3C,eAAO,AAACW,eAAKrL;eAAMqW;eAAQ,AAAC/E,6CAAK5G,IAAI8I;;;;;;;;;;AAG7C,uCAAA,vCAAO8C,sFAAqBrH,QAAQzH;AAApC,AACE,IAAA+L,qBAAgB,AAACJ,+BAAclE,QAAQzH;AAAvC,AAAA,GAAA,CAAA+L,sBAAA;AAAA;;AAAA,UAAAA,NAAYC;AAAZ,AACE,IAAAD,yBAAkB,AAAC9L,gBAAM,AAAA,uFAAS+L;AAAlC,AAAA,GAAA,CAAAD,0BAAA;AAAA;;AAAA,YAAAA,RAAYjD;AAAZ,AACE,QAA4BA,MAAM,iBAAAiG,eAAC,AAAA,sFAAQ/C;AAAT,AAAA,QAAA+C,6CAAAA,kDAAAA,PAAc/O,+BAAAA;;;;;AAEtD,6CAAA,7CAAOgP,kGAAqBhD,IAAI3O;AAAhC,AACE,sBAAA,WAAA4R,1BAACpD;AAAD,AAAO,4HAAAoD,rHAAC/T,0BAAU,AAAA,sFAAQ8Q;GAAQ3O;;AAEpC,qCAAA,rCAAO6R,kFAAmBzH,QAAQpK;AAAlC,AACE,IAAM7E,OAAW,+CAAA,WAAA2W,1DAACxB;AAAD,AAAS,kDAAAwB,3CAACH,4DAAsB3R;GAAO,AAAA,mFAAOoK;IACzD2H,aAAW,AAACpW,+CAAOgM,0BAASxM;AADlC,AAAA,0FAEG,uDAAA,qDAAA,WAAA6W,vHAAC1H,+CAAOF;AAAR,AAAuB,0EAAA4H,nEAACC,+CAAO,AAAC9Q,cAAIhG;IAAU4W;;AAEnD,4BAAA,5BAAMG,gEAAU9H,QAAQuE,IAAIxC,EAAEgG;AAA9B,AACE,IAAM/W,UAAY,AAAA,yFAAUgP;IACtBpK,QAAY,AAAA,sFAAQ2O;IACpByD,MAAY,AAACjV,gBAAMgV;IACnBE,cAAY,AAAC3O,kDAAc0O;IAC3BE,cAAY,AAAC5O,kDAAc0O;AAJjC,AAKE,IAAAzO,wBAAYyO;AAAZ,AAAA,cAAA,VAAUxO;;AAAV,AAAA,GAAA,WAAAD,VAAUC;AAAV,AACE,IAAM2O,YAAI,AAACvW,4CAAImW,KAAKvO;AAApB,AACE,GAAI,sBAAA7B,rBAASwQ;AACX,IAAA3E,2BAAiB,AAACtS,4CAAIF,QAAQmX;AAA9B,AAAA,GAAA,CAAA3E,4BAAA;AAEE,CAAS0E,YAAY1O,WAAE,AAACtI,4CAAI0E,MAAMuS;;AAFpC,mBAAA3E,fAAUqB;AAAV,AACE,CAASoD,YAAYzO,WAAEqL;;;AAEzB,CAASoD,YAAYzO,WAAE2O;;;AAN7B,eAAA,WAAA,VAAU3O;;;;AAAV;;;;AASA,GACa,CAAYuI,MAAE7J;AACzB,kBAAKmJ;AAAL,AAEE,IAAM0G,WAAK,AAACK,8CAAUH;AAAtB,AACE,IAAA1O,wBAAYyO;AAAZ,AAAA,cAAA,VAAUxO;;AAAV,AAAA,GAAA,WAAAD,VAAUC;AAAV,AACE,IAAA8K,2BAAsB,CAAM4D,YAAY1O;AAAxC,AAAA,GAAA,CAAA8K,4BAAA;AAAA;AAAA,sBAAAA,lBAAY+D;AAAZ,AACE,IAAMnD,UAAE,CAA4B7D,MAAMgH;AAA1C,AACE,CAASN,SAAKvO,WAAE0L;;;AAHtB,eAAA,WAAA,VAAU1L;;;;AAAV;;;;AAIA,OAAC8O,8CAAMvG,EAAEgG;;;AACb,kBAAK1G;AAAL,AAEE,IAAA9H,wBAAYyO;AAAZ,AAAA,cAAA,VAAUxO;;AAAV,AAAA,GAAA,WAAAD,VAAUC;AAAV,AACE,IAAA8K,2BAAsB,CAAM4D,YAAY1O;AAAxC,AAAA,GAAA,CAAA8K,4BAAA;AAAA;AAAA,sBAAAA,lBAAY+D;AAAZ,AACE,IAAMnD,UAAE,CAA4B7D,MAAMgH;AAA1C,AACE,CAASJ,YAAYzO,WAAE0L;;;AAH7B,eAAA,WAAA,VAAU1L;;;;AAAV;;;;AAIA,OAAC8O,8CAAMvG,EAAEkG;;;;AAEjB,+BAAA,/BAAOM,sEAAahQ;AAApB,AAAA;;AAKA,kCAAA,lCAAMiQ,4EAAgBxI,QAAQgH;AAA9B,AACE,IAAAyB,aAAmBzB;IAAnB0B,aAAA,AAAA9W,4CAAA6W,WAAA,IAAA;IAAAE,aAAA,AAAApU,cAAAmU;IAAAE,eAAA,AAAApQ,gBAAAmQ;IAAAA,iBAAA,AAAAvM,eAAAuM;QAAAC,JAAQ7G;WAAR4G,PAAYZ;IACNe,OAAa,iBAAAnE,mBAAI,AAACzT,4CAAI6X,+BAAoBhH;AAA7B,AAAA,oBAAA4C;AAAAA;;AAAA,IAAAA,uBACE,AAAC0C,qCAAoBrH,QAAQ+B;AAD/B,AAAA,oBAAA4C;AAAAA;;AAAA,IAAAA,uBAEE,AAAC4D,6BAAYxG;AAFf,AAAA,oBAAA4C;AAAAA;;AAGE,GAAM,8CAAA,7CAAM,AAACT,+BAAclE,QAAQ+B;AAAnC,AACE,MAAA,AAAAlF,gDAAA,CAAA,sBAAA,AAAAC,gHAAA,OAAA,AAAAA,+HAAA,2CAAA,uDAAA,iEAAA,6DAAA,9WAAkCiF,uHAASiF,gPACbA,0DAAajF;;AAF7C;;;;;;IAJrB8G,aAO2B,AAACpB,mCAAkBzH,QAAQ,AAACkG,+CAAO8C,wBAAQjB;kBAPtE,AAAAnW,4CAAAiX,WAAA,IAAA,zEAOO7I;iBAPP,AAAApO,4CAAAiX,WAAA,IAAA,xEAOelB;IACTP,UAAa,kBAAI0B,MACF,iBAAMG,aAAW,AAACnB,0BAAS9H,YAAQ2H,WAAWmB,KAAKf;AAAnD,AACE,iEAAA,yDAAA,WAAAmB,9HAAChJ,+CAAOyH;AAAR,AAA4B,iEAAAuB,1DAAChD,+CAAO+C;;KACtC,yDAAA,yDAAA,lHAAC5U,8CAAMsT;AAX5B,AAYE,kEAAA,3DAACzH,+CAAOF,iEAAcK,eAAK+G;;AAE/B,8BAAA,9BAAM+B,oEAAYnJ,QAAQgH;AAA1B,AACE,IAAAoC,aAAuBpC;IAAvBqC,aAAA,AAAAzX,4CAAAwX,WAAA,IAAA;IAAAE,aAAA,AAAA/U,cAAA8U;IAAAE,eAAA,AAAA/Q,gBAAA8Q;IAAAA,iBAAA,AAAAlN,eAAAkN;QAAAC,JAAQxH;WAARuH,PAAYvB;UAAZ,AAAAnW,4CAAAwX,WAAA,IAAA,jEAAkBK;IACZvL,UAAS,AAACwL,gCAAiBD;IAC3BE,MAAS,iBAAAhF,mBAAI,AAACzT,4CAAI6X,+BAAoBhH;AAA7B,AAAA,oBAAA4C;AAAAA;;AAAA,IAAAA,uBACE,AAAC0C,qCAAoBrH,QAAQ+B;AAD/B,AAAA,oBAAA4C;AAAAA;;AAAA,IAAAA,uBAEE,AAAC4D,6BAAYxG;AAFf,AAAA,oBAAA4C;AAAAA;;AAGE,GAAM,8CAAA,7CAAM,AAACT,+BAAclE,QAAQ+B;AAAnC,AACE,MAAA,AAAAlF,gDAAA,CAAA,qBAAA,AAAAC,gHAAA,OAAA,AAAAA,+HAAA,2CAAA,uDAAA,iEAAA,6DAAA,9WAAiCiF,uHAASiF,gPACZA,0DAAajF;;AAF7C;;;;;;IALjByH,aAQ2B,AAAC/B,mCAAkBzH,QAAQ,AAACkG,+CAAO8C,wBAAQjB;kBARtE,AAAAnW,4CAAA4X,WAAA,IAAA,zEAQOxJ;iBARP,AAAApO,4CAAA4X,WAAA,IAAA,xEAQe7B;IACTP,UAAS,kBAAIuC,KACF,iBAAMC,WAAS,AAAC9B,0BAAS9H,YAAQ2H,WAAWgC,IAAI5B;IAC1ChX,OAAS,iBAAAiJ,qBAAA,oDAAA6P;AAAA,AAAA,YAAA3P,kBAAA,KAAA;AAAA,AAAA,IAAA2P,eAAAA;;AAAA,AAAA,IAAA1P,qBAAA,AAAA5F,cAAAsV;AAAA,AAAA,GAAA1P;AAAA,AAAA,IAAA0P,eAAA1P;AAAA,AAAA,GAAA,AAAAC,6BAAAyP;AAAA,IAAAxP,kBAs7DiB,AAAA6B,sBAAA2N;IAt7DjBvP,qBAAA,AAAAvH,gBAAAsH;IAAAyP,WAAA,AAAAtP,uBAAAF;AAAA,AAAA,GAAA,AAAA,iBAAAyP,WAAA;;AAAA,AAAA,GAAA,CAAAA,WAAAzP;AAAA,YAAA,AAAAzF,eAAAwF,gBAAA0P,vCAAM1I;AAAN,AAAA,IACa4I,MAAI,AAACL,SAASvI;AAD3B,AAAA,GAEY,GAAK,QAAA,PAAM4I;AAFvB,AAAA,AAAAtP,uBAAAmP,SAGE,AAAC7K,wDAAS,KAAA3I,4HAAA,iGAAA,KAAA,KAAA,7MAAW,AAAA,sFAAQqR,+FAAatG,+BACxC,AAAC7C,4BAAQN,QAAQ+L;;AAJrB,eAAA,CAAAF,WAAA;;;;AAAA,eAAA,CAAAA,WAAA;;;;;AAAA;;;;;AAAA,OAAAnP,qBAAA,AAAAC,gBAAAiP,UAAA,AAAAE,0CAAA,AAAAjP,qBAAA8O;;AAAA,OAAAjP,qBAAA,AAAAC,gBAAAiP,UAAA;;;AAAA,YAAA,AAAAtR,gBAAAqR,xBAAMxI;AAAN,AAAA,IACa4I,MAAI,AAACL,SAASvI;AAD3B,AAAA,GAEY,GAAK,QAAA,PAAM4I;AAFvB,OAAAhP,oWAAA,AAAA+O,0CAAA,AAAA9O,eAAA2O,9YAGE,AAAC5K,wDAAS,KAAA3I,4HAAA,iGAAA,KAAA,KAAA,7MAAW,AAAA,sFAAQqR,+FAAatG,+BACxC,AAAC7C,4BAAQN,QAAQ+L;;AAJrB,eAAA,AAAA/O,eAAA2O;;;;;;AAAA;;;;GAAA,KAAA;;AAAA,AAAA,OAAA7P,mBAAY,AAAA,uFAAS2N;;AADpC,AAME,GAAI,AAAC/K,uBAAO7L;AACV,OAACkO,wDAAS0I,WAAW,AAAC1J,2BAAUC;;AAChC,OAAC3M,+CAAOiL,yBAAQzL;;KACpB,AAACkO,wDAAS,yDAAA,yDAAA,lHAAC5K,8CAAMsT,sGAAuB,AAAC1J,2BAAUC;AAnBpE,AAoBE,kEAAA,3DAACgC,+CAAOF,iEAAcmH,+BAAcC;;AAIxC,+BAAA,/BAAM8C,sEAAOlK,QAAQgH;AAArB,AACE,GACE,GAAK,AAACtP,4BAAYsP;AADpB;;AAAA,IAIQmD,OAAK,EAAI,AAAC7R,+BAAQ,AAACE,gBAAMwO,UAClB,AAACoD,iBAAOpD,QACR,AAACxO,gBAAMwO;AANtB,AAAA,GAQE,GAAK,iBAAArP,hBAASwS;AARhB;;AAAA,GAWE,AAACzR,iCAAUyR;AAXb;;AAAA,GAcE,0BAAA,iFAAA,AAAA,2DAAA,AAAA,4DAAA,AAAA,sEAAA,AAAA,mEAAA,AAAA,0DAAA,AAAA,raAAC1W,6eAAiD0W;AAdpD;;AAAA,GAiBE,GAAK,AAAC1W,0BAAU,AAAA,qFAAQuM,SAASmK;AACjC,MAAA,AAAAtN,gDAAA,CAAA,iBAAA,AAAAC,mHAAA,OAAA,AAAAA,+HAAA,2CAAA,uDAAA,iEAAA,pTAA6BqN,0HAAYnD,gPAE/BA;;AApBZ,AAAA;;;;;;;;AAwBF,AAAKqD,8BAAW,6CAAA,7CAACC;AAEjB,+BAAA,/BAAMC,sEAAavD,OAAOhH,QAAQwK;AAAlC,AACE,IAAAC,aAAyBzD;IAAzB0D,aAAA,AAAAnW,cAAAkW;IAAAE,eAAA,AAAAnS,gBAAAkS;IAAAA,iBAAA,AAAAtO,eAAAsO;WAAAC,PAAOC;gBAAPF,ZAAcG;IACRC,QAAmB,AAACC,mDAAMV,4BAAWW;IACrCC,WAAmB,AAAC/Z,4CAAI,AAAA,qFAAQ8O,SAAS4K;AAF/C,AAGE,IAAA5Q,qBAAA,qDAAAkR;AAAA,AAAA,YAAAhR,kBAAA,KAAA;AAAA,AAAA,IAAAgR,eAAAA;;AAAA,AAAA,IAAA/Q,qBAAA,AAAA5F,cAAA2W;AAAA,AAAA,GAAA/Q;AAAA,AAAA,IAAA+Q,eAAA/Q;AAAA,AAAA,GAAA,AAAAC,6BAAA8Q;AAAA,IAAA7Q,kBA04D+C,AAAA6B,sBAAAgP;IA14D/C5Q,qBAAA,AAAAvH,gBAAAsH;IAAA8Q,WAAA,AAAA3Q,uBAAAF;AAAA,AAAA,GAAA,AAAA,iBAAA8Q,WAAA;;AAAA,AAAA,GAAA,CAAAA,WAAA9Q;AAAA,aAAA,AAAAzF,eAAAwF,gBAAA+Q,xCAAMc;AAAN,AAAA,IAAAb,aACwCa;IADxCZ,aAAA,AAAA/W,cAAA8W;IAAAE,eAAA,AAAA/S,gBAAA8S;IAAAA,iBAAA,AAAAlP,eAAAkP;IAAAE,aAAAD;IAAAE,aAAA,AAAAlX,cAAAiX;IAAAE,eAAA,AAAAlT,gBAAAiT;IAAAA,iBAAA,AAAArP,eAAAqP;QAAAC,JACc1M;gBADdyM,ZACkBU;cADlBb,VAC+Bc;IACnBC,eAAa,AAACpP,iBAAOkP,UAAUtB;AAF3C,AAAA,AAAA,AAAAlQ,uBAAAwQ,SAGE,sBAAA,tBAACoB;kBAADD;AAAA,AACG,GAAI,iCAAAA,jCAAC5T;AACH,IAAA8T,mBACE,yFAAAF,4CAAAA,pIAACD,6CAAAA,+DAAAA;AADH,AAAA,GAAA,CAAAG,oBAAA;AAEE,OAACC,+CAAO,kCAAA,jCAAK,eAAAH,fAAC7T,wFAAmBqS;;AAFnC0B;;;AADFF;;;CAKDF;;AATJ,eAAA,CAAAhB,WAAA;;;;AAAA;;;;;AAAA,OAAAxQ,qBAAA,AAAAC,gBAAAsQ,UAAA,AAAAQ,2CAAA,AAAA5Q,qBAAAmQ;;AAAA,OAAAtQ,qBAAA,AAAAC,gBAAAsQ,UAAA;;;AAAA,aAAA,AAAA3S,gBAAA0S,zBAAMgB;AAAN,AAAA,IAAAN,aACwCM;IADxCL,aAAA,AAAAtX,cAAAqX;IAAAE,eAAA,AAAAtT,gBAAAqT;IAAAA,iBAAA,AAAAzP,eAAAyP;IAAAE,aAAAD;IAAAE,aAAA,AAAAzX,cAAAwX;IAAAE,eAAA,AAAAzT,gBAAAwT;IAAAA,iBAAA,AAAA5P,eAAA4P;QAAAC,JACcjN;gBADdgN,ZACkBG;cADlBN,VAC+BO;IACnBC,eAAa,AAACpP,iBAAOkP,UAAUtB;AAF3C,AAAA,OAAA5P,eAGE,sBAAA,tBAACsR;kBAADD;AAAA,AACG,GAAI,iCAAAA,jCAAC5T;AACH,IAAA8T,mBACE,yFAAAF,4CAAAA,pIAACD,6CAAAA,+DAAAA;AADH,AAAA,GAAA,CAAAG,oBAAA;AAEE,OAACC,+CAAO,kCAAA,jCAAK,eAAAH,fAAC7T,wFAAmBqS;;AAFnC0B;;;AADFF;;;UAJL,AAAAX,2CAAA,AAAAzQ,eAAAgQ,nEASIkB;;;AATJ;;;;GAAA,KAAA;;AAAA,AAAA,OAAApS,mBAAaiR;;AAWjB,gCAAA,hCAAMyB,wEAAcC,GAAGC;AAAvB,AACE,IAAMC,QACQ,AAAChF,+CAAO,WAAAiF;AAAA,AAAA,IAAAC,aAAAD;QAAA,AAAAlb,4CAAAmb,WAAA,IAAA,/DAAM7K;QAAN,AAAAtQ,4CAAAmb,WAAA,IAAA,/DAAQC;AAAR,AAAY,OAAC1Z,6CAAE4O,EAAE8K;GADtB,AAAC/U,4CAAIC,iBAAOyU,GAAGC;AAAhC,AAAA,0FAEG,AAAC3U,4CAAIO,gBAAMqU,OACX,AAAC5U,4CAAImS,iBAAOyC;;AAEjB,mCAAA,nCAAMI,8EAAiBC,YAAY1C;AAAnC,AACE,IAAA2C,aAAyBD;IAAzBE,aAAA,AAAA7Y,cAAA4Y;IAAAE,eAAA,AAAA7U,gBAAA4U;IAAAA,iBAAA,AAAAhR,eAAAgR;WAAAC,PAAOzC;gBAAPwC,ZAAcvC;IACRyC,iBAAmB,AAACpc,4CAAIsZ,UAAUI;AADxC,AAEE,IAAA5Q,qBAAA,yDAAAuT;AAAA,AAAA,YAAArT,kBAAA,KAAA;AAAA,AAAA,IAAAqT,eAAAA;;AAAA,AAAA,IAAApT,qBAAA,AAAA5F,cAAAgZ;AAAA,AAAA,GAAApT;AAAA,AAAA,IAAAoT,eAAApT;AAAA,AAAA,GAAA,AAAAC,6BAAAmT;AAAA,IAAAlT,kBAs3D+C,AAAA6B,sBAAAqR;IAt3D/CjT,qBAAA,AAAAvH,gBAAAsH;IAAAmT,WAAA,AAAAhT,uBAAAF;AAAA,AAAA,GAAA,AAAA,iBAAAmT,WAAA;;AAAA,AAAA,GAAA,CAAAA,WAAAnT;AAAA,gBAAA,AAAAzF,eAAAwF,gBAAAoT,3CAAMI;AAAN,AAAA,IAAAH,aACkC,AAAChB,8BAAa7B,UAAUgD;oBAD1D,AAAAjc,4CAAA8b,WAAA,IAAA,3EACa7C;oBADb,AAAAjZ,4CAAA8b,WAAA,IAAA,3EACuBG;AADvB,AAAA,AAAA,AAAAlT,uBAAA6S,SAAA,mFAEG,sDAAA,mFAAA,AAAA,zIAACpb,kNAAmByY,gEAAUgD;;AAFjC,eAAA,CAAAJ,WAAA;;;;AAAA;;;;;AAAA,OAAA7S,qBAAA,AAAAC,gBAAA2S,UAAA,AAAAG,+CAAA,AAAA5S,qBAAAwS;;AAAA,OAAA3S,qBAAA,AAAAC,gBAAA2S,UAAA;;;AAAA,gBAAA,AAAAhV,gBAAA+U,5BAAMM;AAAN,AAAA,IAAAD,aACkC,AAAClB,8BAAa7B,UAAUgD;oBAD1D,AAAAjc,4CAAAgc,WAAA,IAAA,3EACa/C;oBADb,AAAAjZ,4CAAAgc,WAAA,IAAA,3EACuBC;AADvB,AAAA,OAAA5S,eAAA,iYAAA,AAAA0S,+CAAA,AAAAzS,eAAAqS,5WAEG,sDAAA,mFAAA,AAAA,zIAACnb,kNAAmByY,gEAAUgD;;;AAFjC;;;;GAAA,KAAA;;AAAA,AAAA,OAAA7T,mBAAgBsT;;AAIpB,gCAAA,hCAAMQ,wEAAcrW,KAAKqR;AAAzB,AACE,IAAMzP,MAAI,6CAAA,7CAACiR;AAAX,AACE,sBAAA,WAAA0D,jCAACzB;AAAD,AAAgB,AAAI,oBAAM,yEAAAyB,oCAAAA,5GAAClF,qCAAAA,uDAAAA;AAAP,AAAe,sEAAAkF,tEAACjD,mDAAM1R,IAAIgH;;AAA1B;;AAAJ2N;GAA0CvW;;AAD5D,OAAAsW,gBAEG1U;;AAEL,gCAAA,hCAAM4U,wEAAcjH;AAApB,AACE,OAACjQ,cAAI,AAAC+W,8BAAa9G,OAAOtO;;AAE5B,gCAAA,hCAAMwV,wEAAc9B,QAAQ+B;AAA5B,AACE,IAAMC,aAAW,AAACH,8BAAa7B;IACzBtD,OAAW,WAAAuF;AAAA,AAAA,IAAAC,aAAAD;IAAAE,aAAA,AAAA3c,4CAAA0c,WAAA,IAAA;IAAAE,aAAA,AAAAja,cAAAga;IAAAE,eAAA,AAAAjW,gBAAAgW;IAAAA,iBAAA,AAAApS,eAAAoS;QAAAC,JAAOzP;WAAPwP,PAAWrQ;AAAX,AAAmB,OAAC9G,uBAAO+W,WAAWjQ;;AADvD,AAAA,0FAEG,AAAC+H,+CAAO4C,KAAKqF,QACb,AAACtG,+CAAOiB,KAAKqF;;AAElB,8BAAA,9BAAMO,oEAAY1O,QAAQgH;AAA1B,AACE,IAAM2H,cAAgB,AAACzI,+CAAOxN,iCAAUsO;IAClC4H,kBAAgB,AAAC3R,iBAAO0R,YAAY,AAACzR;IAErC2R,QAAgB,WAAKC,eAAe1C;AAApB,AACE,OAAC7a,+CAAOwd,iCAAgBD,eAAe1C;;IACzD4C,oBAAgB,WAAKhP;AAAL,AACE,sBAAA,WAAAiP,1BAAC7K;AAAD,AAAO,OAACxH,uBAAO,AAAA,uFAAAqS;GAAa,AAAA,mFAAOjP;;AAN3D,AAOE,IAAOkP,YAAM,KAAAja,eAAA,KAAA,2CAAA,yEAAA,iCAAA,kFAAA,2DAAA,kGAAA,6DAAA,mCAAA,0EAAA,2CAAA,KAAA,IAAA,nYACuB+K,sJACCgH;IAG9BzC,MAAM,KAAAjO,0CAAA,iCAAA,KAAA,KAAA,3DAAWsY;;AALxB,AAME,IAAApL,qBAAgB,AAAChL,gBAAM0W;AAAvB,AAAA,GAAA,CAAA1L,sBAAA;AAwCEe;;AAxCF,YAAAf,RAAU2L;AAAV,AACE,IAAAC,aAA6C,qBAAA,rBAACM;kBAADD;AAAA,AAAa,UAAK,qCAAAA,rCAACvF,6BAAMlK;;CAAY,AAAA,yFAAUmP;cAA5F,AAAAvd,4CAAAwd,WAAA,IAAA,rEAAOhD;IAAPiD,aAAA,AAAAzd,4CAAAwd,WAAA,IAAA;IAAAE,aAAA,AAAA/a,cAAA8a;IAAAE,eAAA,AAAA/W,gBAAA8W;IAAAA,iBAAA,AAAAlT,eAAAkT;kBAAAC,dAAgBrC;mBAAhBoC,fAA8BE;AAA9B,AACE,GAAI,gBAAA,fAAMtC;AAGR,IAAMlN,cAAQ,AAAC6O,MAAM,AAAA,wGAAiBM,OAAO/C;IACvCvW,SAAQ,AAAC8Z,4BAAiB5V,cAAI,CAAC6V,0DAAAA,mFAAAA,3BAAS5P,gEAAAA,pDAAQ2O,gEAAAA;IAChDvH,UAAQ,KAAA9Q,iDAAA,KAAA,KAAA,jCAAWsY,gBAAgB/Y;AAFzC,AAGE,eAAO,AAACuG,eAAK8S;eAAO,AAAC1S,yBAAQ+H,IAAI6C;;;;;AAGnC,IAAAyI,aAA6B3C;IAA7B4C,aAAA,AAAAvb,cAAAsb;IAAAE,eAAA,AAAAvX,gBAAAsX;IAAAA,iBAAA,AAAA1T,eAAA0T;WAAAC,PAAOnF;gBAAPkF,ZAAcjF;IACRsD,SAAuB,AAAClB,iCAAgBC,YAAY,AAAA,2FAAYiC;IADtEa,aAE6B,AAAC9B,8BAAa,AAAC9b,+CAAO,AAAA,uGAAiB+c,OAAO/C,SAC5C,AAACha,+CAAO+b,OAAO,AAAA,wGAAiBgB;gBAH/D,AAAAvd,4CAAAoe,WAAA,IAAA,vEAEOC;iBAFP,AAAAre,4CAAAoe,WAAA,IAAA,xEAEiBE;AAFjB,AAIE,oBAAI,eAAA,fAAC9L;kBAAD+L;AAAA,AAAO,oDAAAA,iBAAA,AAAA,9DAAC7c;;CAAmB2c;AAG7B,eAAO,AAAC7T,eAAK8S;eAAO3K;;;;;AAEpB,IAAM6L,iBAAe,AAAChe,+CAAOga,QAAQ6D;IAC/BnB,iBAAe,AAACD,MAAM,AAAA,wGAAiBM,OAAOiB;AADpD,AAEE,oBAAI,AAACpB,kBAAYF;AAGf,eAAO,AAAC1S,eAAK8S;eAAO3K;;;;;AAGpB,IAAMiG,YAAW,AAACnW,8CAAM,AAAA,2FAAY8a,OAAOvE,KACxB,AAACvI,6CAAK,mJAAA,nJAACnR,4CAAI,AAAA,2FAAYie,OAAOvE,uCAASC;IACpDI,WAAW,AAACV,6BAAY2C,YAAYlN,QAAQwK;AAFlD,AAGE,eAAO,AAACpY,+CACC,iBAAA4H,qBAAA;2DAAAqW;AAAA,AAAA,YAAAnW,kBAAA,KAAA;;AAAA,AAAA,IAAAmW,eAAAA;;AAAA,AAAA,IAAAlW,qBAAA,AAAA5F,cAAA8b;AAAA,AAAA,GAAAlW;AAAA,AAAA,IAAAkW,eAAAlW;AAAA,AAAA,GAAA,AAAAC,6BAAAiW;AAAA,IAAAhW,kBAszDoB,AAAA6B,sBAAAmU;IAtzDpB/V,qBAAA,AAAAvH,gBAAAsH;IAAAiW,WAAA,AAAA9V,uBAAAF;AAAA,AAAA,GAAA,AAAA,iBAAAiW,WAAA;;AAAA,AAAA,GAAA,CAAAA,WAAAjW;AAAA,aAAA,AAAAzF,eAAAwF,gBAAAkW,xCAAMrE;AAAN,AAAA,AAAA,AAAAvR,uBAAA2V,SAAA,2CAAA,wFAAA,yFAAA,oMAAA,uEAAA,nXACmBF,yFACAtB,0EACA,AAAC2B,+GAAavE,OAAOsD,gFACrBhF,oFACA0F;;AALnB,eAAA,CAAAK,WAAA;;;;AAAA;;;;;AAAA,OAAA3V,qBAAA,AAAAC,gBAAAyV,UAAA,AAAAE,0CAAA,AAAAzV,qBAAAsV;;AAAA,OAAAzV,qBAAA,AAAAC,gBAAAyV,UAAA;;;AAAA,aAAA,AAAA9X,gBAAA6X,zBAAMnE;AAAN,AAAA,OAAAjR,eAAA,2CAAA,wFAAA,yFAAA,oMAAA,uEAAA,6FAAA,AAAAuV,0CAAA,AAAAtV,eAAAmV,zgBACmBD,yFACAtB,0EACA,AAAC2B,+GAAavE,OAAOsD,gFACrBhF,oFACA0F;;;AALnB;;;;;CAAA,KAAA;;;AAAA,AAAA,OAAAlW,mBAAaiR;KAMb,AAAC7O,eAAK8S;eACb3K;;;;;;;;;;;AAGxB,wCAAA,xCAAMmM,wFAAsB7L,OAAOrN;AAAnC,AACE,IAAAmZ,aAAiBnZ;QAAjB,AAAA5F,4CAAA+e,WAAA,IAAA,/DAAO1L;QAAP,AAAArT,4CAAA+e,WAAA,IAAA,/DAASzZ;QAAT,AAAAtF,4CAAA+e,WAAA,IAAA,/DAAWzL;SAAX,AAAAtT,4CAAA+e,WAAA,IAAA,hEAAaxL;AAAb,AACE,IAAAyL,WAAA;IAAAA,eAAA,gGAAAA,9FACE,AAAClY,iCAAUuM,IAAG,6CAAA2L,7CAACvO,sDAAK4C;IADtB2L,eAAA,sGAAAA,pGAEE,AAAClY,iCAAUyM,KAAI,6CAAAyL,7CAACvO,0DAAK8C;AAFvB,AAAA,GAGE,2CAAA,zCACE,AAACzM,iCAAUwM,UACX,GAAK,AAACxM,iCAAUxB,UAChB,AAACsO,yBAAQX,OAAO3N;AAAI,oDAAA0Z,7CAACvO,0DAAK6C;;AAN9B0L;;;AAQJ,6BAAA,7BAAMC,kEAAWtM,IAAIpG;AAArB,AACE,IAAAmG,qBAAmB,AAACzQ,oBAAU,AAACkd,sBAAY,AAAA,sFAAQxM,KAAKpG;AAAxD,AAAA,GAAA,CAAAmG,sBAAA;AAAA;;AAAA,yBAAAA,rBAAYwM;AAAZ,AACE,yDAAA,lDAACzc,8CAAMkQ,4DAAWuM;;;AAEtB,iCAAA,jCAAME,0EAAehR,QAAQ7B;AAA7B,AACE,6DAAA,tDAAC9J,8CAAM2L,6DAEG,6CAAA,WAAAiR,xDAACC;AAAD,AAAO,kCAAAD,3BAACJ,4CAAY1S;GADjB,AAAA,mFAAO6B;;AAGtB,8BAAA,9BAAMmR,oEAAYnR;AAAlB,AACE,oDAAA,7CAACpM,+EAAS,sDAAA,WAAAwd,jEAACC;AAAD,AAAS,OAACra,eAAK,AAAA,sFAAAoa;qDAAY,AAAA,mFAAOpR;;AAE9C,+BAAA,/BAAMsR,sEAAaC,MAAMpT,KAAK1G;AAA9B,AACE,GAAU,AAAC+Z,0BAAYrT,KAAKoT;AAA5B;;AAAA,AACE,IAAME,UAAQ,AAACC,qDAAe,AAAC3a,cAAIoH,MAAMoT;AAAzC,AACE,MAAA,AAAA1U,gDAAA,CAAA,0BAAA,AAAAC,sHAAA,iBAAA,AAAAA,6HAAA,2CAAA,uDAAA,iEAAA,2DAAA,1XAAsC2U,uIAAyBha,8OAErDA,2DACAga;;;AAEhB,mCAAA,nCAAME,8EAAiBJ,MAAMtG,SAASxT;AAAtC,AACE,IAAMma,OAAK,6CAAA,WAAAC,xDAACjR;AAAD,AAAO,OAAC8Q,qDAAe,8BAAAG,9BAAC5D,gDAAgBsD;GAAOtG;AAA1D,AACE,oBAAU,AAAC3C,8CAAMwJ,eAAEF;AAAnB;;AAAA,AACE,MAAA,AAAA/U,gDAAA,CAAA,2DAAA,AAAAC,mHAAA,OAAA,AAAAA,6HAAA,2CAAA,uDAAA,iEAAA,2DAAA,7WAAuE8U,0HAAYna,8OAEzEA,2DACAma;;;AAEhB,qCAAA,rCAAMG,kFAAmBR,MAAMpT,KAAK8M;AAApC,AACE,IAAM2G,OAAK,AAAC7a,cAAI,AAAC8Q,+CAAO0J,MAAMpT;AAA9B,AACE,IAAA6T,aAAA,AAAAzd,cAAe0W;IAAfgH,eAAA;IAAAC,eAAA;IAAAC,WAAA;;AAAA,AAAA,GAAA,AAAA,CAAAA,WAAAD;AAAA,aAAA,AAAAD,mDAAAE,5DAAQjG;AAAR,AAAA,AACE,IAAA5H,2BAAoB,AAACzQ,oBAAU,AAAC6d,qDAAeE,KAAK,AAAC3D,8BAAa/B;AAAlE,AAAA,GAAA,CAAA5H,4BAAA;AAAA;AAAA,oBAAAA,hBAAYmN;AAAZ,AACE,AAACW,qGAAIlG,OAAOqF,MAAMpT,KAAKyT;;AACvB,MAAA,AAAA/U,gDAAA,CAAA,2DAAA,AAAAC,4HAAA,iBAAA,AAAAA,+HAAA,2CAAA,uDAAA,iEAAA,6DAAA,pYAAuE2U,6IAAyBvF,gPAEtFA,6DACAuF;;;AANd;AAAA,eAAAO;eAAAC;eAAAC;eAAA,CAAAC,WAAA;;;;;;;AAAA,IAAAhY,qBAAA,AAAA5F,cAAAyd;AAAA,AAAA,GAAA7X;AAAA,AAAA,IAAA6X,iBAAA7X;AAAA,AAAA,GAAA,AAAAC,6BAAA4X;AAAA,IAAA/V,kBAAA,AAAAC,sBAAA8V;AAAA,AAAA,eAAA,AAAAjX,qBAAAiX;eAAA/V;eAAA,AAAAlJ,gBAAAkJ;eAAA;;;;;;;AAAA,aAAA,AAAAzD,gBAAAwZ,zBAAQ9F;AAAR,AAAA,AACE,IAAA5H,2BAAoB,AAACzQ,oBAAU,AAAC6d,qDAAeE,KAAK,AAAC3D,8BAAa/B;AAAlE,AAAA,GAAA,CAAA5H,4BAAA;AAAA;AAAA,oBAAAA,hBAAYmN;AAAZ,AACE,AAACW,qGAAIlG,OAAOqF,MAAMpT,KAAKyT;;AACvB,MAAA,AAAA/U,gDAAA,CAAA,2DAAA,AAAAC,4HAAA,iBAAA,AAAAA,+HAAA,2CAAA,uDAAA,iEAAA,6DAAA,pYAAuE2U,6IAAyBvF,gPAEtFA,6DACAuF;;;AANd;AAAA,eAAA,AAAArV,eAAA4V;eAAA;eAAA;eAAA;;;;;;;;AAAA;;;;;;AAQJ,AAAA,mCAAA,2CAAA3U,9EAAM0R;AAAN,AAAA,IAAAsD,WAAA,AAAA;AAAA,AAAA,QAAAA;KAAA;AAAA,OAAAtD,+DAAA,CAAA,UAAA,MAAA,CAAA,UAAA;;;KAAA;AAAA,OAAAA,+DAAA,CAAA,UAAA,MAAA,CAAA,UAAA,MAAA,CAAA,UAAA;;;;AAAA,MAAA,KAAAvR,MAAA,CAAA,8DAAA,AAAA;;;;;AAAA,CAAA,iEAAA,jEAAMuR,4EACF/O,QAAQgH;AADZ,AAEG,OAACsL,+DAAgBtS,QAAQgH,OAAOA;;;AAFnC,CAAA,iEAAA,jEAAM+H,4EAGF/O,QAAQgH,OAAOuL;;AAHnB,AAIG,IAAAC,cAAOjb;IAAPkb,cAAmBzL;AAAnB,AAAA,oBAAA,iBAAA0L,WAAA,mFAAA,2GAAA,AAAA,xBACI1J;IADJ2J,WAAAF;AAAA,AAAA,QAAAD,4CAAAA,0CAAAE,SAAAC,YAAAH,uBAAAE,SAAAC;;AAEE,AACE,AAACrB,6BAAY,AAACH,4BAAWnR,SAAS,AAACkG,+CAAOxN,iCAAU,AAACob,iBAAO9M,SAASA;;AACrE,OAACwB,gCAAexI,QAAQgH;;AAJ5B,oBAAA,iBAAA4L,WAAA,mFAAA,2GAAA,AAAA,0DAAA,AAAA,lFAMI5J;IANJ6J,WAAAJ;AAAA,AAAA,QAAAD,4CAAAA,0CAAAI,SAAAC,YAAAL,uBAAAI,SAAAC;;AAOE,AACE,AAACvB,6BAAY,AAACH,4BAAWnR,SAAS,AAACkG,+CAAOxN,iCAAU,AAACob,iBAAO9M,SAASA;;AACrE,OAACmC,4BAAWnJ,QAAQgH;;AATxB,oBAAA,iBAAA8L,WAAA,kHAAA,AAAA,/BAWGxa;IAXHya,WAAAN;AAAA,AAAA,QAAAD,4CAAAA,0CAAAM,SAAAC,YAAAP,uBAAAM,SAAAC;;AAYE,IAAAgB,aAA0B/M;IAA1BgN,aAAA,AAAAzf,cAAAwf;IAAAE,eAAA,AAAAzb,gBAAAwb;IAAAA,iBAAA,AAAA5X,eAAA4X;iBAAAC,bAAOC;WAAPF,PAAoBG;AAApB,AACE,IAAAC,8CAAUpT;IAAVqT,8CAA4B,AAACnjB,4CAAI,AAAA,yFAAU8O,SAASkU;AAApD,AAAA,gDAAAG,/CAAUrT;;AAAV,IAAA,AACE,OAACsR,+DAAgBtS,QAAQmU,KAAKnN;UADhC,AAAA,gDAAAoN,/CAAUpT;;AAbd,oBAAA,iBAAAgS,WAAA,AAAA;IAAAC,WAAAR;AAAA,AAAA,QAAAD,4CAAAA,0CAAAQ,SAAAC,YAAAT,uBAAAQ,SAAAC;;AAiBE,IAAAqB,aAAqBtN;IAArBuN,aAAA,AAAAhgB,cAAA+f;IAAAE,eAAA,AAAAhc,gBAAA+b;IAAAA,iBAAA,AAAAnY,eAAAmY;QAAAC,JAAOxV;eAAPuV,XAAWtJ;IACLjM,QAAS,AAAC2S,iCAAgB,AAACR,4BAAWnR,SAASiL,SAASjE;IACxDyN,WAAS,4CAAA,5CAACxc;kBAADyc;AAAA,AAAM,8IAAAA,uEAAAA,7MAACC,gEAAAA,0FAAAA,5BAAe3U,uEAAAA;;CAAWiL;IAC1Cla,OAAS,4CAAA,5CAACkH;kBAAD2c;AAAA,AAAM,OAACrjB,+CAAOiR,2BAAU,AAAA,mFAAAoS;;CAAWH;AAHlD,AAIE,+EAAA,qDAAA,7HAACpgB,8CAAM,AAACmE,gBAAMic,kJAAiB,AAACljB,+CAAOiL,yBAAQzL;;AArBnD,oBAAA,iBAAAmiB,WAAA,AAAA;IAAAC,WAAAV;AAAA,AAAA,QAAAD,4CAAAA,0CAAAU,SAAAC,YAAAX,uBAAAU,SAAAC;;AAwBE,IAAA0B,aAAuC7N;IAAvC8N,aAAA,AAAAvgB,cAAAsgB;IAAAE,eAAA,AAAAvc,gBAAAsc;IAAAA,iBAAA,AAAA1Y,eAAA0Y;QAAAC,JAAO/V;IAAP+V,mBAAA,AAAAvc,gBAAAsc;IAAAA,iBAAA,AAAA1Y,eAAA0Y;IAAAE,aAAAD;IAAAE,aAAA,AAAA1gB,cAAAygB;IAAAE,eAAA,AAAA1c,gBAAAyc;IAAAA,iBAAA,AAAA7Y,eAAA6Y;eAAAC,XAAUC;WAAVF,PAAqB9W;eAArB2W,XAA6B7J;IACvBsG,QAAM,AAACJ,4BAAWnR;AADxB,AAEE,AAACsR,6BAAYC,MAAM4D,SAAS5C;;AAC5B,AAACR,mCAAkBR,MAAMpT,KAAK8M;;AAC9B,eAAOjL;eAAQ,mDAAA,AAAA,nDAAC4B,iHAAe,AAACxP,+CAAO+iB,SAAShX,MAAM8M;eAAUjE;;;;;;AA5BpE,oBAAA,iBAAAoM,WAAA,AAAA;IAAAC,WAAAZ;AAAA,AAAA,QAAAD,4CAAAA,0CAAAY,SAAAC,YAAAb,uBAAAY,SAAAC;;AA+BE,IAAA+B,aAA0BpO;IAA1BqO,aAAA,AAAA9gB,cAAA6gB;IAAAE,eAAA,AAAA9c,gBAAA6c;IAAAA,iBAAA,AAAAjZ,eAAAiZ;QAAAC,JAAOtW;IAAPsW,mBAAA,AAAA9c,gBAAA6c;IAAAA,iBAAA,AAAAjZ,eAAAiZ;WAAAC,PAASnX;eAATkX,XAAgBpK;IACV9M,WAAa,AAACpH,cAAIoH;IAClBa,QAAa,AAAC+S,mCAAkB,AAACZ,4BAAWnR,SAAS7B,SAAK8M;IAC1DsK,eAAa,AAACvE,+BAAchR,QAAQ7B;IACpCsW,WAAa,4CAAA,5CAACxc;kBAADud;AAAA,qKAAUD,4EAAAA,3MAAa,4IAAAC,4EAAAA,vNAACb,gEAAAA,+FAAAA,tMAAkB,OAAC3D,0QAAc7S;;CAAO8M;IAC7Ela,OAAa,4CAAA,5CAACkH;kBAADwd;AAAA,AAAM,OAAClkB,+CAAOiR,2BAAU,AAAA,mFAAAiT;;CAAWhB;IAChDiB,UAAa,AAACnkB,+CAAOiL,yBAAQzL;AANnC,AAOE,8DAAA,vDAACmP,+CAAOF,6DAAcmH,+BAAcuO;;AAtCxC,oBAAA,iBAAApC,WAAA,AAAA;IAAAC,WAAAd;AAAA,AAAA,QAAAD,4CAAAA,0CAAAc,SAAAC,YAAAf,uBAAAc,SAAAC;;AAyCE,IAAAoC,aAAoB3O;IAApB4O,aAAA,AAAArhB,cAAAohB;IAAAE,eAAA,AAAArd,gBAAAod;IAAAA,iBAAA,AAAAxZ,eAAAwZ;QAAAC,JAAO7W;cAAP4W,VAAWxJ;AAAX,AACE,OAAC7a,+CAAOojB,gCAAe3U,QAAQoM;;AA1CnC,oBAAA,iBAAAoH,WAAA,AAAA;IAAAC,WAAAhB;AAAA,AAAA,QAAAD,4CAAAA,0CAAAgB,SAAAC,YAAAjB,uBAAAgB,SAAAC;;AA6CE,IAAAqC,aAAoB9O;IAApB+O,aAAA,AAAAxhB,cAAAuhB;IAAAE,eAAA,AAAAxd,gBAAAud;IAAAA,iBAAA,AAAA3Z,eAAA2Z;QAAAC,JAAOhX;cAAP+W,VAAW3J;IACLmF,QAAiB,AAACJ,4BAAWnR;IAC7BiW,gBAAiB,AAAChI,8BAAa7B;IAC/BpN,QAAiB,uGAAA,umBAAA,5sBAAM,AAACpC,uBAAO,AAAC9F,uDAAiBya,MAAM0E,iBACpC,kBAAA,AAAApZ,gDAAA,CAAA,kCAAA,AAAAC,4HAAA,gBAAA,AAAAA,oIAAA,2CAAA,uDAAA,iEAAA,3UAA8CmZ,4IAA8B1D,qPAElEA;IAC7B2D,uBAAiB,sDAAA,qDAAA,3GAAC7hB,8CAAM2L,gJAAe,AAACzO,+CAAOiR,2BAAU,AAAA,mFAAOxC;IAChEmW,mBAAiB,AAAC5kB,+CAAOojB,gCAAeuB,qBAAS9J;IACjDgK,WAAiB,AAAC1S,8BACC,AAAC2S,uBAAY,AAAA,mFAAOH,uBACpB,AAAC3kB,+CAAOiR,2BAAU,AAAA,mFAAO2T;AAXlD,AAYE,0EAAA,qDAAA,xHAAC9hB,8CAAM6hB,6JAAgBE;;AAzD3B,oBAAA,iBAAA1C,WAAA,AAAA;IAAAC,WAAAlB;AAAA,AAAA,QAAAD,4CAAAA,0CAAAkB,SAAAC,YAAAnB,uBAAAkB,SAAAC;;AA4DE,IAAA2C,aAAyBtP;IAAzBuP,aAAA,AAAAhiB,cAAA+hB;IAAAE,eAAA,AAAAhe,gBAAA+d;IAAAA,iBAAA,AAAAna,eAAAma;QAAAC,JAAOxX;IAAPwX,mBAAA,AAAAhe,gBAAA+d;IAAAA,iBAAA,AAAAna,eAAAma;WAAAC,PAASrY;cAAToY,VAAgBnK;IACVmF,QAAiB,AAACJ,4BAAWnR;IAC7BhB,QAAiB,AAACsS,6BAAYC,MAAMpT,KAAKoU;IACzC2D,uBAAiB,sDAAA,qDAAA,3GAAC7hB,8CAAM2L,gJAAe,AAACzO,+CAAOiR,2BAAU,AAAA,mFAAOxC;IAChEuV,eAAiB,AAACvE,+BAAckF,qBAAS/X;IACzCgY,kDAAqB,AAAC5kB,+CAAOojB,gCAAeY,aAAanJ,3HACtC,AAAC4E,oIAAc7S;IAClCiY,WAAiB,AAAC1S,8BACC,AAAC2S,uBAAY,AAAA,mFAAOH,uBACpB,AAAC3kB,+CAAOiR,2BAAU,AAAA,mFAAO2T;AATlD,AAUE,0EAAA,qDAAA,xHAAC9hB,8CAAM6hB,6JAAgBE;;AAtE3B,oBAAA,iBAAAxC,WAAA,AAAA;IAAAC,WAAApB;AAAA,AAAA,QAAAD,4CAAAA,0CAAAoB,SAAAC,YAAArB,uBAAAoB,SAAAC;;AAyEE,IAAMhP,SAAS7D;IACTyV,uBAAS,AAAC7R,6CAA4BC,OAAOmC;IAC7C0P,WAAS,AAACzP,gCAAejH,QAAQ6E,OAAO4R;AAF9C,AAGE,IAAAE,2CAAU5V;IAAV6V,2CAAyB,EAAI,EAAA,GAAA,WAAA,SAAA,EAAA,EAAA,WAAA,CAAA9X,gCAAA,8BAAA,KAAA,EAAA,EAAA,4CAAA,AAAAgG,4DAAA,QAAA,AAAAA,lCAAYC,oEAAAA,5PAAOF,mEAAAA,uCAAAA,gGAAAA,oEAAAA,UACrB,AAAC6L,sCAAqB7L,OAAO4R,sBAC7B1V;AAF3B,AAAA,6CAAA6V,5CAAU7V;;AAAV,IAAA,AAGE,8DAAA,vDAACb,+CAAOF,6DAAcmH,+BAAcuP;UAHtC,AAAA,6CAAAC,5CAAU5V;;AA5Ed,MAAA,KAAAvD,MAAA,CAAA,mEAAAiV;;;;;;;;;;;;;;;AAJH,CAAA,2DAAA,3DAAM1D;;AAAN,AAqFA,2CAAA,3CAAM8H,8FAAyB7W;AAA/B,AACE,oBAAI,eAAA,WAAA8W,1BAAC1S;AAAD,AAAO,OAACxH,uBAAO,AAAA,uFAAAka;GAAa,AAAA,mFAAO9W;AACrC,6DAAA,qDAAA,3GAAC3L,8CAAM2L,gJAEJ,KAAA1J,0BACE,AAAC2G,iBAAO,sDAAA,WAAA8Z,jEAAC1F;AAAD,AAAS,OAACra,eAAK,AAAA,sFAAA+f;wMADzB,iCAAA,KAAA,KAAA,9LACqC,AAAA,mFAAO/W,eAAU,AAAC9C;;AAE1D8C;;;AAEJ,kCAAA,lCAAM2U,4EAAgB3U,QAAQgH;AAA9B,AACE,iKAAS,AAAA,mFAAOhH,hOAAS,AAACoE,eAAK,oEAAA,pEAAC4S,6CAAKpa;AACnCoD;;AACA,OAAC6W,yCACC,EAAI,AAAC3M,6BAAMlK,QAAQgH,SACjB,EAAI,AAAC1O,+BAAQ,AAACE,gBAAMwO,UAClB,iBAAAiQ,8CAAUjW;IAAVkW,8CAA4B,AAAChmB,4CAAI,AAAA,yFAAU8O,SAAS,AAACxH,gBAAMwO;AAA3D,AAAA,gDAAAkQ,/CAAUlW;;AAAV,IAAA,AACE,IAAAmW,WAAgBnX;IAAhBoX,WAAwB,AAAChb,eAAK4K;AAA9B,AAAA,sIAAAmQ,SAAAC,uDAAAD,SAAAC,vMAACzC,gEAAAA,mFAAAA;UADH,AAAA,gDAAAsC,/CAAUjW;MAEV,uDAAA,vDAACd,+CAAOF,6DAAcmH,+BAAc,AAACuH,4BAAW1O,QAAQgH,UAC1D,AAACsL,+DAAgBtS,QAAQgH;;;AAEjC,sBAAA,tBAAMqQ,oDAAIrX,QAAQoM;AAAlB,AACE,IAAAkL,8CAAUtW;IAAVuW,8CAA4B,8IAAA,AAAA,9IAACrmB,4CAAI,AAAA,yFAAU8O;AAA3C,AAAA,gDAAAuX,/CAAUvW;;AAAV,IAAA,AACE,OAACzP,+CAAOojB,gCAAe3U,QAAQoM;UADjC,AAAA,gDAAAkL,/CAAUtW;;AAGZ,mCAAA,nCAAMwW,8EACH/b,IAAI8I,IAAUyD,IAAIyP;AADrB,AAEE,OAACxU,wBACC,AAAC+T,6CACC,AAAC/e,4CACC,WAAcc;AAAd,AAEE,OAACkK,wBACC,AAAChL,4CACC,WAAKgB;AAAL,AACE,IAAMI,MAAI,AAACqe,iBAAO3e;AAAlB,AAUK,IAAAQ,wBAAYyO;AAAZ,AAAA,cAAA,VAAUxO;;AAAV,AAAA,GAAA,WAAAD,VAAUC;AAAV,AACE,IAAA8K,2BAAgB,CAAemT,SAASje;AAAxC,AAAA,GAAA,CAAA8K,4BAAA;AAAA;AAAA,gBAAAA,ZAAYnD;AAAZ,AACE,CAAM9H,IAAIG,WAAE,CAAkBP,GAAGkI;;;AAFrC,eAAA,WAAA,VAAU3H;;;;AAAV;;;;AAGHH;IACN,AAAA,uFAASkL;IACfoT,eACFlc;;AAEJ,AAAA,4BAAA,oCAAA4B,hEAAMuS;AAAN,AAAA,IAAAgI,WAAA,AAAA;AAAA,AAAA,QAAAA;KAAA;AAAA,OAAAhI,wDAAA,CAAA,UAAA,MAAA,CAAA,UAAA;;;KAAA;AAAA,OAAAA,wDAAA,CAAA,UAAA,MAAA,CAAA,UAAA,MAAA,CAAA,UAAA;;;;AAAA,MAAA,KAAApS,MAAA,CAAA,8DAAA,AAAA;;;;;AAAA,CAAA,0DAAA,1DAAMoS,qEACF5P,QAAQ6X;AADZ,AAEG,IAAM9mB,OAAK,AAAA,mFAAOiP;AAAlB,AACE,+DAAA,xDAAC8X,2IAAU,AAACxe,kDAAc,AAACvG,gBAAM8kB,kBAAW9mB,KAAK8mB;;;AAHtD,CAAA,0DAAA,1DAAMjI,qEAIFnU,IAAI1K,KAAK8mB;;AAJb,AAKG,IACQtT,MAAI,AAAC/L,gBAAMzH;AADnB,AAAA,GAGE,QAAA,PAAMwT;AAAK9I;;AAHb,GAME,AAACmB,uBAAO,AAAA,uFAAS2H;AANnB;;AAAA,IAQQwT,aAAW,AAAChH,sBAAY,AAAA,sFAAQxM,KAAKsT;AAR7C,AAAA,GAUE,AAACjb,uBAAOmb;AAAY,eAAOtc;eAAI,AAACW,eAAKrL;eAAM8mB;;;;;;AAV7C,IAYQJ,WAAS,AAAC9Z,mBAAS,4CAAA,5CAAC1F;kBAAD+f;AAAA,AAAM,8DAAAA,vDAAC9mB,4CAAI6mB;;CAAcF;IAC5C7P,MAAS,AAACjV,gBAAM8kB;AAbxB,AAAA,AAgBE,eAAO,AAACL,iCAAgB/b,IAAI8I,IAAIyD,IAAIyP;eAAU,AAACrb,eAAKrL;eAAM8mB;;;;;;;;;;;;;AArB/D,CAAA,oDAAA,pDAAMjI;;AAAN,AAuBA,2BAAA,3BAAMqI,8DAASjY,QAAQ6X;AAAvB,AACE,oDAAA,7CAACjkB,+EAAS,AAACqE,4CAAI8B,eAAK,AAAC+d,wDAAS9X,QAAQ6X;;AAExC,AAAA;AAAA;;;mCAAA,nCAAaO;;AAAb,IAAAF,8DAAA,WACqBG,KAAIrY;AADzB,AAAA,IAAA1B,kBAAA,EAAA,SAAA,OAAA,fACqB+Z,oBAAAA;IADrB9Z,kBAAA,CAAA4Z,kCAAA,AAAA1Z,YAAAH;AAAA,AAAA,GAAA,GAAA,CAAAC,mBAAA;AAAA,QAAAA,gDAAAA,8DAAAA,hBACqB8Z,2CAAAA,tCAAIrY,2CAAAA;;AADzB,IAAAtB,kBAAA,CAAAyZ,kCAAA;AAAA,AAAA,GAAA,GAAA,CAAAzZ,mBAAA;AAAA,QAAAA,gDAAAA,8DAAAA,hBACqB2Z,2CAAAA,tCAAIrY,2CAAAA;;AADzB,MAAA,AAAArB,2BAAA,mCACqB0Z;;;;AADrB,AAAA,oCAAA,pCACGF,gFAAkBE,KAAIrY;AADzB,AAAA,GAAA,EAAA,GAAA,SAAA,aAAA,GAAA,CAAA,kEAAA,3FACqBqY,yBAAAA;AADrB,OACqBA,+DAAAA,KAAIrY;;AADzB,OAAAkY,4DACqBG,KAAIrY;;;;AADzB,AAGA,AAAA,AAAA,CAAA,AAAA,yEAAAlB,zEACEwZ;;AADF,CAAA,AAAA,AACEA,iGACA,WAAmBD,KAAIrY;AAAvB,AAAA,eAAA,XAAmBqY;AAAnB,AACE,OAAChR,qCAAoBrH,QAAQ,AAAUqY;;;AAH3C,AAAA,CAAA,AAAA,uEAAAvZ,vEAIEmB;;AAJF,CAAA,AAAA,AAIEA,+FACA,WAAmBoY,KAAIrY;AAAvB,AAAA,eAAA,XAAmBqY;AAAnB,AACE,8DAAA,mFAAA,1IAAClZ,+CAAOa,sJAAkB,AAAUqY;;;AANxC,AAAA,CAAA,AAAA,4EAAAvZ,5EAOEyZ;;AAPF,CAAA,AAAA,AAOEA,oGACA,WAAmBF,KAAIrZ;AAAvB,AAAA,eAAA,XAAmBqZ;AAAnB,AACE,IAAA1T,mBAAI,AAACzT,4CAAIsnB,gCAAqB,AAAUH;AAAxC,AAAA,oBAAA1T;AAAAA;;AACE,OAAC4D,6BAAY,AAAU8P;;;;AAV7B,AAAA,CAAA,AAAA,yEAAAvZ,zEAWE2Z;;AAXF,CAAA,AAAA,AAWEA,iGACA,WAAmBJ,KAAIrZ;AAAvB,AAAA,eAAA,XAAmBqZ;AAAnB,AACE,OAASA;;AAEb,8BAAA,9BAAMK,oEAAYC,cAAc3Y,QAAQnK;AAAxC,AACE,OAAC+K,6CAAK,WAAKgY,QAAQC,YAAYrf;AAAzB,AACE,GAAI,AAACsf,mCAAcF;AACjB,IAAM7W,IAAK,AAACoW,kCAAiB,AAAA,gFAAKS,SAAS5Y;IACrC+H,OAAK,4CAAA,WAAAgR,vDAAC9gB;AAAD,AAAM,yCAAA8gB,lCAACZ,mDAAmBnY;GAAS,AAAC7H,kBAAQ,AAAA,mFAAOygB;IACxDI,OAAK,4CAAA,WAAAC,vDAAChhB;AAAD,AAAM,mDAAAghB,5CAACrnB,6DAAM4H;GAAG3D;AAF3B,AAGE,OAACyS,8CAAMvG,EAAE,oDAAA,pDAAC3P,+CAAO2V,wFAAMiR;;AACzBH;;GACRF,cACA,AAACngB,gBAAM3C,QACP,AAACqH;;AAEL,2BAAA,3BAAOgc,8DAASpQ,KAAKxJ;AAArB,2EACO,4CAAA,WAAA6Z,iBAAAC,xEAACnhB,3EACJ,OAAC4P,+CAAOwR;AADL,AAAM,oBAAM,yEAAAF,oCAAAA,5GAACrQ,qCAAAA,uDAAAA;AAAP,AAAAsQ;;AAAA;;GAAoB9Z,KAAK,AAACpC;;AAGvC,6BAAA,7BAAMoc,kEAAWX,cAAc3Y,QAAQuZ;AAAvC,AACE,IAAMC,aAAW,AAACN,yBAAQ,AAACO,qBAAWX,oCAAeH;IAC/Ce,WAAW,WAAKrY;AAAL,AACE,mDAAA,WAAAsY,vDAAC1hB;AAAD,AAAM,yDAAA0hB,lDAAC/nB,4CAAIyP;GAASmY;;IACjCI,UAAW,AAAC7b,mBAAS2b,SAASH;AAHpC,AAIE,IAAAvf,qBAAA,mDAAA6f;AAAA,AAAA,YAAA3f,kBAAA,KAAA;AAAA,AAAA,IAAA2f,eAAAA;;AAAA,AAAA,IAAA1f,qBAAA,AAAA5F,cAAAslB;AAAA,AAAA,GAAA1f;AAAA,AAAA,IAAA0f,eAAA1f;AAAA,AAAA,GAAA,AAAAC,6BAAAyf;AAAA,IAAAxf,kBAkjD+C,AAAA6B,sBAAA2d;IAljD/Cvf,qBAAA,AAAAvH,gBAAAsH;IAAAyf,WAAA,AAAAtf,uBAAAF;AAAA,AAAA,GAAA,AAAA,iBAAAyf,WAAA;;AAAA,AAAA,GAAA,CAAAA,WAAAzf;AAAA,IAAA0f,aAAA,AAAAnlB,eAAAwF,gBAAA0f;QAAA,AAAAnoB,4CAAAooB,WAAA,IAAA,/DAAOhb;aAAP,AAAApN,4CAAAooB,WAAA,IAAA,pEAASnkB;AAAT,AAAA,AAAA,AAAA8E,uBAAAmf,SACE,AAACpB,4BAAWC,cAAc3Y,QAAQnK;;AADpC,eAAA,CAAAkkB,WAAA;;;;AAAA;;;;;AAAA,OAAAnf,qBAAA,AAAAC,gBAAAif,UAAA,AAAAG,yCAAA,AAAAlf,qBAAA8e;;AAAA,OAAAjf,qBAAA,AAAAC,gBAAAif,UAAA;;;AAAA,IAAAI,aAAA,AAAA1hB,gBAAAqhB;QAAA,AAAAjoB,4CAAAsoB,WAAA,IAAA,/DAAOlb;aAAP,AAAApN,4CAAAsoB,WAAA,IAAA,pEAASrkB;AAAT,AAAA,OAAAoF,yEAAA,AAAAgf,yCAAA,AAAA/e,eAAA2e,lHACE,AAACnB,4BAAWC,cAAc3Y,QAAQnK;;;AADpC;;;;GAAA,KAAA;;AAAA,AAAA,OAAAmE,mBAAiB4f;;AAGrB,6BAAA,7BAAMO,kEAAMpY,EAAE4K;AAAd,AACE,sDAAA,WAAAyN,iBAAAC,3EAAC9oB;AAAD,AAAS,oDAAA6oB,7CAAC/X,8DAAQ,mEAAAgY,iCAAAA,nGAACtY,kCAAAA,oDAAAA;GAAO,AAACuY,gBAAM3N,IAAIA;;AAEvC,yCAAA,zCAAM4N,0FAAoBC,WAAW3kB;AAArC,AACE,IAAMgiB,UAAQ,AAAA,sFAAU2C;IAClBC,OAAQ,8CAAA,9CAACvd,kDAAQ,AAACnK,gBAAM8kB;AAD9B,AAEE,OAACsC,2BACC,WAAK9Y;AAAL,AACE,OAAC9P,+CACC,WAAKmpB,EAAElhB;AAAP,AAAU,OAACnF,8CAAMqmB,EAAE,AAAC9oB,4CAAIimB,QAAQre,GAAG,AAAC5H,4CAAIyP,MAAM7H;GADhD,mCAEKihB;GACP5kB;;AAEN,AAAA;AAAA;;;gCAAA,hCAAaglB;;AAAb,IAAAF,wDAAA,WACkBG,KAAKN,WAAW3kB;AADlC,AAAA,IAAAyI,kBAAA,EAAA,SAAA,OAAA,fACkBwc,oBAAAA;IADlBvc,kBAAA,CAAAqc,+BAAA,AAAAnc,YAAAH;AAAA,AAAA,GAAA,GAAA,CAAAC,mBAAA;AAAA,QAAAA,gDAAAA,wEAAAA,1BACkBuc,qDAAAA,hDAAKN,qDAAAA,1CAAW3kB,qDAAAA;;AADlC,IAAA6I,kBAAA,CAAAkc,+BAAA;AAAA,AAAA,GAAA,GAAA,CAAAlc,mBAAA;AAAA,QAAAA,gDAAAA,wEAAAA,1BACkBoc,qDAAAA,hDAAKN,qDAAAA,1CAAW3kB,qDAAAA;;AADlC,MAAA,AAAA8I,2BAAA,6BACkBmc;;;;AADlB,AAAA,iCAAA,jCACGF,0EAAeE,KAAKN,WAAW3kB;AADlC,AAAA,GAAA,EAAA,GAAA,SAAA,aAAA,GAAA,CAAA,4DAAA,rFACkBilB,yBAAAA;AADlB,OACkBA,yDAAAA,KAAKN,WAAW3kB;;AADlC,OAAA8kB,sDACkBG,KAAKN,WAAW3kB;;;;AADlC,AAGA,AAAA,AAAA,CAAA,AAAA,qEAAAiJ,rEACEic;;AADF,CAAA,AAAA,AACEA,0FACA,WAAgB/b,EAAEwb,WAAW3kB;AAA7B,AAAA,YAAA,RAAgBmJ;AAAhB,AACE,GAAI,eAAA,dAAMwb;AACR3kB;;AACA,OAAC0kB,uCAAmBC,WAAW3kB;;;;AALrC,AAAA,CAAA,AAAA,sEAAAiJ,tEAOEkc;;AAPF,CAAA,AAAA,AAOEA,2FACA,WAAgBhc,EAAEwb,WAAW3kB;AAA7B,AAAA,YAAA,RAAgBmJ;AAAhB,AACE,oDAAA,7CAACpL,8EAAQ,AAACqE,4CAAIO,iBAAO3C;;;AATzB,AAAA,CAAA,AAAA,wEAAAiJ,xEAWEmc;;AAXF,CAAA,AAAA,AAWEA,6FACA,WAAgBjc,EAAEwb,WAAW3kB;AAA7B,AAAA,YAAA,RAAgBmJ;AAAhB,AACE,OAAChB,iBAAOnI;;;AAbZ,AAAA,CAAA,AAAA,uEAAAiJ,vEAeEoc;;AAfF,CAAA,AAAA,AAeEA,4FACA,WAAgBlc,EAAEwb,WAAW3kB;AAA7B,AAAA,YAAA,RAAgBmJ;AAAhB,AACE,GAAI,GAAA,eAAA,dAAOwb;AACT,OAAChiB,gBAAM,kDAAA,lDAAC+hB,uCAAmBC,8FAAY,AAAChiB,gBAAM3C;;AAC9C,OAAC2C,gBAAM3C;;;AAEb,wBAAA,xBAAOslB,wDAAMxC,cAAc3Y,QAAQuZ;AAAnC,AACE,IAAM6B,WAAS,iBAAAphB,qBAAA,8CAAAqhB;AAAA,AAAA,YAAAnhB,kBAAA,KAAA;AAAA,AAAA,IAAAmhB,eAAAA;;AAAA,AAAA,IAAAlhB,qBAAA,AAAA5F,cAAA8mB;AAAA,AAAA,GAAAlhB;AAAA,AAAA,IAAAkhB,eAAAlhB;AAAA,AAAA,GAAA,AAAAC,6BAAAihB;AAAA,IAAAhhB,kBAygDkC,AAAA6B,sBAAAmf;IAzgDlC/gB,qBAAA,AAAAvH,gBAAAsH;IAAAihB,WAAA,AAAA9gB,uBAAAF;AAAA,AAAA,GAAA,AAAA,iBAAAihB,WAAA;;AAAA,AAAA,GAAA,CAAAA,WAAAjhB;AAAA,WAAA,AAAAzF,eAAAwF,gBAAAkhB,tCAAMT;AAAN,AAAA,AAAA,AAAAngB,uBAAA2gB,SACE,uCAAA,rCAAM,AAACG,8BAASX,OACd,iBAAMlV,KAAG,AAACuS,kCAAiB,AAAA,uFAAS2C,MAAM9a;IACpCxI,UAAQ,AAAC2gB,kCAAiB,AAAA,wFAAU2C,MAAM9a;AADhD,AAEE,OAAC0b,6DAAe9V,GAAGpO;KAHvB;;AADF,eAAA,CAAA+jB,WAAA;;;;AAAA;;;;;AAAA,OAAA3gB,qBAAA,AAAAC,gBAAAygB,UAAA,AAAAE,oCAAA,AAAAzgB,qBAAAsgB;;AAAA,OAAAzgB,qBAAA,AAAAC,gBAAAygB,UAAA;;;AAAA,WAAA,AAAA9iB,gBAAA6iB,vBAAMP;AAAN,AAAA,OAAA7f,eACE,uCAAA,rCAAM,AAACwgB,8BAASX,OACd,iBAAMlV,KAAG,AAACuS,kCAAiB,AAAA,uFAAS2C,MAAM9a;IACpCxI,UAAQ,AAAC2gB,kCAAiB,AAAA,wFAAU2C,MAAM9a;AADhD,AAEE,OAAC0b,6DAAe9V,GAAGpO;WAJzB,AAAAgkB,oCAAA,AAAAtgB,eAAAmgB,zDACE;;;AADF;;;;GAAA,KAAA;;AAAA,AAAA,OAAArhB,mBAAW2e;;AAA1B,AAKE,IAAA3e,qBAAA,8CAAA2hB;AAAA,AAAA,YAAAzhB,kBAAA,KAAA;AAAA,AAAA,IAAAyhB,eAAAA;;AAAA,AAAA,IAAAxhB,qBAAA,AAAA5F,cAAAonB;AAAA,AAAA,GAAAxhB;AAAA,AAAA,IAAAwhB,eAAAxhB;AAAA,AAAA,GAAA,AAAAC,6BAAAuhB;AAAA,IAAAthB,kBAogD+C,AAAA6B,sBAAAyf;IApgD/CrhB,qBAAA,AAAAvH,gBAAAsH;IAAAuhB,WAAA,AAAAphB,uBAAAF;AAAA,AAAA,GAAA,AAAA,iBAAAuhB,WAAA;;AAAA,AAAA,GAAA,CAAAA,WAAAvhB;AAAA,YAAA,AAAAzF,eAAAwF,gBAAAwhB,vCAAMxa;AAAN,AAAA,AAAA,AAAA1G,uBAAAihB,SACE,AAAChb,6CACC;kBAAKmb,YAAYC;AAAjB,AACE,oBAAID;AACF,OAACE,8BAAcF,YAAYC;;AAC3BA;;;CACJZ,SACA/Z;;AAPJ,eAAA,CAAAwa,WAAA;;;;AAAA;;;;;AAAA,OAAAjhB,qBAAA,AAAAC,gBAAA+gB,UAAA,AAAAE,oCAAA,AAAA/gB,qBAAA4gB;;AAAA,OAAA/gB,qBAAA,AAAAC,gBAAA+gB,UAAA;;;AAAA,YAAA,AAAApjB,gBAAAmjB,xBAAMta;AAAN,AAAA,OAAApG,eACE,AAAC2F,6CACC;kBAAKmb,YAAYC;AAAjB,AACE,oBAAID;AACF,OAACE,8BAAcF,YAAYC;;AAC3BA;;;iBALR,AAAAF,oCAAA,AAAA5gB,eAAAygB,nEAMIP,SACA/Z;;;AAPJ;;;;GAAA,KAAA;;AAAA,AAAA,OAAArH,mBAAYuf;;AAShB,AAAA,qBAAA,6BAAAlc,lDAAMkf;AAAN,AAAA,IAAAL,qBAAA;AAAA,AAAA,IAAAC,0BAAA,AAAA;AAAA,AAAA,IAAAC,wBAAA;;AAAA,AAAA,GAAA,CAAAA,wBAAAD;AAAA,AAAA,AAAAD,wBAAA,CAAA,UAAAE;;AAAA,eAAA,CAAAA,wBAAA;;;;AAAA;;;;AAAA,IAAAC,uBAAA,EAAA,CAAA,MAAA,AAAAH,4BAAA,AAAA,KAAAI,qBAAA,AAAAJ,yBAAA,KAAA,IAAA,OAAA;AAAA,AAAA,OAAAK,wDAAA,CAAA,UAAA,MAAAF;;;AAAA,AAAA,CAAA,0DAAA,1DAAME,qEAAGI,EAAIC;AAAb,AACE,IAAMC,WAAc,+DAAA,/DAACC,oBAASxsB,yCAAcqsB;AAAxB,AAA2B,OAACI,8BAAeJ;;IACzD7B,OAAc,AAAA,qFAAQ+B;IACtBlE,gBAAc,AAACqE,gCAAiBlC;IAChCmC,YAAc,AAACC,4BAAapC;IAC5BqC,eAAc,AAACpqB,gBAAM4lB;IACrByE,QAAc,AAAA,oFAAQP;IAEtBQ,WAAc,AAACjrB,+CAAO6qB,UAAU,4CAAA,5CAAChlB,sGAAYmlB;IAC7CT,QAAc,iBAAAW,WAAQX;AAAR,AAAA,GACE,AAACjlB,4BAAYilB;AADf,uCAAAW,hCACkBC;;AADlBD;;;IAEdE,SAAc,AAAA,sFAAQb;IACtB3c,uCAAkB,KAAAjL,yBAAA,iCAAA,mCAAA,mCAAA,KAAA,KAAA,5KACF,AAACuL,mLAAY,AAAA,iFAAMuc,UAAUD;IAC7CrD,yDAAkBvZ,pBACF,AAACqX,4BAAGmG,rDACJ,AAACvF,6DAAQoF;AAf/B,AAgBE,IAAAI,WAASlE;IAATkE,eAAA,kBACE,AAAA,oFAAOd,QACP,6CAAA,WAAAe,xDAAC9c;AAAD,AAAO,OAAC7G,cAAI,+CAAA2jB,iBAAA,hEAAChY,oEAAWyX;aAF1BM,VAEEA;IAFFA,eAAA,mJAAAA,jIAGE,AAACrZ,eAAK0U,mCAAcH,gBACpB,iDAAA8E,jDAACnE,2BAAUX,cAAc3Y;IAJ3Byd,eAAA,yIAAAA,vHAKE,AAACrZ,eAAKqX,8BAAS9C,gBACf,4CAAA8E,5CAACtC,sBAAKxC,cAAc3Y;AANtB,AAAA,AAQE,sJAAAyd,/IAAC7C,+BAAcE,KAAK,AAAA,iGAAc+B;;;;AAzBxC,CAAA,6CAAA,7CAAMN;;AAAN;AAAA,CAAA,uCAAA,WAAAC,lDAAMD;AAAN,AAAA,IAAAE,WAAA,AAAAjkB,gBAAAgkB;IAAAA,eAAA,AAAApgB,eAAAogB;AAAA,AAAA,IAAAE,qBAAA;AAAA,AAAA,OAAAA,wDAAAD,SAAAD;;;AAAA","names":["datascript.query/*query-cache*","datascript.lru/cache","this__5300__auto__","k__5301__auto__","this__5302__auto__","k94602","else__5303__auto__","G__94621","cljs.core/Keyword","rels","sources","rules","cljs.core.get","__extmap","this__5320__auto__","f__5321__auto__","init__5322__auto__","cljs.core.reduce","ret__5323__auto__","p__94628","vec__94629","k__5324__auto__","cljs.core.nth","v__5325__auto__","this__5315__auto__","writer__5316__auto__","opts__5317__auto__","pr-pair__5318__auto__","keyval__5319__auto__","cljs.core/pr-sequential-writer","cljs.core.concat","cljs.core/PersistentVector","G__94601","cljs.core/RecordIter","cljs.core/-iterator","cljs.core/nil-iter","this__5298__auto__","__meta","this__5295__auto__","__hash","this__5304__auto__","cljs.core/count","this__5296__auto__","h__5111__auto__","coll__5297__auto__","cljs.core/hash-unordered-coll","this94603","other94604","cljs.core._EQ_","this__5310__auto__","k__5311__auto__","cljs.core/contains?","cljs.core.dissoc","cljs.core/-with-meta","cljs.core.into","cljs.core/not-empty","this__5307__auto__","G__94670","this__5308__auto__","k__5309__auto__","pred__94676","cljs.core/keyword-identical?","expr__94677","cljs.core.assoc","this__5313__auto__","cljs.core/seq","cljs.core/MapEntry","this__5299__auto__","this__5305__auto__","entry__5306__auto__","cljs.core/vector?","cljs.core/-nth","cljs.core/-conj","datascript.query/Context","this__5346__auto__","cljs.core/List","writer__5347__auto__","cljs.core/-write","G__94609","extmap__5342__auto__","G__94712","cljs.core/record?","datascript.query/->Context","datascript.query/map->Context","k94718","G__94729","attrs","tuples","p__94740","vec__94741","G__94717","this94719","other94720","G__94760","pred__94762","expr__94763","datascript.query/Relation","G__94722","G__94768","datascript.query/->Relation","datascript.query/map->Relation","datascript.query/intersect-keys","attrs1","attrs2","clojure.set.intersection","cljs.core/set","cljs.core/keys","datascript.query/same-keys?","a","b","p1__94773#","cljs.core/every?","p1__94774#","datascript.query/looks-like?","pattern","form","cljs.core/sequential?","cljs.core/Symbol","cljs.core/last","p__94789","vec__94790","pattern-el","form-el","cljs.core.map","cljs.core/vector","cljs.core/butlast","p__94794","vec__94800","datascript.query/source?","sym","cljs.core/first","cljs.core/name","datascript.query/free-var?","datascript.query/attr?","datascript.query/lookup-ref?","me.tonsky.persistent-sorted-set.arrays/array?","datascript.query/join-tuples","t1","idxs1","t2","idxs2","l1","l2","res","me.tonsky.persistent-sorted-set.arrays/make-array","n__5593__auto__","i","datascript.query/sum-rel*","attrs-a","tuples-a","attrs-b","tuples-b","idxb->idxa","cljs.core/vec","iter__5480__auto__","s__94853","cljs.core/LazySeq","temp__5823__auto__","cljs.core/chunked-seq?","c__5478__auto__","size__5479__auto__","b__94855","cljs.core/chunk-buffer","i__94854","vec__94862","cljs.core/chunk-append","cljs.core/chunk-cons","cljs.core/chunk","iter__94852","cljs.core/chunk-rest","vec__94876","cljs.core/cons","cljs.core/rest","idx-b","tlen","cljs.core/vals","cljs.core/max","tuples'","cljs.core/persistent!","acc","tuple-b","tuple'","seq__94890","chunk__94891","count__94892","i__94893","vec__94922","c__5525__auto__","cljs.core/chunk-first","vec__94938","cljs.core/next","idx-a","cljs.core.conj_BANG_","cljs.core/transient","datascript.query/sum-rel","map__94947","cljs.core/--destructure-map","map__94948","cljs.core/empty?","cljs.core.ex_info","cljs.core.pr_str","cljs.core/number?","number-attrs","cljs.core/zipmap","cljs.core.range","G__94958","G__94959","var_args","G__94970","datascript.query/prod-rel","js/Error","rel1","rel2","cljs.core/to-array","datascript.query/parse-rules","cljs.reader.read_string","datascript.parser/parse-rules","cljs.core/group-by","cljs.core/ffirst","datascript.query/empty-rel","binding","vars","datascript.parser/collect-vars-distinct","datascript$query$IBinding$in__GT_rel$dyn","x__5350__auto__","m__5351__auto__","datascript.query/in->rel","goog/typeOf","m__5349__auto__","cljs.core/missing-protocol","datascript.query/IBinding","value","cljs.core/PROTOCOL_SENTINEL","datascript.parser/BindIgnore","_","datascript.query.prod_rel","datascript.parser/BindScalar","cljs.core.get_in","cljs.core.into_array","datascript.parser/BindColl","coll","datascript.db/seqable?","datascript.parser/source","p1__95007#","datascript.parser/BindTuple","p1__95009#","p2__95011#","p__95147","vec__95150","datascript.query/resolve-in","context","datascript.parser/SrcVar","cljs.core.update","cljs.core/assoc","datascript.parser/RulesVar","cljs.core/conj","datascript.query/resolve-ins","bindings","values","cb","cv","p1__95156#","cljs.core.mapv","cljs.core/meta","p1__95158#","datascript.query/*lookup-attrs*","datascript.query/*implicit-source*","datascript.query/getter-fn","attr","idx","cljs.core/int?","tuple","eid","datascript.db/entid","datascript.query/tuple-key-fn","common-attrs","n","getters-arr","cljs.core.list_STAR_","p1__95229#","datascript.query/-group-by","f","init","ret","x","k","cljs.core.assoc_BANG_","cljs.core.conj","datascript.query/hash-attrs","key-fn","datascript.query/hash-join","tuples1","tuples2","keep-attrs1","keep-attrs2","cljs.core/reduce-kv","vec","keep-idxs1","keep-idxs2","cljs.core/->Eduction","key-fn1","key-fn2","hash","new-tuples","tuple2","key","temp__5825__auto__","tuple1","datascript.query/subtract-rel","map__95264","map__95265","key-fn-b","key-fn-a","p1__95262#","cljs.core/filterv","G__95273","datascript.query/rel-with-attr","p1__95274#","cljs.core/some","datascript.query/substitute-constant","temp__5827__auto__","rel","cljs.core/fnext","datascript.query/substitute-constants","p1__95289#","or__5002__auto__","datascript.query/resolve-pattern-lookup-refs","source","cljs.core/native-satisfies?","datascript.db/IDB","vec__95297","e","v","tx","e'","datascript.db/entid-strict","v'","and__5000__auto__","datascript.db/ref?","tx'","cljs.core.subvec","datascript.query/lookup-pattern-db","db","search-pattern","p1__95304#","datoms","datascript.db/-search","attr->prop","cljs.core.filter","p__95307","vec__95308","s","datascript.query/matches-pattern?","t","p","datascript.query/lookup-pattern-coll","data","p1__95315#","attr->idx","p__95321","vec__95322","datascript.query/normalize-pattern-clause","clause","datascript.query/lookup-pattern","datascript.db/ISearch","datascript.query/collapse-rels","new-rel","datascript.query/context-resolve-val","fexpr__95354","datascript.query/rel-contains-attrs?","p1__95357#","datascript.query/rel-prod-by-attrs","p1__95364#","production","p1__95365#","cljs.core.remove","datascript.query/-call-fn","args","len","static-args","tuples-args","arg","me.tonsky.persistent-sorted-set.arrays/aclone","tuple-idx","cljs.core.apply","datascript.query/resolve-sym","datascript.query/filter-by-pred","vec__95401","vec__95404","seq__95405","first__95406","vec__95407","pred","datascript.built-ins/query-fns","cljs.core/symbol?","tuple-pred","p1__95399#","datascript.query/bind-by-fn","vec__95413","vec__95416","seq__95417","first__95418","vec__95419","out","datascript.parser/parse-binding","fun","tuple-fn","s__95425","b__95427","i__95426","iter__95424","val","datascript.query/rule?","head","cljs.core/second","datascript.query/rule-seqid","cljs.core.atom","datascript.query/expand-rule","used-args","vec__95440","seq__95441","first__95442","rule","call-args","seqid","cljs.core.swap_BANG_","cljs.core/inc","branches","s__95450","b__95452","i__95451","vec__95467","seq__95468","first__95469","vec__95470","seq__95471","first__95472","iter__95449","vec__95474","seq__95475","first__95476","vec__95477","seq__95478","first__95479","branch","rule-args","clauses","replacements","p1__95439#","clojure.walk/postwalk","x__49311__auto__","cljs.core.symbol","datascript.query/remove-pairs","xs","ys","pairs","p__95491","vec__95492","y","datascript.query/rule-gen-guards","rule-clause","vec__95499","seq__95500","first__95501","prev-call-args","s__95506","b__95508","i__95507","vec__95518","iter__95505","vec__95521","prev-args","datascript.query/walk-collect","cljs.core/deref","p1__95527#","datascript.query/collect-vars","datascript.query/split-guards","guards","bound-vars","p__95546","vec__95547","vec__95550","seq__95551","first__95552","datascript.query/solve-rule","final-attrs","final-attrs-map","solve","prefix-context","datascript.query/-resolve-clause","empty-rels?","p1__95553#","stack","frame","vec__95612","vec__95615","seq__95616","first__95617","next-clauses","p1__95555#","cljs.core/split-with","datascript.util/distinct-by","datascript.query/-collect","vec__95619","seq__95620","first__95621","vec__95622","active-gs","pending-gs","p1__95557#","prefix-clauses","s__95626","b__95628","i__95627","iter__95625","datascript.util.concatv","datascript.query/dynamic-lookup-attrs","vec__95634","G__95637","datascript.query/limit-rel","attrs'","cljs.core/select-keys","datascript.query/limit-context","p1__95653#","cljs.core.keep","datascript.query/bound-vars","p1__95654#","cljs.core.mapcat","datascript.query/check-bound","bound","clojure.set/subset?","missing","clojure.set.difference","datascript.query/check-free-same","free","p1__95672#","cljs.core/=","datascript.query/check-free-subset","seq__95686","chunk__95687","count__95688","i__95689","cljs.core.prn","G__95714","datascript.query._resolve_clause","orig-clause","pred__95715","expr__95716","G__95718","G__95719","G__95720","G__95721","G__95723","G__95724","G__95736","G__95737","G__95748","G__95749","G__95757","G__95758","G__95770","G__95771","G__95775","G__95776","G__95780","G__95781","G__95786","G__95787","cljs.core/nfirst","vec__95728","seq__95729","first__95730","source-sym","rest","*implicit-source*-orig-val__95732","*implicit-source*-temp-val__95733","vec__95742","seq__95743","first__95744","contexts","p1__95706#","datascript.query/resolve-clause","p1__95707#","vec__95750","seq__95751","first__95752","vec__95753","seq__95754","first__95755","req-vars","vec__95763","seq__95764","first__95765","join-context","p1__95708#","p1__95709#","sum-rel","vec__95772","seq__95773","first__95774","vec__95777","seq__95778","first__95779","negation-vars","context'","negation-context","negation","datascript.util/single","vec__95783","seq__95784","first__95785","pattern'","relation","*lookup-attrs*-orig-val__95791","*lookup-attrs*-temp-val__95792","datascript.query/short-circuit-empty-rel","p1__95794#","p1__95795#","cljs.core.comp","*implicit-source*-orig-val__95800","*implicit-source*-temp-val__95801","G__95802","G__95803","datascript.query/-q","*implicit-source*-orig-val__95814","*implicit-source*-temp-val__95815","datascript.query/-collect-tuples","copy-map","cljs.core/aclone","cljs.core/cat","G__95881","symbols","datascript.query._collect","keep-attrs","p1__95872#","datascript.query/collect","datascript$query$IContextResolve$_context_resolve$dyn","datascript.query/-context-resolve","datascript.query/IContextResolve","var","datascript.parser/Variable","datascript.parser/PlainSymbol","datascript.built-ins/aggregates","datascript.parser/Constant","datascript.query/-aggregate","find-elements","element","fixed-value","datascript.parser/aggregate?","p1__95905#","vals","p1__95906#","datascript.query/idxs-of","p1__95907#","p2__95908#","cljs.core/nil?","datascript.query/aggregate","resultset","group-idxs","cljs.core/complement","group-fn","p1__95910#","grouped","s__95912","b__95914","i__95913","vec__95919","iter__95911","vec__95922","datascript.query/map*","p1__95925#","p2__95926#","cljs.core/empty","datascript.query/tuples->return-map","return-map","idxs","m","datascript$query$IPostProcess$_post_process$dyn","datascript.query/-post-process","datascript.query/IPostProcess","find","datascript.parser/FindRel","datascript.parser/FindColl","datascript.parser/FindScalar","datascript.parser/FindTuple","datascript.query/pull","resolved","s__95932","b__95934","i__95933","iter__95931","datascript.parser/pull?","datascript.pull_api.parse_opts","s__95943","b__95945","i__95944","iter__95942","parsed-opts","el","datascript.pull-api/pull-impl","args__5732__auto__","len__5726__auto__","i__5727__auto__","argseq__5733__auto__","cljs.core/IndexedSeq","datascript.query/q","seq95949","G__95950","self__5711__auto__","q","inputs","parsed-q","datascript.lru/-get","datascript.parser/parse-query","datascript.parser/find-elements","find-vars","datascript.parser/find-vars","result-arity","with","all-vars","G__95956","datascript.parser/query->map","wheres","G__95961","p1__95948#"],"sourcesContent":["(ns ^:no-doc datascript.query\n  (:require\n    [#?(:cljs cljs.reader :clj clojure.edn) :as edn]\n    [clojure.set :as set]\n    [clojure.string :as str]\n    [clojure.walk :as walk]\n    [datascript.built-ins :as built-ins]\n    [datascript.db :as db]\n    [me.tonsky.persistent-sorted-set.arrays :as da]\n    [datascript.lru :as lru]\n    [datascript.impl.entity :as de]\n    [datascript.parser :as dp #?@(:cljs [:refer [BindColl BindIgnore BindScalar BindTuple Constant\n                                                 FindColl FindRel FindScalar FindTuple PlainSymbol\n                                                 RulesVar SrcVar Variable]])]\n    [datascript.pull-api :as dpa]\n    [datascript.util :as util])\n  #?(:clj\n     (:import\n       [clojure.lang ILookup LazilyPersistentVector]\n       [datascript.parser BindColl BindIgnore BindScalar BindTuple\n        Constant FindColl FindRel FindScalar FindTuple PlainSymbol\n        RulesVar SrcVar Variable])))\n\n#?(:clj (set! *warn-on-reflection* true))\n\n;; ----------------------------------------------------------------------------\n\n(def ^:dynamic *query-cache*\n  (lru/cache 100))\n\n(declare -collect collect -resolve-clause resolve-clause)\n\n;; Records\n\n(defrecord Context [rels sources rules])\n\n;; attrs:\n;;    {?e 0, ?v 1} or {?e2 \"a\", ?age \"v\"}\n;; tuples:\n;;    [#js [1 \"Ivan\" 5 14] ...]\n;; or [(Datom. 2 \"Oleg\" 1 55) ...]\n(defrecord Relation [attrs tuples])\n\n#?(:clj\n   (defmethod print-method Relation [r, ^java.io.Writer w]\n     (.write w \"#Relation{:attrs \")\n     (.write w (pr-str (:attrs r)))\n     (.write w \", :tuples [\")\n     (.write w (str/join \" \" (map seq (:tuples r))))\n     (.write w \"]}\")))\n\n\n;; Utilities\n\n(defn intersect-keys [attrs1 attrs2]\n  (set/intersection (set (keys attrs1))\n    (set (keys attrs2))))\n\n(defn same-keys? [a b]\n  (and (= (count a) (count b))\n    (every? #(contains? b %) (keys a))\n    (every? #(contains? a %) (keys b))))\n\n(defn- looks-like? [pattern form]\n  (cond\n    (= '_ pattern)\n    true\n    (= '[*] pattern)\n    (sequential? form)\n    (symbol? pattern)\n    (= form pattern)\n    (sequential? pattern)\n    (if (= (last pattern) '*)\n      (and (sequential? form)\n        (every? (fn [[pattern-el form-el]] (looks-like? pattern-el form-el))\n          (map vector (butlast pattern) form)))\n      (and (sequential? form)\n        (= (count form) (count pattern))\n        (every? (fn [[pattern-el form-el]] (looks-like? pattern-el form-el))\n          (map vector pattern form))))\n    :else ;; (predicate? pattern)\n    (pattern form)))\n\n(defn source? [sym]\n  (and (symbol? sym)\n    (= \\$ (first (name sym)))))\n\n(defn free-var? [sym]\n  (and (symbol? sym)\n    (= \\? (first (name sym)))))\n\n(defn attr? [form]\n  (or (keyword? form) (string? form)))\n\n(defn lookup-ref? [form]\n  (and\n    (or (sequential? form) (da/array? form))\n    (= 2 (count form))\n    (attr? (first form))))\n\n;; Relation algebra\n\n#?(:clj (set! *unchecked-math* true))\n\n#?(:clj\n   (defn join-tuples [t1 ^{:tag \"[[Ljava.lang.Object;\"} idxs1\n                      t2 ^{:tag \"[[Ljava.lang.Object;\"} idxs2]\n     (let [l1  (alength idxs1)\n           l2  (alength idxs2)\n           res (da/make-array (+ l1 l2))]\n       (if (.isArray (.getClass ^Object t1))\n         (dotimes [i l1] (aset res i (aget ^objects t1 (aget idxs1 i))))\n         (dotimes [i l1] (aset res i (get t1 (aget idxs1 i)))))\n       (if (.isArray (.getClass ^Object t2))\n         (dotimes [i l2] (aset res (+ l1 i) (get ^objects t2 (aget idxs2 i))))\n         (dotimes [i l2] (aset res (+ l1 i) (get t2 (aget idxs2 i)))))\n       res))\n   :cljs\n   (defn join-tuples [t1 idxs1\n                      t2 idxs2]\n     (let [l1  (alength idxs1)\n           l2  (alength idxs2)\n           res (da/make-array (+ l1 l2))]\n       (dotimes [i l1] (aset res i (da/aget t1 (aget idxs1 i))))\n       (dotimes [i l2] (aset res (+ l1 i) (da/aget t2 (aget idxs2 i))))\n       res)))\n\n#?(:clj (set! *unchecked-math* false))\n\n(defn- sum-rel* [attrs-a tuples-a attrs-b tuples-b]\n  (let [idxb->idxa (vec (for [[sym idx-b] attrs-b]\n                          [idx-b (attrs-a sym)]))\n        tlen    (->> (vals attrs-a) (reduce max) (inc))\n        tuples' (persistent!\n                  (reduce\n                    (fn [acc tuple-b]\n                      (let [tuple' (da/make-array tlen)]\n                        (doseq [[idx-b idx-a] idxb->idxa]\n                          (aset tuple' idx-a (#?(:cljs da/aget :clj get) tuple-b idx-b)))\n                        (conj! acc tuple')))\n                    (transient (vec tuples-a))\n                    tuples-b))]\n    (Relation. attrs-a tuples')))\n\n(defn sum-rel [a b]\n  (let [{attrs-a :attrs, tuples-a :tuples} a\n        {attrs-b :attrs, tuples-b :tuples} b]\n    (cond\n      (= attrs-a attrs-b)\n      (Relation. attrs-a (into (vec tuples-a) tuples-b))\n\n      ;; BEFORE checking same-keys\n      ;; because one rel could have had its resolution shortcircuited\n      (empty? tuples-a) b\n      (empty? tuples-b) a\n\n      (not (same-keys? attrs-a attrs-b))\n      (util/raise \"Can\u2019t sum relations with different attrs: \" attrs-a \" and \" attrs-b\n        {:error :query/where})\n\n      (every? number? (vals attrs-a)) ;; can\u2019t conj into BTSetIter\n      (sum-rel* attrs-a tuples-a attrs-b tuples-b)\n\n      :else\n      (let [number-attrs (zipmap (keys attrs-a) (range))]\n        (-> (sum-rel* number-attrs [] attrs-a tuples-a)\n          (sum-rel b))))))\n\n(defn prod-rel\n  ([] (Relation. {} [(da/make-array 0)]))\n  ([rel1 rel2]\n   (let [attrs1 (keys (:attrs rel1))\n         attrs2 (keys (:attrs rel2))\n         idxs1  (to-array (map (:attrs rel1) attrs1))\n         idxs2  (to-array (map (:attrs rel2) attrs2))]\n     (Relation.\n       (zipmap (concat attrs1 attrs2) (range))\n       (persistent!\n         (reduce\n           (fn [acc t1]\n             (reduce (fn [acc t2]\n                       (conj! acc (join-tuples t1 idxs1 t2 idxs2)))\n               acc (:tuples rel2)))\n           (transient []) (:tuples rel1)))))))\n\n;;\n\n(defn parse-rules [rules]\n  (let [rules (if (string? rules) (edn/read-string rules) rules)] ;; for datascript.js interop\n    (dp/parse-rules rules) ;; validation\n    (group-by ffirst rules)))\n\n(defn empty-rel [binding]\n  (let [vars (->> (dp/collect-vars-distinct binding)\n               (map :symbol))]\n    (Relation. (zipmap vars (range)) [])))\n\n(defprotocol IBinding\n  (in->rel [binding value]))\n\n(extend-protocol IBinding\n  BindIgnore\n  (in->rel [_ _]\n    (prod-rel))\n  \n  BindScalar\n  (in->rel [binding value]\n    (Relation. {(get-in binding [:variable :symbol]) 0} [(into-array [value])]))\n  \n  BindColl\n  (in->rel [binding coll]\n    (cond\n      (not (db/seqable? coll))\n      (util/raise \"Cannot bind value \" coll \" to collection \" (dp/source binding)\n        {:error :query/binding, :value coll, :binding (dp/source binding)})\n      (empty? coll)\n      (empty-rel binding)\n      :else\n      (->> coll\n        (map #(in->rel (:binding binding) %))\n        (reduce sum-rel))))\n  \n  BindTuple\n  (in->rel [binding coll]\n    (cond\n      (not (db/seqable? coll))\n      (util/raise \"Cannot bind value \" coll \" to tuple \" (dp/source binding)\n        {:error :query/binding, :value coll, :binding (dp/source binding)})\n      (< (count coll) (count (:bindings binding)))\n      (util/raise \"Not enough elements in a collection \" coll \" to bind tuple \" (dp/source binding)\n        {:error :query/binding, :value coll, :binding (dp/source binding)})\n      :else\n      (reduce prod-rel\n        (map #(in->rel %1 %2) (:bindings binding) coll)))))\n\n(defn resolve-in [context [binding value]]\n  (cond\n    (and (instance? BindScalar binding)\n      (instance? SrcVar (:variable binding)))\n    (update context :sources assoc (get-in binding [:variable :symbol]) value)\n    (and (instance? BindScalar binding)\n      (instance? RulesVar (:variable binding)))\n    (assoc context :rules (parse-rules value))\n    :else\n    (update context :rels conj (in->rel binding value))))\n\n(defn resolve-ins [context bindings values]\n  (let [cb (count bindings)\n        cv (count values)]\n    (cond\n      (< cb cv)\n      (util/raise \"Extra inputs passed, expected: \" (mapv #(:source (meta %)) bindings) \", got: \" cv\n        {:error :query/inputs :expected bindings :got values})\n\n      (> cb cv)\n      (util/raise \"Too few inputs passed, expected: \" (mapv #(:source (meta %)) bindings) \", got: \" cv\n        {:error :query/inputs :expected bindings :got values})\n\n      :else\n      (reduce resolve-in context (zipmap bindings values)))))\n\n;;\n\n(def ^{:dynamic true\n       :doc \"List of symbols in current pattern that might potentiall be resolved to refs\"}\n  *lookup-attrs* nil)\n\n(def ^{:dynamic true\n       :doc \"Default pattern source. Lookup refs, patterns, rules will be resolved with it\"}\n  *implicit-source* nil)\n\n(defn getter-fn [attrs attr]\n  (let [idx (attrs attr)]\n    (if (contains? *lookup-attrs* attr)\n      (if (int? idx)\n        (let [idx (int idx)]\n          (fn contained-int-getter-fn [tuple]\n            (let [eid #?(:cljs (da/aget tuple idx)\n                         :clj (if (.isArray (.getClass ^Object tuple))\n                                (aget ^objects tuple idx)\n                                (nth tuple idx)))]\n              (cond\n                (number? eid)     eid ;; quick path to avoid fn call\n                (sequential? eid) (db/entid *implicit-source* eid)\n                (da/array? eid)   (db/entid *implicit-source* eid)\n                :else             eid))))\n        ;; If the index is not an int?, the target can never be an array\n        (fn contained-getter-fn [tuple]\n          (let [eid #?(:cljs (da/aget tuple idx)\n                       :clj (.valAt ^ILookup tuple idx))]\n            (cond\n              (number? eid)     eid ;; quick path to avoid fn call\n              (sequential? eid) (db/entid *implicit-source* eid)\n              (da/array? eid)   (db/entid *implicit-source* eid)\n              :else             eid))))\n      (if (int? idx)\n        (let [idx (int idx)]\n          (fn int-getter [tuple]\n            #?(:cljs (da/aget tuple idx)\n               :clj (if (.isArray (.getClass ^Object tuple))\n                      (aget ^objects tuple idx)\n                      (nth tuple idx)))))\n        ;; If the index is not an int?, the target can never be an array\n        (fn getter [tuple]\n          #?(:cljs (da/aget tuple idx)\n             :clj (.valAt ^ILookup tuple idx)))))))\n\n(defn tuple-key-fn\n  [attrs common-attrs]\n  (let [n (count common-attrs)]\n    (if (== n 1)\n      (getter-fn attrs (first common-attrs))\n      (let [^objects getters-arr #?(:clj (into-array Object common-attrs)\n                                    :cljs (into-array common-attrs))]\n        (loop [i 0]\n          (if (< i n)\n            (do\n              (aset getters-arr i (getter-fn attrs (aget getters-arr i)))\n              (recur (unchecked-inc i)))\n            #?(:clj\n               (fn [tuple]\n                 (let [^objects arr (make-array Object n)]\n                   (loop [i 0]\n                     (if (< i n)\n                       (do\n                         (aset arr i ((aget getters-arr i) tuple))\n                         (recur (unchecked-inc i)))\n                       (LazilyPersistentVector/createOwning arr)))))\n               :cljs (fn [tuple]\n                       (list* (.map getters-arr #(% tuple)))))))))))\n\n(defn -group-by\n  [f init coll]\n  (persistent!\n    (reduce\n      (fn [ret x]\n        (let [k (f x)]\n          (assoc! ret k (conj (get ret k init) x))))\n      (transient {}) coll)))\n\n(defn hash-attrs [key-fn tuples]\n  (-group-by key-fn '() tuples))\n\n(defn hash-join [rel1 rel2]\n  (let [tuples1       (:tuples rel1)\n        tuples2       (:tuples rel2)\n        attrs1        (:attrs rel1)\n        attrs2        (:attrs rel2)\n        common-attrs  (vec (intersect-keys (:attrs rel1) (:attrs rel2)))\n        keep-attrs1   (keys attrs1)\n        keep-attrs2   (->> attrs2\n                        (reduce-kv (fn keeper [vec k _]\n                                     (if (attrs1 k)\n                                       vec\n                                       (conj! vec k)))\n                          (transient []))\n                        persistent!) ; keys in attrs2-attrs1\n        keep-idxs1    (to-array (vals attrs1))\n        keep-idxs2    (to-array (->Eduction (map attrs2) keep-attrs2)) ; vals in attrs2-attrs1 by keys\n        key-fn1       (tuple-key-fn attrs1 common-attrs)\n        key-fn2       (tuple-key-fn attrs2 common-attrs)\n        hash          (hash-attrs key-fn1 tuples1)\n        new-tuples    (->>\n                        tuples2\n                        (reduce (fn outer [acc tuple2]\n                                  (let [key (key-fn2 tuple2)]\n                                    (if-some [tuples1 #?(:clj (hash key) :cljs (get hash key))]\n                                      (reduce (fn inner [acc tuple1]\n                                                (conj! acc (join-tuples tuple1 keep-idxs1 tuple2 keep-idxs2)))\n                                        acc tuples1)\n                                      acc)))\n                          (transient []))\n                        (persistent!))]\n    (Relation. (zipmap (concat keep-attrs1 keep-attrs2) (range))\n      new-tuples)))\n\n(defn subtract-rel [a b]\n  (let [{attrs-a :attrs, tuples-a :tuples} a\n        {attrs-b :attrs, tuples-b :tuples} b\n        attrs     (vec (intersect-keys attrs-a attrs-b))\n        key-fn-b  (tuple-key-fn attrs-b attrs)\n        hash      (hash-attrs key-fn-b tuples-b)\n        key-fn-a  (tuple-key-fn attrs-a attrs)]\n    (assoc a\n      :tuples (filterv #(nil? (hash (key-fn-a %))) tuples-a))))\n\n(defn- rel-with-attr [context sym]\n  (some #(when (contains? (:attrs %) sym) %) (:rels context)))\n\n(defn substitute-constant [context pattern-el]\n  (when (free-var? pattern-el)\n    (when-some [rel (rel-with-attr context pattern-el)]\n      (when-some [tuple (first (:tuples rel))]\n        (when (nil? (fnext (:tuples rel)))\n          (let [idx (get (:attrs rel) pattern-el)]\n            (#?(:cljs da/aget :clj get) tuple idx)))))))\n\n(defn substitute-constants [context pattern]\n  (mapv #(or (substitute-constant context %) %) pattern))\n\n(defn resolve-pattern-lookup-refs [source pattern]\n  (if (satisfies? db/IDB source)\n    (let [[e a v tx] pattern\n          e'         (if (or (lookup-ref? e) (attr? e))\n                       (db/entid-strict source e)\n                       e)\n          v'         (if (and v (attr? a) (db/ref? source a) (or (lookup-ref? v) (attr? v)))\n                       (db/entid-strict source v)\n                       v)\n          tx'        (if (lookup-ref? tx)\n                       (db/entid-strict source tx)\n                       tx)]\n      (subvec [e' a v' tx'] 0 (count pattern)))\n    pattern))\n\n(defn lookup-pattern-db [context db pattern]\n  ;; TODO optimize with bound attrs min/max values here\n  (let [search-pattern (->> pattern\n                         (substitute-constants context)\n                         (resolve-pattern-lookup-refs db)\n                         (mapv #(if (or (= % '_) (free-var? %)) nil %)))\n        datoms         (db/-search db search-pattern)\n        attr->prop     (->> (map vector pattern [\"e\" \"a\" \"v\" \"tx\"])\n                         (filter (fn [[s _]] (free-var? s)))\n                         (into {}))]\n    (Relation. attr->prop datoms)))\n\n(defn matches-pattern? [pattern tuple]\n  (loop [tuple   tuple\n         pattern pattern]\n    (if (and tuple pattern)\n      (let [t (first tuple)\n            p (first pattern)]\n        (if (or (= p '_) (free-var? p) (= t p))\n          (recur (next tuple) (next pattern))\n          false))\n      true)))\n\n(defn lookup-pattern-coll [context coll pattern]\n  (let [data       (filter #(matches-pattern? pattern %) coll)\n        attr->idx  (->> (map vector pattern (range))\n                     (filter (fn [[s _]] (free-var? s)))\n                     (into {}))]\n    (Relation. attr->idx (mapv to-array data)))) ;; FIXME to-array\n\n(defn normalize-pattern-clause [clause]\n  (if (source? (first clause))\n    clause\n    (concat ['$] clause)))\n\n(defn lookup-pattern [context source pattern]\n  (if (satisfies? db/ISearch source)\n    (lookup-pattern-db context source pattern)\n    (lookup-pattern-coll context source pattern)))\n\n(defn collapse-rels [rels new-rel]\n  (loop [rels    rels\n         new-rel new-rel\n         acc     []]\n    (if-some [rel (first rels)]\n      (if (not-empty (intersect-keys (:attrs new-rel) (:attrs rel)))\n        (recur (next rels) (hash-join rel new-rel) acc)\n        (recur (next rels) new-rel (conj acc rel)))\n      (conj acc new-rel))))\n\n(defn- context-resolve-val [context sym]\n  (when-some [rel (rel-with-attr context sym)]\n    (when-some [tuple (first (:tuples rel))]\n      (#?(:cljs da/aget :clj get) tuple ((:attrs rel) sym)))))\n\n(defn- rel-contains-attrs? [rel attrs]\n  (some #(contains? (:attrs rel) %) attrs))\n\n(defn- rel-prod-by-attrs [context attrs]\n  (let [rels       (filter #(rel-contains-attrs? % attrs) (:rels context))\n        production (reduce prod-rel rels)]\n    [(update context :rels #(remove (set rels) %)) production]))\n\n(defn -call-fn [context rel f args]\n  (let [sources     (:sources context)\n        attrs       (:attrs rel)\n        len         (count args)\n        static-args (da/make-array len)\n        tuples-args (da/make-array len)]\n    (dotimes [i len]\n      (let [arg (nth args i)]\n        (if (symbol? arg) \n          (if-some [source (get sources arg)]\n            (da/aset static-args i source)\n            (da/aset tuples-args i (get attrs arg)))\n          (da/aset static-args i arg))))\n    ;; CLJS `apply` + `vector` will hold onto mutable array of arguments directly\n    ;; issue-262\n    (if #?(:clj  false\n           :cljs (identical? f vector))\n      (fn [tuple]\n        ;; TODO raise if not all args are bound\n        (let [args (da/aclone static-args)]\n          (dotimes [i len]\n            (when-some [tuple-idx (aget tuples-args i)]\n              (let [v (#?(:cljs da/aget :clj get) tuple tuple-idx)]\n                (da/aset args i v))))\n          (apply f args)))\n      (fn [tuple]\n        ;; TODO raise if not all args are bound\n        (dotimes [i len]\n          (when-some [tuple-idx (aget tuples-args i)]\n            (let [v (#?(:cljs da/aget :clj get) tuple tuple-idx)]\n              (da/aset static-args i v))))\n        (apply f static-args)))))\n\n(defn- resolve-sym [sym]\n  #?(:cljs nil\n     :clj (when (namespace sym)\n            (when-some [v (resolve sym)] @v))))\n\n(defn filter-by-pred [context clause]\n  (let [[[f & args]] clause\n        pred         (or (get built-ins/query-fns f)\n                       (context-resolve-val context f)\n                       (resolve-sym f)\n                       (when (nil? (rel-with-attr context f))\n                         (util/raise \"Unknown predicate '\" f \" in \" clause\n                           {:error :query/where, :form clause, :var f})))\n        [context production] (rel-prod-by-attrs context (filter symbol? args))\n        new-rel      (if pred\n                       (let [tuple-pred (-call-fn context production pred args)]\n                         (update production :tuples #(filter tuple-pred %)))\n                       (assoc production :tuples []))]\n    (update context :rels conj new-rel)))\n\n(defn bind-by-fn [context clause]\n  (let [[[f & args] out] clause\n        binding  (dp/parse-binding out)\n        fun      (or (get built-ins/query-fns f)\n                   (context-resolve-val context f)\n                   (resolve-sym f)\n                   (when (nil? (rel-with-attr context f))\n                     (util/raise \"Unknown function '\" f \" in \" clause\n                       {:error :query/where, :form clause, :var f})))\n        [context production] (rel-prod-by-attrs context (filter symbol? args))\n        new-rel  (if fun\n                   (let [tuple-fn (-call-fn context production fun args)\n                         rels     (for [tuple (:tuples production)\n                                        :let  [val (tuple-fn tuple)]\n                                        :when (not (nil? val))]\n                                    (prod-rel (Relation. (:attrs production) [tuple])\n                                      (in->rel binding val)))]\n                     (if (empty? rels)\n                       (prod-rel production (empty-rel binding))\n                       (reduce sum-rel rels)))\n                   (prod-rel (assoc production :tuples []) (empty-rel binding)))]\n    (update context :rels collapse-rels new-rel)))\n\n;;; RULES\n\n(defn rule? [context clause]\n  (util/cond+\n    (not (sequential? clause))\n    false\n\n    :let [head (if (source? (first clause))\n                 (second clause)\n                 (first clause))]\n\n    (not (symbol? head))\n    false\n\n    (free-var? head)\n    false\n\n    (contains? #{'_ 'or 'or-join 'and 'not 'not-join} head)\n    false\n\n    (not (contains? (:rules context) head))\n    (util/raise \"Unknown rule '\" head \" in \" clause\n      {:error :query/where\n       :form  clause})\n\n    :else true))\n\n(def rule-seqid (atom 0))\n\n(defn expand-rule [clause context used-args]\n  (let [[rule & call-args] clause\n        seqid              (swap! rule-seqid inc)\n        branches           (get (:rules context) rule)]\n    (for [branch branches\n          :let [[[_ & rule-args] & clauses] branch\n                replacements (zipmap rule-args call-args)]]\n      (walk/postwalk\n        #(if (free-var? %)\n           (util/some-of\n             (replacements %)\n             (symbol (str (name %) \"__auto__\" seqid)))\n           %)\n        clauses))))\n\n(defn remove-pairs [xs ys]\n  (let [pairs (->> (map vector xs ys)\n                (remove (fn [[x y]] (= x y))))]\n    [(map first pairs)\n     (map second pairs)]))\n\n(defn rule-gen-guards [rule-clause used-args]\n  (let [[rule & call-args] rule-clause\n        prev-call-args     (get used-args rule)]\n    (for [prev-args prev-call-args\n          :let [[call-args prev-args] (remove-pairs call-args prev-args)]]\n      [(concat ['-differ?] call-args prev-args)])))\n\n(defn walk-collect [form pred]\n  (let [res (atom [])]\n    (walk/postwalk #(do (when (pred %) (swap! res conj %)) %) form)\n    @res))\n\n(defn collect-vars [clause]\n  (set (walk-collect clause free-var?)))\n\n(defn split-guards [clauses guards]\n  (let [bound-vars (collect-vars clauses)\n        pred       (fn [[[_ & vars]]] (every? bound-vars vars))]\n    [(filter pred guards)\n     (remove pred guards)]))\n\n(defn solve-rule [context clause]\n  (let [final-attrs     (filter free-var? clause)\n        final-attrs-map (zipmap final-attrs (range))\n        ;;         clause-cache    (atom {}) ;; TODO\n        solve           (fn [prefix-context clauses]\n                          (reduce -resolve-clause prefix-context clauses))\n        empty-rels?     (fn [context]\n                          (some #(empty? (:tuples %)) (:rels context)))]\n    (loop [stack (list {:prefix-clauses []\n                        :prefix-context context\n                        :clauses        [clause]\n                        :used-args      {}\n                        :pending-guards {}})\n           rel   (Relation. final-attrs-map [])]\n      (if-some [frame (first stack)]\n        (let [[clauses [rule-clause & next-clauses]] (split-with #(not (rule? context %)) (:clauses frame))]\n          (if (nil? rule-clause)\n\n            ;; no rules -> expand, collect, sum\n            (let [context (solve (:prefix-context frame) clauses)\n                  tuples  (util/distinct-by vec (-collect context final-attrs))\n                  new-rel (Relation. final-attrs-map tuples)]\n              (recur (next stack) (sum-rel rel new-rel)))\n\n            ;; has rule -> add guards -> check if dead -> expand rule -> push to stack, recur\n            (let [[rule & call-args]     rule-clause\n                  guards                 (rule-gen-guards rule-clause (:used-args frame))\n                  [active-gs pending-gs] (split-guards (concat (:prefix-clauses frame) clauses)\n                                           (concat guards (:pending-guards frame)))]\n              (if (some #(= % '[(-differ?)]) active-gs) ;; trivial always false case like [(not= [?a ?b] [?a ?b])]\n\n                ;; this branch has no data, just drop it from stack\n                (recur (next stack) rel)\n\n                (let [prefix-clauses (concat clauses active-gs)\n                      prefix-context (solve (:prefix-context frame) prefix-clauses)]\n                  (if (empty-rels? prefix-context)\n\n                    ;; this branch has no data, just drop it from stack\n                    (recur (next stack) rel)\n\n                    ;; need to expand rule to branches\n                    (let [used-args  (assoc (:used-args frame) rule\n                                       (conj (get (:used-args frame) rule []) call-args))\n                          branches   (expand-rule rule-clause context used-args)]\n                      (recur (concat\n                               (for [branch branches]\n                                 {:prefix-clauses prefix-clauses\n                                  :prefix-context prefix-context\n                                  :clauses        (util/concatv branch next-clauses)\n                                  :used-args      used-args\n                                  :pending-guards pending-gs})\n                               (next stack))\n                        rel))))))))\n        rel))))\n\n(defn dynamic-lookup-attrs [source pattern]\n  (let [[e a v tx] pattern]\n    (cond-> #{}\n      (free-var? e) (conj e)\n      (free-var? tx) (conj tx)\n      (and\n        (free-var? v)\n        (not (free-var? a))\n        (db/ref? source a)) (conj v))))\n\n(defn limit-rel [rel vars]\n  (when-some [attrs' (not-empty (select-keys (:attrs rel) vars))]\n    (assoc rel :attrs attrs')))\n\n(defn limit-context [context vars]\n  (assoc context\n    :rels (->> (:rels context)\n            (keep #(limit-rel % vars)))))\n\n(defn bound-vars [context]\n  (into #{} (mapcat #(keys (:attrs %)) (:rels context))))\n\n(defn check-bound [bound vars form]\n  (when-not (set/subset? vars bound)\n    (let [missing (set/difference (set vars) bound)]\n      (util/raise \"Insufficient bindings: \" missing \" not bound in \" form\n        {:error :query/where\n         :form  form\n         :vars  missing}))))\n\n(defn check-free-same [bound branches form]\n  (let [free (mapv #(set/difference (collect-vars %) bound) branches)]\n    (when-not (apply = free)\n      (util/raise \"All clauses in 'or' must use same set of free vars, had \" free \" in \" form\n        {:error :query/where\n         :form  form\n         :vars  free}))))\n\n(defn check-free-subset [bound vars branches]\n  (let [free (set (remove bound vars))]\n    (doseq [branch branches]\n      (when-some [missing (not-empty (set/difference free (collect-vars branch)))]\n        (prn branch bound vars free)\n        (util/raise \"All clauses in 'or' must use same set of free vars, had \" missing \" not bound in \" branch\n          {:error :query/where\n           :form  branch\n           :vars  missing})))))\n\n(defn -resolve-clause\n  ([context clause]\n   (-resolve-clause context clause clause))\n  ([context clause orig-clause]\n   (condp looks-like? clause\n     [[symbol? '*]] ;; predicate [(pred ?a ?b ?c)]\n     (do\n       (check-bound (bound-vars context) (filter free-var? (nfirst clause)) clause)\n       (filter-by-pred context clause))\n     \n     [[symbol? '*] '_] ;; function [(fn ?a ?b) ?res]\n     (do\n       (check-bound (bound-vars context) (filter free-var? (nfirst clause)) clause)\n       (bind-by-fn context clause))\n     \n     [source? '*] ;; source + anything\n     (let [[source-sym & rest] clause]\n       (binding [*implicit-source* (get (:sources context) source-sym)]\n         (-resolve-clause context rest clause)))\n     \n     '[or *] ;; (or ...)\n     (let [[_ & branches] clause\n           _        (check-free-same (bound-vars context) branches clause)\n           contexts (map #(resolve-clause context %) branches)\n           rels     (map #(reduce hash-join (:rels %)) contexts)]\n       (assoc (first contexts) :rels [(reduce sum-rel rels)]))\n     \n     '[or-join [[*] *] *] ;; (or-join [[req-vars] vars] ...)\n     (let [[_ [req-vars & vars] & branches] clause\n           bound (bound-vars context)]\n       (check-bound bound req-vars orig-clause)\n       (check-free-subset bound vars branches)\n       (recur context (list* 'or-join (concat req-vars vars) branches) clause))\n     \n     '[or-join [*] *] ;; (or-join [vars] ...)\n     (let [[_ vars & branches] clause\n           vars         (set vars)\n           _            (check-free-subset (bound-vars context) vars branches)\n           join-context (limit-context context vars)\n           contexts     (map #(-> join-context (resolve-clause %) (limit-context vars)) branches)\n           rels         (map #(reduce hash-join (:rels %)) contexts)\n           sum-rel      (reduce sum-rel rels)]\n       (update context :rels collapse-rels sum-rel))\n     \n     '[and *] ;; (and ...)\n     (let [[_ & clauses] clause]\n       (reduce resolve-clause context clauses))\n     \n     '[not *] ;; (not ...)\n     (let [[_ & clauses] clause\n           bound            (bound-vars context)\n           negation-vars    (collect-vars clauses)\n           _                (when (empty? (set/intersection bound negation-vars))\n                              (util/raise \"Insufficient bindings: none of \" negation-vars \" is bound in \" orig-clause\n                                {:error :query/where\n                                 :form  orig-clause}))\n           context'         (assoc context :rels [(reduce hash-join (:rels context))])\n           negation-context (reduce resolve-clause context' clauses)\n           negation         (subtract-rel\n                              (util/single (:rels context'))\n                              (reduce hash-join (:rels negation-context)))]\n       (assoc context' :rels [negation]))\n     \n     '[not-join [*] *] ;; (not-join [vars] ...)\n     (let [[_ vars & clauses] clause\n           bound            (bound-vars context)\n           _                (check-bound bound vars orig-clause)\n           context'         (assoc context :rels [(reduce hash-join (:rels context))])\n           join-context     (limit-context context' vars)\n           negation-context (-> (reduce resolve-clause join-context clauses)\n                              (limit-context vars))\n           negation         (subtract-rel\n                              (util/single (:rels context'))\n                              (reduce hash-join (:rels negation-context)))]\n       (assoc context' :rels [negation]))\n     \n     '[*] ;; pattern\n     (let [source   *implicit-source*\n           pattern' (resolve-pattern-lookup-refs source clause)\n           relation (lookup-pattern context source pattern')]\n       (binding [*lookup-attrs* (if (satisfies? db/IDB source)\n                                  (dynamic-lookup-attrs source pattern')\n                                  *lookup-attrs*)]\n         (update context :rels collapse-rels relation))))))\n\n(defn short-circuit-empty-rel [context]\n  (if (some #(empty? (:tuples %)) (:rels context))\n    (assoc context\n      :rels\n      [(Relation.\n         (zipmap (mapcat #(keys (:attrs %)) (:rels context)) (range))\n         [])])\n    context))\n\n(defn resolve-clause [context clause]\n  (if (->> (:rels context) (some (comp empty? :tuples)))\n    context ; The result is empty; short-circuit processing\n    (short-circuit-empty-rel\n      (if (rule? context clause)\n        (if (source? (first clause))\n          (binding [*implicit-source* (get (:sources context) (first clause))]\n            (resolve-clause context (next clause)))\n          (update context :rels collapse-rels (solve-rule context clause)))\n        (-resolve-clause context clause)))))\n\n(defn -q [context clauses]\n  (binding [*implicit-source* (get (:sources context) '$)]\n    (reduce resolve-clause context clauses)))\n\n(defn -collect-tuples\n  [acc rel ^long len copy-map]\n  (->Eduction\n    (comp\n      (map\n        (fn [#?(:cljs t1\n                :clj ^{:tag \"[[Ljava.lang.Object;\"} t1)]\n          (->Eduction\n            (map\n              (fn [t2]\n                (let [res (aclone t1)]\n                  #?(:clj\n                     (if (.isArray (.getClass ^Object t2))\n                       (dotimes [i len]\n                         (when-some [idx (aget ^objects copy-map i)]\n                           (aset res i (aget ^objects t2 idx))))\n                       (dotimes [i len]\n                         (when-some [idx (aget ^objects copy-map i)]\n                           (aset res i (get t2 idx)))))\n                     :cljs\n                     (dotimes [i len]\n                       (when-some [idx (aget ^objects copy-map i)]\n                         (aset res i (da/aget ^objects t2 idx)))))\n                  res)))\n            (:tuples rel))))\n      cat)\n    acc))\n\n(defn -collect\n  ([context symbols]\n   (let [rels (:rels context)]\n     (-collect [(da/make-array (count symbols))] rels symbols)))\n  ([acc rels symbols]\n   (util/cond+\n     :let [rel (first rels)]\n \n     (nil? rel) acc\n \n     ;; one empty rel means final set has to be empty\n     (empty? (:tuples rel)) []\n \n     :let [keep-attrs (select-keys (:attrs rel) symbols)]\n \n     (empty? keep-attrs) (recur acc (next rels) symbols)\n \n     :let [copy-map (to-array (map #(get keep-attrs %) symbols))\n           len      (count symbols)]\n\n     :else\n     (recur (-collect-tuples acc rel len copy-map) (next rels) symbols))))\n\n(defn collect [context symbols]\n  (into #{} (map vec) (-collect context symbols)))\n\n(defprotocol IContextResolve\n  (-context-resolve [var context]))\n\n(extend-protocol IContextResolve\n  Variable\n  (-context-resolve [var context]\n    (context-resolve-val context (.-symbol var)))\n  SrcVar\n  (-context-resolve [var context]\n    (get-in context [:sources (.-symbol var)]))\n  PlainSymbol\n  (-context-resolve [var _]\n    (or (get built-ins/aggregates (.-symbol var))\n      (resolve-sym (.-symbol var))))\n  Constant\n  (-context-resolve [var _]\n    (.-value var)))\n\n(defn -aggregate [find-elements context tuples]\n  (mapv (fn [element fixed-value i]\n          (if (dp/aggregate? element)\n            (let [f    (-context-resolve (:fn element) context)\n                  args (map #(-context-resolve % context) (butlast (:args element)))\n                  vals (map #(nth % i) tuples)]\n              (apply f (concat args [vals])))\n            fixed-value))\n    find-elements\n    (first tuples)\n    (range)))\n\n(defn- idxs-of [pred coll]\n  (->> (map #(when (pred %1) %2) coll (range))\n    (remove nil?)))\n\n(defn aggregate [find-elements context resultset]\n  (let [group-idxs (idxs-of (complement dp/aggregate?) find-elements)\n        group-fn   (fn [tuple]\n                     (map #(nth tuple %) group-idxs))\n        grouped    (group-by group-fn resultset)]\n    (for [[_ tuples] grouped]\n      (-aggregate find-elements context tuples))))\n\n(defn map* [f xs]\n  (reduce #(conj %1 (f %2)) (empty xs) xs))\n\n(defn tuples->return-map [return-map tuples]\n  (let [symbols (:symbols return-map)\n        idxs    (range 0 (count symbols))]\n    (map*\n      (fn [tuple]\n        (reduce\n          (fn [m i] (assoc m (nth symbols i) (nth tuple i)))\n          {} idxs))\n      tuples)))\n\n(defprotocol IPostProcess\n  (-post-process [find return-map tuples]))\n\n(extend-protocol IPostProcess\n  FindRel\n  (-post-process [_ return-map tuples]\n    (if (nil? return-map)\n      tuples\n      (tuples->return-map return-map tuples)))\n\n  FindColl\n  (-post-process [_ return-map tuples]\n    (into [] (map first) tuples))\n\n  FindScalar\n  (-post-process [_ return-map tuples]\n    (ffirst tuples))\n\n  FindTuple\n  (-post-process [_ return-map tuples]\n    (if (some? return-map)\n      (first (tuples->return-map return-map [(first tuples)]))\n      (first tuples))))\n\n(defn- pull [find-elements context resultset]\n  (let [resolved (for [find find-elements]\n                   (when (dp/pull? find)\n                     (let [db (-context-resolve (:source find) context)\n                           pattern (-context-resolve (:pattern find) context)]\n                       (dpa/parse-opts db pattern))))]\n    (for [tuple resultset]\n      (mapv\n        (fn [parsed-opts el]\n          (if parsed-opts\n            (dpa/pull-impl parsed-opts el)\n            el))\n        resolved\n        tuple))))\n\n(defn q [q & inputs]\n  (let [parsed-q      (lru/-get *query-cache* q #(dp/parse-query q))\n        find          (:qfind parsed-q)\n        find-elements (dp/find-elements find)\n        find-vars     (dp/find-vars find)\n        result-arity  (count find-elements)\n        with          (:qwith parsed-q)\n        ;; TODO utilize parser\n        all-vars      (concat find-vars (map :symbol with))\n        q             (cond-> q\n                        (sequential? q) dp/query->map)\n        wheres        (:where q)\n        context       (-> (Context. [] {} {})\n                        (resolve-ins (:qin parsed-q) inputs))\n        resultset     (-> context\n                        (-q wheres)\n                        (collect all-vars))]\n    (cond->> resultset\n      (:with q)\n      (mapv #(vec (subvec % 0 result-arity)))\n      (some dp/aggregate? find-elements)\n      (aggregate find-elements context)\n      (some dp/pull? find-elements)\n      (pull find-elements context)\n      true\n      (-post-process find (:qreturn-map parsed-q)))))\n"],"x_google_ignoreList":[0]}