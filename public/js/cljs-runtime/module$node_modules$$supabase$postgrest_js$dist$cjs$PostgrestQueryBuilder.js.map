{
"version":3,
"file":"module$node_modules$$supabase$postgrest_js$dist$cjs$PostgrestQueryBuilder.js",
"lineCount":64,
"mappings":"AAAAA,cAAA,CAAA,yEAAA,GAA8F,QAAQ,CAACC,MAAD,EAAQC,OAAR,EAAgBC,MAAhB,EAAuBC,OAAvB,CAAgC;AAElIC,QAAAA,GAAmB,IAAnBA,IAA2B,IAAKA,CAAAA,eAAhCA,IAAoD,QAAS,CAACC,GAAD,CAAM;AACnE,WAAQA,GAAD,IAAQA,GAAIC,CAAAA,UAAZ,GAA0BD,GAA1B,GAAgC,CAAE,UAAWA,GAAb,CAAvC;AADmE,GAAnED;AAGJG,QAAOC,CAAAA,cAAP,CAAsBL,OAAtB,EAA+B,YAA/B,EAA6C,CAAEM,MAAO,CAAA,CAAT,CAA7C,CAAA;AACA,QAAMC,2BAA2BN,MAAA,CAAgBH,OAAA,CAAQ,4EAAR,CAAhB,CAAjC;AACA,OAAMU,sBAAN;AACIC,eAAW,CAACC,GAAD,EAAM,CAAEC,OAAA,GAAU,EAAZ,EAAgBC,MAAhB,EAAwBC,KAAxB,CAAN,CAAwC;AAC/C,UAAKH,CAAAA,GAAL,GAAWA,GAAX;AACA,UAAKC,CAAAA,OAAL,GAAeA,OAAf;AACA,UAAKC,CAAAA,MAAL,GAAcA,MAAd;AACA,UAAKC,CAAAA,KAAL,GAAaA,KAAb;AAJ+C;AA2BnDC,UAAM,CAACC,OAAD,EAAU,CAAEC,IAAA,GAAO,CAAA,CAAT,EAAgBC,KAAhB,CAAA,GAA2B,EAArC,CAAyC;AACrCC,UAAAA,GAASF,IAAA,GAAO,MAAP,GAAgB,KAAzBE;AAEN,UAAIC,SAAS,CAAA,CAAb;AACMC,aAAAA,GACDC,CAD+B,IAAZ,KAAAN,OAAA,IAAgC,IAAK,EAArC,KAAoBA,OAApB,GAAyCA,OAAzC,GAAmD,GACtEM,EAAAA,KADkB,CACZ,EADY,CAElBC,CAAAA,GAFkB,CAEbC,CAAD,IAAO;AACZ,YAAI,IAAKC,CAAAA,IAAL,CAAUD,CAAV,CAAJ,IAAoB,CAACJ,MAArB;AACI,iBAAO,EAAP;AADJ;AAGU,WAAV,KAAII,CAAJ,KACIJ,MADJ,GACa,CAACA,MADd;AAGA,eAAOI,CAAP;AAPY,OAFO,CAWlBE,CAAAA,IAXkB,CAWb,EAXa,CAAjBL;AAYN,UAAKV,CAAAA,GAAIgB,CAAAA,YAAaC,CAAAA,GAAtB,CAA0B,QAA1B,EAAoCP,OAApC,CAAA;AACIH,WAAJ,KACI,IAAKN,CAAAA,OAAL,CAAA,MADJ,GAC8B,SAAQM,KAAR,EAD9B;AAGA,aAAO,IAAIV,wBAAyBqB,CAAAA,OAA7B,CAAqC,CACxCV,OAAAA,IADwC,EAExCR,IAAK,IAAKA,CAAAA,GAF8B,EAGxCC,QAAS,IAAKA,CAAAA,OAH0B,EAIxCC,OAAQ,IAAKA,CAAAA,MAJ2B,EAKxCC,MAAO,IAAKA,CAAAA,KAL4B,EAMxCgB,WAAY,CAAA,CAN4B,CAArC,CAAP;AApB2C;AAuD/CC,UAAM,CAACC,MAAD,EAAS,CAAEd,KAAF,EAASe,aAAA,GAAgB,CAAA,CAAzB,CAAA,GAAmC,EAA5C,CAAgD;AAElD,YAAMC,iBAAiB,EAAvB;AACI,UAAKtB,CAAAA,OAAL,CAAA,MAAJ,IACIsB,cAAeC,CAAAA,IAAf,CAAoB,IAAKvB,CAAAA,OAAL,CAAA,MAApB,CADJ;AAGIM,WAAJ,IACIgB,cAAeC,CAAAA,IAAf,CAAqB,SAAQjB,KAAR,EAArB,CADJ;AAGKe,mBAAL,IACIC,cAAeC,CAAAA,IAAf,CAAoB,oBAApB,CADJ;AAGA,UAAKvB,CAAAA,OAAL,CAAA,MAAA,GAAyBsB,cAAeR,CAAAA,IAAf,CAAoB,GAApB,CAAzB;AACIU,WAAMC,CAAAA,OAAN,CAAcL,MAAd,CAAJ,KACUhB,KACN,GADgBgB,MAAOM,CAAAA,MAAP,CAAc,CAACC,GAAD,EAAMC,CAAN,CAAA,IAAYD,GAAIE,CAAAA,MAAJ,CAAWpC,MAAOqC,CAAAA,IAAP,CAAYF,CAAZ,CAAX,CAA1B,EAAsD,EAAtD,CAChB,EAAqB,CAArB,GAAIxB,KAAQ2B,CAAAA,MAAZ,KACUC,KACN,GADsB,CAAC,IAAG,IAAIC,GAAJ,CAAQ7B,KAAR,CAAH,CAAD,CAAsBO,CAAAA,GAAtB,CAA2BuB,MAAD,IAAa,IAAGA,MAAH,GAAvC,CACtB,EAAA,IAAKnC,CAAAA,GAAIgB,CAAAA,YAAaC,CAAAA,GAAtB,CAA0B,SAA1B,EAAqCgB,KAAclB,CAAAA,IAAd,CAAmB,GAAnB,CAArC,CAFJ,CAFJ;AAOA,aAAO,IAAIlB,wBAAyBqB,CAAAA,OAA7B,CAAqC,CACxCV,OApBWA,MAmB6B,EAExCR,IAAK,IAAKA,CAAAA,GAF8B,EAGxCC,QAAS,IAAKA,CAAAA,OAH0B,EAIxCC,OAAQ,IAAKA,CAAAA,MAJ2B,EAKxCkC,KAAMf,MALkC,EAMxClB,MAAO,IAAKA,CAAAA,KAN4B,EAOxCgB,WAAY,CAAA,CAP4B,CAArC,CAAP;AApBkD;AAoEtDkB,UAAM,CAAChB,MAAD,EAAS,CAAEiB,UAAF,EAAcC,gBAAA,GAAmB,CAAA,CAAjC,EAAwChC,KAAxC,EAA+Ce,aAAA,GAAgB,CAAA,CAA/D,CAAA,GAAyE,EAAlF,CAAsF;AAElFC,sBAAAA,GAAiB,CAAE,cAAagB,gBAAA,GAAmB,QAAnB,GAA8B,OAA3C,aAAF,CAAjBhB;AACaiB,UAAAA,EAAnB,KAAIF,UAAJ,IACI,IAAKtC,CAAAA,GAAIgB,CAAAA,YAAaC,CAAAA,GAAtB,CAA0B,aAA1B,EAAyCqB,UAAzC,CADJ;AAEI,UAAKrC,CAAAA,OAAL,CAAA,MAAJ,IACIsB,gBAAeC,CAAAA,IAAf,CAAoB,IAAKvB,CAAAA,OAAL,CAAA,MAApB,CADJ;AAGIM,WAAJ,IACIgB,gBAAeC,CAAAA,IAAf,CAAqB,SAAQjB,KAAR,EAArB,CADJ;AAGKe,mBAAL,IACIC,gBAAeC,CAAAA,IAAf,CAAoB,oBAApB,CADJ;AAGA,UAAKvB,CAAAA,OAAL,CAAA,MAAA,GAAyBsB,gBAAeR,CAAAA,IAAf,CAAoB,GAApB,CAAzB;AACIU,WAAMC,CAAAA,OAAN,CAAcL,MAAd,CAAJ,KACUhB,UACN,GADgBgB,MAAOM,CAAAA,MAAP,CAAc,CAACC,GAAD,EAAMC,CAAN,CAAA,IAAYD,GAAIE,CAAAA,MAAJ,CAAWpC,MAAOqC,CAAAA,IAAP,CAAYF,CAAZ,CAAX,CAA1B,EAAsD,EAAtD,CAChB,EAAqB,CAArB,GAAIxB,UAAQ2B,CAAAA,MAAZ,KACUC,UACN,GADsB,CAAC,IAAG,IAAIC,GAAJ,CAAQ7B,UAAR,CAAH,CAAD,CAAsBO,CAAAA,GAAtB,CAA2BuB,MAAD,IAAa,IAAGA,MAAH,GAAvC,CACtB,EAAA,IAAKnC,CAAAA,GAAIgB,CAAAA,YAAaC,CAAAA,GAAtB,CAA0B,SAA1B,EAAqCgB,UAAclB,CAAAA,IAAd,CAAmB,GAAnB,CAArC,CAFJ,CAFJ;AAOA,aAAO,IAAIlB,wBAAyBqB,CAAAA,OAA7B,CAAqC,CACxCV,OAtBWA,MAqB6B,EAExCR,IAAK,IAAKA,CAAAA,GAF8B,EAGxCC,QAAS,IAAKA,CAAAA,OAH0B,EAIxCC,OAAQ,IAAKA,CAAAA,MAJ2B,EAKxCkC,KAAMf,MALkC,EAMxClB,MAAO,IAAKA,CAAAA,KAN4B,EAOxCgB,WAAY,CAAA,CAP4B,CAArC,CAAP;AAtBwF;AAqD5FsB,UAAM,CAACpB,MAAD,EAAS,CAAEd,KAAF,CAAA,GAAa,EAAtB,CAA0B;AAE5B,YAAMgB,iBAAiB,EAAvB;AACI,UAAKtB,CAAAA,OAAL,CAAA,MAAJ,IACIsB,cAAeC,CAAAA,IAAf,CAAoB,IAAKvB,CAAAA,OAAL,CAAA,MAApB,CADJ;AAGIM,WAAJ,IACIgB,cAAeC,CAAAA,IAAf,CAAqB,SAAQjB,KAAR,EAArB,CADJ;AAGA,UAAKN,CAAAA,OAAL,CAAA,MAAA,GAAyBsB,cAAeR,CAAAA,IAAf,CAAoB,GAApB,CAAzB;AACA,aAAO,IAAIlB,wBAAyBqB,CAAAA,OAA7B,CAAqC,CACxCV,OAVWA,OAS6B,EAExCR,IAAK,IAAKA,CAAAA,GAF8B,EAGxCC,QAAS,IAAKA,CAAAA,OAH0B,EAIxCC,OAAQ,IAAKA,CAAAA,MAJ2B,EAKxCkC,KAAMf,MALkC,EAMxClB,MAAO,IAAKA,CAAAA,KAN4B,EAOxCgB,WAAY,CAAA,CAP4B,CAArC,CAAP;AAV4B;AAuChCuB,UAAM,CAAC,CAAEnC,KAAF,CAAA,GAAa,EAAd,CAAkB;AAEpB,YAAMgB,iBAAiB,EAAvB;AACIhB,WAAJ,IACIgB,cAAeC,CAAAA,IAAf,CAAqB,SAAQjB,KAAR,EAArB,CADJ;AAGI,UAAKN,CAAAA,OAAL,CAAA,MAAJ,IACIsB,cAAeoB,CAAAA,OAAf,CAAuB,IAAK1C,CAAAA,OAAL,CAAA,MAAvB,CADJ;AAGA,UAAKA,CAAAA,OAAL,CAAA,MAAA,GAAyBsB,cAAeR,CAAAA,IAAf,CAAoB,GAApB,CAAzB;AACA,aAAO,IAAIlB,wBAAyBqB,CAAAA,OAA7B,CAAqC,CACxCV,OAVWA,QAS6B,EAExCR,IAAK,IAAKA,CAAAA,GAF8B,EAGxCC,QAAS,IAAKA,CAAAA,OAH0B,EAIxCC,OAAQ,IAAKA,CAAAA,MAJ2B,EAKxCC,MAAO,IAAKA,CAAAA,KAL4B,EAMxCgB,WAAY,CAAA,CAN4B,CAArC,CAAP;AAVoB;AAnP5B;AAuQA7B,SAAQ4B,CAAAA,OAAR,GAAkBpB,qBAAlB;AA9QsI,CAAtI;;",
"sources":["node_modules/@supabase/postgrest-js/dist/cjs/PostgrestQueryBuilder.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$$supabase$postgrest_js$dist$cjs$PostgrestQueryBuilder\"] = function(global,require,module,exports) {\n\"use strict\";\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst PostgrestFilterBuilder_1 = __importDefault(require(\"./PostgrestFilterBuilder\"));\nclass PostgrestQueryBuilder {\n    constructor(url, { headers = {}, schema, fetch, }) {\n        this.url = url;\n        this.headers = headers;\n        this.schema = schema;\n        this.fetch = fetch;\n    }\n    /**\n     * Perform a SELECT query on the table or view.\n     *\n     * @param columns - The columns to retrieve, separated by commas. Columns can be renamed when returned with `customName:columnName`\n     *\n     * @param options - Named parameters\n     *\n     * @param options.head - When set to `true`, `data` will not be returned.\n     * Useful if you only need the count.\n     *\n     * @param options.count - Count algorithm to use to count rows in the table or view.\n     *\n     * `\"exact\"`: Exact but slow count algorithm. Performs a `COUNT(*)` under the\n     * hood.\n     *\n     * `\"planned\"`: Approximated but fast count algorithm. Uses the Postgres\n     * statistics under the hood.\n     *\n     * `\"estimated\"`: Uses exact count for low numbers and planned count for high\n     * numbers.\n     */\n    select(columns, { head = false, count, } = {}) {\n        const method = head ? 'HEAD' : 'GET';\n        // Remove whitespaces except when quoted\n        let quoted = false;\n        const cleanedColumns = (columns !== null && columns !== void 0 ? columns : '*')\n            .split('')\n            .map((c) => {\n            if (/\\s/.test(c) && !quoted) {\n                return '';\n            }\n            if (c === '\"') {\n                quoted = !quoted;\n            }\n            return c;\n        })\n            .join('');\n        this.url.searchParams.set('select', cleanedColumns);\n        if (count) {\n            this.headers['Prefer'] = `count=${count}`;\n        }\n        return new PostgrestFilterBuilder_1.default({\n            method,\n            url: this.url,\n            headers: this.headers,\n            schema: this.schema,\n            fetch: this.fetch,\n            allowEmpty: false,\n        });\n    }\n    /**\n     * Perform an INSERT into the table or view.\n     *\n     * By default, inserted rows are not returned. To return it, chain the call\n     * with `.select()`.\n     *\n     * @param values - The values to insert. Pass an object to insert a single row\n     * or an array to insert multiple rows.\n     *\n     * @param options - Named parameters\n     *\n     * @param options.count - Count algorithm to use to count inserted rows.\n     *\n     * `\"exact\"`: Exact but slow count algorithm. Performs a `COUNT(*)` under the\n     * hood.\n     *\n     * `\"planned\"`: Approximated but fast count algorithm. Uses the Postgres\n     * statistics under the hood.\n     *\n     * `\"estimated\"`: Uses exact count for low numbers and planned count for high\n     * numbers.\n     *\n     * @param options.defaultToNull - Make missing fields default to `null`.\n     * Otherwise, use the default value for the column. Only applies for bulk\n     * inserts.\n     */\n    insert(values, { count, defaultToNull = true, } = {}) {\n        const method = 'POST';\n        const prefersHeaders = [];\n        if (this.headers['Prefer']) {\n            prefersHeaders.push(this.headers['Prefer']);\n        }\n        if (count) {\n            prefersHeaders.push(`count=${count}`);\n        }\n        if (!defaultToNull) {\n            prefersHeaders.push('missing=default');\n        }\n        this.headers['Prefer'] = prefersHeaders.join(',');\n        if (Array.isArray(values)) {\n            const columns = values.reduce((acc, x) => acc.concat(Object.keys(x)), []);\n            if (columns.length > 0) {\n                const uniqueColumns = [...new Set(columns)].map((column) => `\"${column}\"`);\n                this.url.searchParams.set('columns', uniqueColumns.join(','));\n            }\n        }\n        return new PostgrestFilterBuilder_1.default({\n            method,\n            url: this.url,\n            headers: this.headers,\n            schema: this.schema,\n            body: values,\n            fetch: this.fetch,\n            allowEmpty: false,\n        });\n    }\n    /**\n     * Perform an UPSERT on the table or view. Depending on the column(s) passed\n     * to `onConflict`, `.upsert()` allows you to perform the equivalent of\n     * `.insert()` if a row with the corresponding `onConflict` columns doesn't\n     * exist, or if it does exist, perform an alternative action depending on\n     * `ignoreDuplicates`.\n     *\n     * By default, upserted rows are not returned. To return it, chain the call\n     * with `.select()`.\n     *\n     * @param values - The values to upsert with. Pass an object to upsert a\n     * single row or an array to upsert multiple rows.\n     *\n     * @param options - Named parameters\n     *\n     * @param options.onConflict - Comma-separated UNIQUE column(s) to specify how\n     * duplicate rows are determined. Two rows are duplicates if all the\n     * `onConflict` columns are equal.\n     *\n     * @param options.ignoreDuplicates - If `true`, duplicate rows are ignored. If\n     * `false`, duplicate rows are merged with existing rows.\n     *\n     * @param options.count - Count algorithm to use to count upserted rows.\n     *\n     * `\"exact\"`: Exact but slow count algorithm. Performs a `COUNT(*)` under the\n     * hood.\n     *\n     * `\"planned\"`: Approximated but fast count algorithm. Uses the Postgres\n     * statistics under the hood.\n     *\n     * `\"estimated\"`: Uses exact count for low numbers and planned count for high\n     * numbers.\n     *\n     * @param options.defaultToNull - Make missing fields default to `null`.\n     * Otherwise, use the default value for the column. This only applies when\n     * inserting new rows, not when merging with existing rows under\n     * `ignoreDuplicates: false`. This also only applies when doing bulk upserts.\n     */\n    upsert(values, { onConflict, ignoreDuplicates = false, count, defaultToNull = true, } = {}) {\n        const method = 'POST';\n        const prefersHeaders = [`resolution=${ignoreDuplicates ? 'ignore' : 'merge'}-duplicates`];\n        if (onConflict !== undefined)\n            this.url.searchParams.set('on_conflict', onConflict);\n        if (this.headers['Prefer']) {\n            prefersHeaders.push(this.headers['Prefer']);\n        }\n        if (count) {\n            prefersHeaders.push(`count=${count}`);\n        }\n        if (!defaultToNull) {\n            prefersHeaders.push('missing=default');\n        }\n        this.headers['Prefer'] = prefersHeaders.join(',');\n        if (Array.isArray(values)) {\n            const columns = values.reduce((acc, x) => acc.concat(Object.keys(x)), []);\n            if (columns.length > 0) {\n                const uniqueColumns = [...new Set(columns)].map((column) => `\"${column}\"`);\n                this.url.searchParams.set('columns', uniqueColumns.join(','));\n            }\n        }\n        return new PostgrestFilterBuilder_1.default({\n            method,\n            url: this.url,\n            headers: this.headers,\n            schema: this.schema,\n            body: values,\n            fetch: this.fetch,\n            allowEmpty: false,\n        });\n    }\n    /**\n     * Perform an UPDATE on the table or view.\n     *\n     * By default, updated rows are not returned. To return it, chain the call\n     * with `.select()` after filters.\n     *\n     * @param values - The values to update with\n     *\n     * @param options - Named parameters\n     *\n     * @param options.count - Count algorithm to use to count updated rows.\n     *\n     * `\"exact\"`: Exact but slow count algorithm. Performs a `COUNT(*)` under the\n     * hood.\n     *\n     * `\"planned\"`: Approximated but fast count algorithm. Uses the Postgres\n     * statistics under the hood.\n     *\n     * `\"estimated\"`: Uses exact count for low numbers and planned count for high\n     * numbers.\n     */\n    update(values, { count, } = {}) {\n        const method = 'PATCH';\n        const prefersHeaders = [];\n        if (this.headers['Prefer']) {\n            prefersHeaders.push(this.headers['Prefer']);\n        }\n        if (count) {\n            prefersHeaders.push(`count=${count}`);\n        }\n        this.headers['Prefer'] = prefersHeaders.join(',');\n        return new PostgrestFilterBuilder_1.default({\n            method,\n            url: this.url,\n            headers: this.headers,\n            schema: this.schema,\n            body: values,\n            fetch: this.fetch,\n            allowEmpty: false,\n        });\n    }\n    /**\n     * Perform a DELETE on the table or view.\n     *\n     * By default, deleted rows are not returned. To return it, chain the call\n     * with `.select()` after filters.\n     *\n     * @param options - Named parameters\n     *\n     * @param options.count - Count algorithm to use to count deleted rows.\n     *\n     * `\"exact\"`: Exact but slow count algorithm. Performs a `COUNT(*)` under the\n     * hood.\n     *\n     * `\"planned\"`: Approximated but fast count algorithm. Uses the Postgres\n     * statistics under the hood.\n     *\n     * `\"estimated\"`: Uses exact count for low numbers and planned count for high\n     * numbers.\n     */\n    delete({ count, } = {}) {\n        const method = 'DELETE';\n        const prefersHeaders = [];\n        if (count) {\n            prefersHeaders.push(`count=${count}`);\n        }\n        if (this.headers['Prefer']) {\n            prefersHeaders.unshift(this.headers['Prefer']);\n        }\n        this.headers['Prefer'] = prefersHeaders.join(',');\n        return new PostgrestFilterBuilder_1.default({\n            method,\n            url: this.url,\n            headers: this.headers,\n            schema: this.schema,\n            fetch: this.fetch,\n            allowEmpty: false,\n        });\n    }\n}\nexports.default = PostgrestQueryBuilder;\n//# sourceMappingURL=PostgrestQueryBuilder.js.map\n};"],
"names":["shadow$provide","global","require","module","exports","__importDefault","mod","__esModule","Object","defineProperty","value","PostgrestFilterBuilder_1","PostgrestQueryBuilder","constructor","url","headers","schema","fetch","select","columns","head","count","method","quoted","cleanedColumns","split","map","c","test","join","searchParams","set","default","allowEmpty","insert","values","defaultToNull","prefersHeaders","push","Array","isArray","reduce","acc","x","concat","keys","length","uniqueColumns","Set","column","body","upsert","onConflict","ignoreDuplicates","undefined","update","delete","unshift"]
}
