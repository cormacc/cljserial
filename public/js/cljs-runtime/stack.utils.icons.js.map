{"version":3,"sources":["stack/utils/icons.cljs"],"mappings":";AAUA,iCAAA,jCAAKA;AAOL,qCAAA,rCAAMC,kFAAeC;AAArB,AACE,GACE,AAACC,qBAAKD;AACN,OAACE,6CAAKH,mCAAcC;;AAFtB,GAIE,AAACG,wBAAQH;AACT,IAAMA,WAAK,2IAAA,zIACE,6CAAA,7CAACY,4FAAK,AAACJ,gBAAMR,QACb,AAACa,eAAKb,MAEAA;;IAJnBI,aAK6BJ;IAL7BK,aAAA,AAAAC,cAAAF;IAAAG,eAAA,AAAAC,gBAAAH;IAAAA,iBAAA,AAAAI,eAAAJ;UAAAE,NAKOO;IALPP,mBAAA,AAAAC,gBAAAH;IAAAA,iBAAA,AAAAI,eAAAJ;YAAAE,RAKWQ;eALXV,XAKmBW;IALnBN,aAMuB,+BAAA,0GAAA,qCAAA,mFAAA,qKAAA,AAAA,mFAAA,vfACE,AAACO,qBAAKF,2FAAQA,MAAMC,mBACpB,6BAAA,5BAAG,AAACE,gBAAMlB,0GAAc,6CAAA,7CAACmB,gIAAMJ,cAAOC,0GAC3BA;;gBATpC,AAAAL,4CAAAD,WAAA,IAAA,vEAMOK;mBANP,AAAAJ,4CAAAD,WAAA,IAAA,1EAMaM;IAIPD,YAAM,iBAAAK,WAAQL;AAAR,AAAA,GACE,mDAAA,nDAACM,0BAAU,AAACC,eAAKtB;AACjB,qDAAAoB,SAAA,vDAACG,2GAAW,AAAA,kFAAM,AAACD,eAAKtB;;AAF1BoB;;;IAGNJ,eAAS,AAACQ,4CAAIzB,mCAAciB;AAblC,AAcE,oBAAID;AACF,OAAAU,yCAAA,AAAAC,mDAAA,vDAAGZ,4CAAIC,YAAMC;;AACb,OAAAS,yCAAA,AAAAC,sDAAA,1DAAGZ,4CAAIE;;;AArBb,AAuBQhB;;;;;AAGV,AAAA,+BAAA,uCAAA2B,tEAAOO;AAAP,AAAA,IAAAN,aAAA,AAAAC,mBAAAF;IAAAG,aAAA,CAAAF;YAAA,AAAAjB,4CAAAmB,WAAA,IAAA,nEAAmBkB;IAAnBjB,mBAAA;AAAA,AAAA;AAAA,GAAAC;AAAA,AAAA,IAAAC,2BAAA,AAAAC;AAAA,AAAA,oBAAAD;AAAA,AAAA,IAAAE,yBAAAF;AAAA,AAAA,CAAAE,uDAAAA,yDAAAA;;AAAA;;AAAA;;AACE,OAAAc,wBAAA,MAAA,AAAAC,8CAAA,CAAA,MAAA,KAAA,2BAAA,OAAA,OAAA,3DAA8BF;;AADhC,AAAA,GAAAhB;AAAA,IAAAI,gDAAAC;IAAAC,gDAAAJ;AAAA,AAAA,CAAAG,yCAAAC;;AAAA,IAAA,AAAA,GAAA,EAAA,AAAArB,qBAAAW,iBAAA,CAAAA,cAAA;AAAA;AAAA,AAAA,MAAA,KAAAW,MAAA,CAAA,kBAAA,CAAA,qGAAAX,sBAAA,KAAA;;;AAAA,OAAAG;UAAA,AAAA,CAAAM,yCAAAD;;AAAA,OAAAL;;;;AAAA,CAAA,AAAAG,oDAAA;;AAAA,AAAA,CAAA,AAAAA,2CAAA;;AAAA,AAAAM,sBAAAN,6BAAA,OAAA,iBAAAO,WAAA,EAAA,QAAA;AAAA,AAAAA;;;AAAA,GAAAT;AAAA,AAAA,GAAA,QAAAU,mCAAAC,uCAAAC;AAAA,AAAA,IAAAC,2BAAA,AAAAC;AAAA,AAAA,CAAAD,yDAAAA,uDAAAX,6BAAA,GAAA,KAAA,QAAAW,oCAAAX,6BAAA,GAAA,KAAA;;AAAA,AAAAa,8BAAAb,6BAAA,AAAAA;;AAAA,CAAA,AAAAA,sDAAAW;;AAAA;;AAAA;;AAAA","names":["stack.utils.icons/default-size","stack.utils.icons/hiccup->react","form","cljs.core/seq?","cljs.core.mapv","cljs.core/vector?","vec__97414","seq__97415","cljs.core/seq","first__97416","cljs.core/first","cljs.core/next","vec__97417","cljs.core.nth","cljs.core._EQ_","cljs.core/rest","tag","attrs","children","cljs.core/map?","cljs.core/count","cljs.core.into","G__97434","cljs.core/contains?","cljs.core/meta","cljs.core.assoc","cljs.core.map","uix.compiler.alpha/component-element","uix.compiler.attributes/interpret-props","props__46991__auto__","props97442","uix.core/glue-args","vec__97443","f__46992__auto__","js/goog.DEBUG","temp__5823__auto__","stack.utils.icons/round-icon","f__46909__auto__","*current-component*-orig-val__97451","uix.core/*current-component*","*current-component*-temp-val__97452","js/Error","js/Object.defineProperty","obj97458","js/window","js/window.uix","js/window.uix.dev","sig__46918__auto__","js/window.uix.dev.signature!","js/window.uix.dev.register!","props","uix.compiler.aot/>el","uix.compiler.attributes/interpret-attrs"],"sourcesContent":["(ns stack.utils.icons\n  (:require-macros [stack.utils.icons])\n  (:require\n   ; These two used by macros in icons.clj\n   [fontawesome.icons]\n   [phosphor.icons]\n   [uix.core :refer [defui $]]))\n\n\n;; TODO: Handle this better within icon macro\n(def default-size \"2rem\")\n\n;; This is adapted from the hiccup->uix function in as yet unreleased version\n;; of uix (>1.0.1), written by Roman Liutikov\n;; The original produces markup to paste as source, whereas this just\n;; removes some syntax quoting etc. in the last couple of lines to give\n;; js/react output instead.\n(defn hiccup->react [form]\n  (cond\n    (seq? form)\n    (mapv hiccup->react form)\n\n    (vector? form)\n    (let [form (cond\n                 (= :> (first form))\n                 (rest form)\n\n                 :else form)\n          [tag attrs & children] form\n          [attrs children] (cond\n                             (map? attrs) [attrs children]\n                             (> (count form) 1) [nil (into [attrs] children)]\n                             :else [nil children])\n          attrs (cond-> attrs\n                  (contains? (meta form) :key)\n                  (assoc :key (:key (meta form))))\n          children (map hiccup->react children)]\n      (if attrs\n        ($ tag attrs children)\n        ($ tag children)))\n\n    :else form))\n\n;; TODO: refactor this as a macro to allow one-shot use rather than (round-icon (icon ...))\n(defui round-icon [props]\n  ($ :.btn.btn-ghost.btn-circle props))\n"]}