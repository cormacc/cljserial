{"version":3,"sources":["gadget/datafy.cljc"],"mappings":";AAKA,AAAKA,yBAAS,6CAAA,7CAACC;AAEf,mCAAA,nCAAMC,8EAAoBC;AAA1B,AACE,OAACC,mDAAMJ,uBAASK,eAAKF;;AAEvB,8BAAA,9BAAMG,oEAAeC;AAArB,AACE,GACE,OAASA;AADX;;AAAA,GAEE,cAAAC,bAAUD;AAFZ;;AAAA,GAGE,OAASA;AAHX;;AAAA,GAIE,AAACE,yBAASF;AAJZ;;AAAA,GAKE,AAACG,qBAAKH;AALR;;AAAA,GAME,AAACI,wBAAQJ;AANX;;AAAA,GAOE,AAACK,sBAAML;AAPT;;AAAA,GAQE,MAAA,LAAMA;AARR;;AAAA,GASE,AAACM,qBAAKN;AATR;;AAAA,GAUE,cAAAO,bAASP;AAVX;;AAAA,GAWE,AAACQ,qBAAKR;AAXR;;AAAA,GAYE,AAACS,sBAAMT;AAZT;;AAAA,GAaE,AAACU,uBAAMV;AAbT;;AAAA,AAAA;;;;;;;;;;;;;;;;AAgBF,+BAAA,/BAAMW,sEAAgBC;AAAtB,AACE,IAAAC,WAAA,AAAAC,gBAAiBrB;IAAjBsB,aAAAF;IAAAG,aAAA,AAAAC,cAAAF;IAAAG,eAAA,AAAAC,gBAAAH;IAAAA,iBAAA,AAAAI,eAAAJ;QAAAE,JAAQtB;SAARoB,LAAYQ;AAAZ,AAAA,IAAAX,eAAAA;;AAAA,AAAA,IAAAQ,aAAAR;IAAAS,aAAA,AAAAL,cAAAI;IAAAE,eAAA,AAAAJ,gBAAAG;IAAAA,iBAAA,AAAAF,eAAAE;YAAAC,RAAQ3B;aAAR0B,TAAYE;AAAZ,AACE,IAAAC,mBAAI,yBAAA,6GAAA,pHAAM7B,OAAE,CAACA,sCAAAA,6CAAAA,TAAEgB,0BAAAA;AAAf,AAAA,oBAAAa;AAAAA;;AACI,IAAAC,qBAAY,AAACT,cAAIO;AAAjB,AAAA,GAAAE;AAAA,aAAAA,TAASF;AAAT,AACE,eAAOA;;;;AACP,OAACzB,4BAAca;;;;;;AAEzB,GAAA,QAAAe,mCAAAC,0CAAAC;AAAA;AAAA,AAAA,uBAAA,iBAAAC,6BAAA,AAAApC,6CAAA,lHAAU6C;IAAVR,6BAAA,AAAArC,6CAAA;IAAAsC,6BAAA,AAAAtC,6CAAA;IAAAuC,iCAAA,AAAAvC,6CAAA;IAAAwC,0BAAA,AAAAC,4CAAA,mCAAA,gEAAA,iBAAAC,eAAA;AAAA,AAAA,QAAAA,6CAAAA,+CAAAA;;AAAA,AAAA,YAAAC,kBAAA,AAAAC,+CAAA,gBAAA,UAAiB,WAAKE;AAAL,AAAW,OAAC7B,6BAAe6B;GAA5C,4DAAAN,wBAAAJ,2BAAAC,2BAAAC,2BAAAC;;;AAEA,AAAAM,kEAAA,4DAAA,WAA4BC;AAA5B,AACE,OAACC,sBAAcD;;AAEjB,uBAAA,vBAAME,sDAAQF,KAAKG;;AAAnB,AACE,IAAAjB,qBAAW,AAACP,gBAAMwB;AAAlB,AAAA,oBAAAjB;AAAA,QAAAA,JAASkB;AAAT,AACE,IAAMJ,WAAK,AAACD,mDAAOC;IACbK,YAAU,EAAI,EAAA,GAAA,aAAA,SAAA,EAAA,EAAA,WAAA,CAAAC,gCAAA,yCAAA,KAAA,EAAA,EAAA,8CAAA,AAAAC,uEAAA,QAAA,AAAAA,7CAAYC,+EAAAA,tRAAoBR,qEAAAA,kDAAAA,2GAAAA,+EAAAA,YAClC,6CAAA,7CAACS,gFAAQ,AAACC,yBAAkBV,WAC5BA;AAHlB,AAIE,eAAO,AAACW,mBAAWX,SAAKI,EAAE,AAACT,4CAAIU,UAAUD;eAAI,AAACQ,eAAKT;;;;;AACrDH","names":["gadget.datafy/type-fns","cljs.core.atom","gadget.datafy/add-type-inference","f","cljs.core.swap_BANG_","cljs.core/conj","gadget.datafy/symbolic-type","v","cljs.core/Keyword","cljs.core/boolean?","cljs.core/map?","cljs.core/vector?","cljs.core/list?","cljs.core/set?","cljs.core/Symbol","cljs.core/seq?","cljs.core/uuid?","gadget.std/date?","gadget.datafy/synthetic-type","value","G__61369","cljs.core/deref","vec__61370","seq__61371","cljs.core/seq","first__61372","cljs.core/first","cljs.core/next","vec__61373","seq__61374","first__61375","fs","or__5002__auto__","temp__5821__auto__","js/gadget","js/gadget.datafy","js/gadget.datafy.datafy","method-table__5599__auto__","prefer-table__5600__auto__","method-cache__5601__auto__","cached-hierarchy__5602__auto__","hierarchy__5603__auto__","cljs.core.get","fexpr__61387","cljs.core/MultiFn","cljs.core.symbol","gadget.datafy/datafy","data","clojure.datafy/datafy","gadget.datafy/nav-in","path","p","navigable","cljs.core/PROTOCOL_SENTINEL","cljs.core/native-satisfies?","gadget.browsable/Browsable","cljs.core.into","gadget.browsable/entries","clojure.datafy/nav","cljs.core/rest"],"sourcesContent":["(ns gadget.datafy\n  (:require [clojure.datafy :as datafy]\n            [gadget.browsable :as browsable]\n            [gadget.std :refer [date?]]))\n\n(def type-fns (atom nil))\n\n(defn add-type-inference [f]\n  (swap! type-fns conj f))\n\n(defn symbolic-type [v]\n  (cond\n    (string? v) :string\n    (keyword? v) :keyword\n    (number? v) :number\n    (boolean? v) :boolean\n    (map? v) :map\n    (vector? v) :vector\n    (list? v) :list\n    (nil? v) :nil\n    (set? v) :set\n    (symbol? v) :symbol\n    (seq? v) :seq\n    (uuid? v) :uuid\n    (date? v) :date\n    :default :object))\n\n(defn synthetic-type [value]\n  (loop [[f & fs] @type-fns]\n    (or (when f (f value))\n        (if-let [fs (seq fs)]\n          (recur fs)\n          (symbolic-type value)))))\n\n(defmulti datafy (fn [data] (synthetic-type data)))\n\n(defmethod datafy :default [data]\n  (datafy/datafy data))\n\n(defn nav-in [data path]\n  (if-let [p (first path)]\n    (let [data (datafy data)\n          navigable (if (satisfies? browsable/Browsable data)\n                      (into {} (browsable/entries data))\n                      data)]\n      (recur (datafy/nav data p (get navigable p)) (rest path)))\n    data))\n"],"x_google_ignoreList":[0]}