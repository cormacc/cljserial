{"version":3,"sources":["stack/utils/hsm.cljs"],"mappings":"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","names":["stack.utils.hsm/get-state","context","stack.utils.hsm/in-state","current-state","match-state","p1__96316#","cljs.core/some","cljs.core._EQ_","cljs.core/flatten","stack.utils.hsm/get-state-events","state","cljs.core/contains?","cljs.core/keys","stack.utils.hsm/find-machine-events","top-state","stack.utils.collections/find-all","cljs.core.map","cljs.core/set","var_args","G__96335","stack.utils.hsm/recurse-state-events","js/Error","parent-state","state-v","stack.utils.hsm.recurse_state_events","event-v","cljs.core/empty?","vec__96347","seq__96348","cljs.core/seq","first__96349","cljs.core/first","cljs.core/next","state-v-first","state-v-rest","next-state","G__96352","event-v-new","cljs.core.reduce","cljs.core/conj","G__96354","stack.utils.hsm/handled-events","machine","stack.utils.hsm/can-handle","event-id","stack.utils.hsm.handled_events","stack.utils.hsm/sub-name","hsm-id","sub-tag","cljs.core.keyword","cljs.core/name","stack.utils.hsm/sub-state-name","stack.utils.hsm/reg-sub-state","sub-name","__run-fn-form","__kind","__ns","__id","__level","sf","taoensso.telemere.impl/*rt-sig-filter*","__inst","js/Date","__thread","__root0","taoensso.telemere.impl/*trace-root*","__otel-context1","__uid","__root1","__run-result","signal__42410__auto__","cljs.core/Delay","signal__42401__auto__","taoensso.telemere.impl/Signal","taoensso.telemere/*ctx*","taoensso.telemere.impl/*trace-parent*","temp__5821__auto__","taoensso.telemere/*middleware*","sig-middleware__42402__auto__","taoensso.telemere.impl/dispatch-signal!","taoensso.telemere.impl/WrappedSignal","G__96386","G__96387","G__96388","G__96389","stack.utils.dbfx/reg-sub","hsm-context","_","p__96394","map__96395","cljs.core/--destructure-map","cljs.core.get","stack.utils.hsm/register-handler","id","G__96429","G__96430","G__96431","stack.utils.dbfx/reg-event-db","stack.services.core/path-interceptor","p__96432","vec__96434","seq__96435","first__96436","db","_dispatch-id","event-type","event-params","G__96439","G__96440","G__96441","statecharts.core/transition","stack.utils.hsm/register","stack.services.core/register","G__96452","stack.utils.dbfx/dispatch","statecharts.core/initialize","stack.utils.hsm/use-sub-state","G__96457","stack.utils.dbfx/use-sub"],"sourcesContent":["(ns stack.utils.hsm\n  (:require\n   [taoensso.telemere :as t]\n   [statecharts.core :as hsm]\n   [stack.services.core :as services]\n   [stack.utils.dbfx :as dbfx]\n   [stack.utils.collections :as c-utils]))\n\n; See https://lucywang000.github.io/clj-statecharts/\n; Utilities to integrate clj-statecharts with re-frame\n\n;-- Helper functions\n\n(defn get-state [context]\n  (:_state context))\n\n(defn in-state [current-state match-state]\n  (some #(= match-state %) (flatten [current-state])))\n\n;Remnants of older more complex re-frame integration -- `handled-events` and `can-handle`\n;may be useful for future introspection...\n(defn- get-state-events [state]\n  (if (contains? state :on)\n    (keys (:on state))\n    nil))\n\n(defn- find-machine-events\n  [top-state]\n  (->> (c-utils/find-all top-state :on)\n       (map keys)\n       flatten\n       set))\n\n(defn- recurse-state-events\n  ([parent-state state-v] (recurse-state-events parent-state (flatten [state-v]) []))\n  ([parent-state state-v event-v]\n   (if (empty? state-v)\n     (set event-v) ; we're done\n     (let [[state-v-first & state-v-rest] state-v\n           next-state (state-v-first (:states parent-state))\n           event-v-new (reduce conj event-v (get-state-events next-state))]\n       (recur next-state state-v-rest event-v-new)))))\n\n(defn handled-events\n  ([machine] (find-machine-events machine))\n  ([machine state-v] (recurse-state-events machine state-v)))\n\n(defn can-handle [machine state-v event-id]\n  (contains? (handled-events machine state-v) event-id))\n\n\n\n;;-- re-frame integration\n\n(defn sub-name [hsm-id sub-tag]\n  (keyword (str (name hsm-id) \"-\" sub-tag)))\n\n(defn sub-state-name [hsm-id]\n  (sub-name hsm-id \"state\"))\n\n(defn reg-sub-state\n  \"Define a subscription for the state of a given statemachine ID\"\n  [hsm-id]\n  (let [sub-name (sub-state-name hsm-id)]\n    (t/event! ::reg-sub-state {:level :debug :data {:hsm-id hsm-id}})\n    (dbfx/reg-sub\n     sub-name\n     ;; :<- [(sub-context-name hsm-id)]\n     :<- [hsm-id]\n     (fn [hsm-context _]\n       (get-state hsm-context)))))\n\n(defn register-handler [{:keys [id] :as machine}]\n  (t/log! {:level :info :data {:id id}} \"Registering handler...\")\n  (dbfx/reg-event-db\n   id\n   [(services/path-interceptor [id])]\n   (fn [db [_dispatch-id event-type & event-params]]\n   ;;N.B. `db` here is the current statemachine context\n     (hsm/transition machine db {:type event-type :data event-params}))))\n\n;; API\n(defn register [machine]\n  (let [hsm-id (:id machine)]\n    (t/event! ::register {:data {:hsm-id hsm-id}})\n    (services/register hsm-id)\n    (reg-sub-state hsm-id)\n    (register-handler machine)\n    (dbfx/dispatch [:init-service {:id hsm-id :data (hsm/initialize machine)}])))\n\n(defn use-sub-state [hsm-id]\n  (dbfx/use-sub [(sub-state-name hsm-id)]))\n"]}