{"version":3,"sources":["cljserial/utils/hsm.cljs"],"mappings":"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","names":["cljserial.utils.hsm/Id","cljserial.utils.hsm/State","cljserial.utils.hsm/Context","cljserial.utils.hsm/get-state","context","cljserial.utils.hsm/in-state","current-state","match-state","p1__56334#","cljs.core/some","cljs.core._EQ_","cljs.core/flatten","cljserial.utils.hsm/get-state-events","state","cljs.core/contains?","cljs.core/keys","cljserial.utils.hsm/find-machine-events","top-state","cljserial.utils.collections/find-all","cljs.core.map","cljs.core/set","var_args","G__56336","cljserial.utils.hsm/recurse-state-events","js/Error","parent-state","state-v","cljserial.utils.hsm.recurse_state_events","event-v","cljs.core/empty?","vec__56337","seq__56338","cljs.core/seq","first__56339","cljs.core/first","cljs.core/next","state-v-first","state-v-rest","next-state","G__56340","event-v-new","cljs.core.reduce","cljs.core/conj","G__56342","cljserial.utils.hsm/handled-events","machine","cljserial.utils.hsm/can-handle","event-id","cljserial.utils.hsm.handled_events","cljserial.utils.hsm/handle","hsm-id","hsm-impl","event","hsm-context","vec__56343","seq__56344","first__56345","event-params","js/goog.debug.LOGGING_ENABLED","lambdaisland.glogi.log","cljs.core/identity","new-context","G__56346","G__56347","G__56348","statecharts.core/transition","new-state","cljserial.utils.hsm/sub-name","sub-tag","cljs.core.keyword","cljs.core/name","cljserial.utils.hsm/sub-context-name","cljserial.utils.hsm/sub-state-name","G__56354","G__56355","cljserial.utils.dbfx/reg-event-db","p__56357","vec__56358","cljs.core.nth","app-db","_event_id","hsm","statecharts.core/initialize","cljs.core/assoc-in","cljserial.utils.hsm/reg-sub-context","sub-name","G__56365","G__56366","cljserial.utils.dbfx/reg-sub","_","cljs.core.get","cljserial.utils.hsm/reg-sub-state","G__56367","G__56368","G__56369","G__56370","cljserial.utils.hsm/reg-event-handler","G__56373","G__56374","G__56375","G__56376","cljserial.utils.dbfx/path","cljserial.utils.hsm/reg-event-handlers","hsm-data","event-ids","cljs.core/count","seq__56382","chunk__56383","count__56384","i__56385","temp__5804__auto__","cljs.core/chunked-seq?","c__5568__auto__","cljs.core/chunk-first","cljs.core/chunk-rest","cljserial.utils.hsm/register","js/document","G__56391","cljserial.utils.dbfx/dispatch","cljserial.utils.hsm/use-sub-context","G__56394","cljserial.utils.dbfx/use-sub","cljserial.utils.hsm/use-sub-state","G__56400"],"sourcesContent":["(ns cljserial.utils.hsm\n  (:require [statecharts.core :as hsm]\n            [lambdaisland.glogi :as log]\n            [cljserial.utils.dbfx :as dbfx]\n            [cljserial.utils.collections :as c-utils]))\n\n; See https://lucywang000.github.io/clj-statecharts/\n\n;-- Schema (malli)\n(def Id :keyword)\n(def State [:sequential :keyword])\n\n;; Context for a single statemachine\n(def Context\n  [:map\n   ;;Context can include additional keys -- malli schema is open, so not a problem\n   [:_state State]])\n\n\n;-- Helper functions\n\n(defn get-state [context]\n  (:_state context))\n\n(defn in-state [current-state match-state]\n  (some #(= match-state %) (flatten [current-state])))\n\n(defn- get-state-events [state]\n  (if (contains? state :on)\n    (keys (:on state))\n    nil))\n\n(defn- find-machine-events\n  [top-state]\n  (->> (c-utils/find-all top-state :on)\n       (map keys)\n       flatten\n       set))\n\n(defn- recurse-state-events\n  ([parent-state state-v] (recurse-state-events parent-state (flatten [state-v]) []))\n  ([parent-state state-v event-v]\n   (if (empty? state-v)\n     (set event-v) ; we're done\n     (let [[state-v-first & state-v-rest] state-v\n           next-state (state-v-first (:states parent-state))\n           event-v-new (reduce conj event-v (get-state-events next-state))]\n       (recur next-state state-v-rest event-v-new)))))\n\n(defn handled-events\n  ([machine] (find-machine-events machine))\n  ([machine state-v] (recurse-state-events machine state-v)))\n\n(defn can-handle [machine state-v event-id]\n  (contains? (handled-events machine state-v) event-id))\n\n(defn- handle [hsm-id hsm-impl event hsm-context]\n  (let [[event-id & event-params] event\n        state (get-state hsm-context)]\n    (if (not (can-handle hsm-impl state event-id))\n      (do\n        (log/error :handler/no-handler-this-state (str hsm-id \"@\" state \"/\" event-id \" not handled!\"))\n        hsm-context)\n      (let [new-context (hsm/transition hsm-impl hsm-context {:type event-id :data event-params})\n            new-state (get-state new-context)]\n        (log/debug :handle/transition (str hsm-id \"@\" state \"/\" event-id \"->\" new-state))\n        (log/trace :handle/event event)\n        new-context))))\n\n;; re-frame / dbfx integration\n\n(defn sub-name [hsm-id sub-tag]\n  (keyword (str (name hsm-id) \"-\" sub-tag)))\n\n(defn sub-context-name [hsm-id]\n  (sub-name hsm-id \"context\"))\n\n(defn sub-state-name [hsm-id]\n  (sub-name hsm-id \"state\"))\n\n(dbfx/reg-event-db\n :hsm-init\n (fn [app-db [_event_id hsm]]\n   (let [hsm-id (:id hsm)\n         context (hsm/initialize hsm)\n         state (get-state context)]\n     (log/config :init/transition (str hsm-id \"/\" _event_id \"->\" state))\n     (log/trace :init/context context)\n     (assoc-in app-db [hsm-id] context))))\n\n;;-- ... subscriptions\n\n;;-- .... layer 2 subscriptions\n(defn reg-sub-context\n  \"Define a subscription for the context of a given statemachine ID\"\n  [hsm-id]\n  (let [sub-name (sub-context-name hsm-id)]\n    (log/config :reg-sub/context hsm-id)\n    (dbfx/reg-sub\n     sub-name\n     (fn [app-db _]\n     ;;TODO: Add check for existence of hsm-id key?\n       (get app-db hsm-id)))))\n\n;;-- ..... layer 3 subscription\n(defn reg-sub-state\n  \"Define a subscription for the state of a given statemachine ID\"\n  [hsm-id]\n  (let [sub-name (sub-state-name hsm-id)]\n    (log/config :reg-sub/state hsm-id)\n    (dbfx/reg-sub\n     sub-name\n     :<- [(sub-context-name hsm-id)]\n     (fn [hsm-context _]\n       (get-state hsm-context)))))\n\n(defn reg-event-handler\n  [hsm-id event-id hsm-impl]\n  (log/info :hsm-event-handler (str \"Registering \" event-id \" handler for \" hsm-id))\n  (dbfx/reg-event-db\n   event-id\n   (dbfx/path [hsm-id]) ;hsm context path interceptor\n   (fn [hsm-context event]\n     (handle hsm-id hsm-impl event hsm-context))\n   ))\n\n(defn reg-event-handlers\n  [hsm-data]\n  (let [hsm-id (:id hsm-data)\n        event-ids (handled-events hsm-data)]\n    (log/info :register/handlers (str \"Registering \" (count event-ids) \" event handlers for \" hsm-id))\n    (doseq [event-id event-ids]\n      (reg-event-handler hsm-id event-id hsm-data))))\n\n;; API\n(defn register [hsm-data]\n  (let [hsm-id (:id hsm-data)]\n    (log/config :register/on-dom-content-loaded hsm-id)\n    (.addEventListener js/document \"DOMContentLoaded\" #(dbfx/dispatch [:hsm-init hsm-data]))\n\n    (reg-sub-context hsm-id)\n    (reg-sub-state hsm-id)\n    (reg-event-handlers hsm-data)))\n\n(defn use-sub-context [hsm-id]\n  (dbfx/use-sub [(sub-context-name hsm-id)]))\n\n(defn use-sub-state [hsm-id]\n  (dbfx/use-sub [(sub-state-name hsm-id)]))\n"]}