{"version":3,"sources":["re_frame/flow/alpha.cljc"],"mappings":"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","names":["re-frame.flow.alpha/db-path?","cljs.core/vector?","re-frame.flow.alpha/flow?","cljs.core/map?","re-frame.flow.alpha/flow<-?","cljs.core.comp","cljs.core/some?","re-frame.flow.alpha/flows","re-frame.interop/ratom","re-frame.flow.alpha/lookup","id","cljs.core/deref","cljs.core.get","p__86688","map__86689","cljs.core/--destructure-map","re-frame.flow.alpha/input-ids","inputs","live-inputs","cljs.core/vec","cljs.core.distinct","cljs.core.into","cljs.core.remove","p1__86687#","cljs.core.map","or__5002__auto__","cljs.core.concat","cljs.core/vals","re-frame.flow.alpha/topsort","flows","re-frame.utils/map-vals","re-frame.utils/remove-orphans","re-frame.utils/topsort-kahn","cljs.core/reverse","re-frame.flow.alpha/default","cljs.core/constantly","re-frame.utils/deep-dissoc","p__86707","map__86708","re-frame.flow.alpha/stale-in-flows","cljs.core/reduce-kv","p__86709","map__86710","m","k","path","G__86712","cljs.core/contains?","cljs.core/set","cljs.core.assoc","p__86713","map__86714","re-frame.flow.alpha/stale-out-flows","p__86719","map__86720","bad-inputs","cljs.core.filter","cljs.core/val","G__86721","cljs.core/seq","p__86727","map__86728","re-frame.flow.alpha/validate-inputs","seq__86729","chunk__86731","count__86732","i__86733","vec__86754","cljs.core.nth","temp__5823__auto__","cljs.core/chunked-seq?","c__5525__auto__","cljs.core/chunk-first","cljs.core/chunk-rest","cljs.core/count","vec__86757","cljs.core/first","cljs.core/next","_","input","cljs.core/not","cljs.core.some_fn","js/Error","re-frame.flow.alpha/warn-stale-dependencies","new-flow","ins","outs","warn-ins","p__86765","vec__86768","warn-outs","p__86771","vec__86772","cljs.core.mapcat","p__86778","vec__86779","input-id","warnings","cljs.core.apply","re-frame.loggers/console","var_args","G__86788","re-frame.flow.alpha/reg-flow","re_frame.flow.alpha.reg_flow","cljs.core.swap_BANG_","cljs.core/assoc","cljs.core/with-meta","cljs.core.merge","reagent.ratom/make-reaction","cljs.core.get_in","re-frame.db/app-db","G__86804","re-frame.flow.alpha/clear-flow","cljs.core/vary-meta","cljs.core/update","cljs.core/into","cljs.core/empty","flow","cljs.core/dissoc","re-frame.flow.alpha/flow<-","re-frame.flow.alpha/flow-fx-ids","p__86812","vec__86813","re-frame.flow.alpha/do-effect","v","fexpr__86816","re_frame.registrar.get_handler","re-frame.flow.alpha/remove-fx","cljs.core.partial","cljs.core/remove","re-frame.flow.alpha/do-fx","re_frame.interceptor.__GT_interceptor","p__86821","map__86822","map__86823","fx","effects","ctx","flow-fx","cljs.core/select-keys","cljs.core/filterv","cljs.core.doall","cljs.core.update_in","cljs.core.update","re-frame.flow.alpha/resolve-input","db","G__86826","re-frame.flow.alpha/resolve-inputs","cljs.core/empty?","p__86829","map__86830","re-frame.flow.alpha/run","cleanup","live?","output","cleared?","map__86835","new?","cljs.core/meta","old-db","re_frame.interceptor.get_coeffect","re_frame.interceptor.get_effect","id->old-in","id->in","dirty?","cljs.core.not_EQ_","id->old-live-in","id->live-in","bardo","new-db","G__86841","cljs.core._EQ_","G__86844","cljs.core/assoc-in","G__86849","re-frame.interceptor/assoc-effect","re-frame.flow.alpha/with-cleared","p__86852","vec__86856","cljs.core.gensym","re-frame.flow.alpha/interceptor","all-flows","cljs.core.reduce","cljs.core/memoize"],"sourcesContent":["(ns re-frame.flow.alpha\n  (:require\n   #?(:cljs [re-frame.db :as db])\n   [re-frame.utils :as u]\n   [re-frame.registrar :refer [get-handler]]\n   [re-frame.loggers     :refer [console]]\n   [re-frame.interceptor :refer [->interceptor get-effect get-coeffect assoc-effect]]\n   [re-frame.interop :as interop]\n   #?(:cljs [reagent.core :as r])))\n\n(def db-path? vector?)\n\n(def flow? map?)\n\n(def flow<-? (comp some? ::flow<-))\n\n(def flows (interop/ratom {}))\n\n(defn lookup [id] (get @flows id))\n\n(defn input-ids [{:keys [inputs live-inputs]}]\n  (vec (distinct (into []\n                       (comp (remove db-path?)\n                             (map #(or (::flow<- %) %)))\n                       (concat (vals inputs) (vals live-inputs))))))\n\n(defn topsort [flows]\n  (->> flows\n       (u/map-vals input-ids)\n       u/remove-orphans\n       u/topsort-kahn\n       reverse\n       (map flows)))\n\n(defn default [id]\n  {:id id\n   :path [id]\n   :inputs {}\n   :output (constantly true)\n   :live? (constantly true)\n   :live-inputs {}\n   :cleanup u/deep-dissoc})\n\n(defn stale-in-flows [flows {:keys [inputs]}]\n  (reduce-kv (fn [m k {:keys [path]}]\n               (cond-> m\n                 (contains? (set (vals inputs)) path) (assoc k path)))\n             {}\n             flows))\n\n(defn stale-out-flows [flows {:keys [path]}]\n  (reduce-kv (fn [m k {:keys [inputs]}]\n               (let [bad-inputs (into {} (filter (comp #{path} val)) inputs)]\n                 (cond-> m (seq bad-inputs) (assoc k bad-inputs))))\n             {}\n             flows))\n\n(defn validate-inputs [{:keys [inputs]}]\n  (doseq [[_ input] inputs\n          :when (not ((some-fn db-path? flow<-?) input))]\n    (throw (#?(:clj Exception. :cljs js/Error.) \"bad input\"))))\n\n(defn warn-stale-dependencies [flows new-flow]\n  (let [ins (stale-in-flows flows new-flow)\n        outs (stale-out-flows flows new-flow)\n        warn-ins (fn [[id path]]\n                   [\"- Input\" (str path)\n                    \"matches the output path of\" (str id) \".\\n\"\n                    \"  For an explicit dependency, change it to (re-frame/flow<-\"\n                    (str id \").\") \"\\n\"])\n        warn-outs (fn [[id inputs]]\n                    (mapcat (fn [[input-id _]]\n                              [\"- Output\" (str (:path new-flow))\n                               \"matches the input\" (str input-id)\n                               \"of the flow\" (str id \".\\n\")\n                               \"  For an explicit dependency, change that input to\"\n                               \"(re-frame/flow<-\" (str (:id new-flow) \").\") \"\\n\"])\n                            inputs))\n        warnings (concat (mapcat warn-ins ins) (mapcat warn-outs outs))]\n    (when (seq warnings)\n      (apply console :warn \"Warning: You called `reg-flow` with the flow\" (str (:id new-flow))\n             \"but this created stale dependencies.\\n\"\n             \"Your flows may not evaluate in the correct order.\\n\"\n             warnings))))\n\n(defn reg-flow\n  ([k m]\n   (reg-flow (assoc m :id k)))\n  ([m]\n   (validate-inputs m)\n   (warn-stale-dependencies @flows m)\n   (swap! flows assoc\n          (:id m) (with-meta (merge (default (:id m)) m)\n                    (merge\n                     {::new? true}\n                     #?(:cljs\n                        {::ref (r/reaction (get-in @db/app-db (:path m)))}))))))\n\n(defn clear-flow\n  ([]\n   (swap! flows vary-meta update ::cleared into @flows)\n   (swap! flows empty))\n  ([id]\n   (when-let [flow (lookup id)]\n     (swap! flows dissoc id)\n     (swap! flows vary-meta update ::cleared assoc (:id flow) flow))))\n\n(defn flow<- [id] {::flow<- id})\n\n(def flow-fx-ids #{:reg-flow :clear-flow})\n\n(defn do-effect [[k v]] ((get-handler :fx k false) v))\n\n(def remove-fx (partial remove flow-fx-ids))\n\n(def do-fx\n  (->interceptor\n   {:id :do-flow-fx\n    :after (fn [{{:keys [fx] :as effects} :effects\n                 :as ctx}]\n             (let [flow-fx (concat (select-keys effects flow-fx-ids)\n                                   (filterv (comp flow-fx-ids first) fx))]\n               (doall (map do-effect flow-fx))\n               (-> ctx\n                   (update-in [:effects :fx] remove-fx)\n                   (update :effects (comp (partial into {}) remove-fx)))))}))\n\n(defn resolve-input [db input]\n  (if (vector? input)\n    (get-in db input)\n    (some->> input ::flow<- lookup :path (resolve-input db))))\n\n(defn resolve-inputs [db inputs]\n  (if (empty? inputs) db (u/map-vals (partial resolve-input db) inputs)))\n\n(defn run [ctx {:as    flow\n                :keys  [path cleanup live? inputs live-inputs output id]\n                ::keys [cleared?]}]\n  (let [{::keys [new?]} (meta flow)\n        old-db          (get-coeffect ctx :db)\n        db              (or (get-effect ctx :db) old-db)\n\n        id->old-in (resolve-inputs old-db inputs)\n        id->in     (resolve-inputs db inputs)\n        dirty?     (not= id->in id->old-in)\n\n        id->old-live-in (resolve-inputs old-db live-inputs)\n        id->live-in     (resolve-inputs db live-inputs)\n        bardo           [(cond new?     :new (live? id->old-live-in) :live :else :dead)\n                         (cond cleared? :cleared (live? id->live-in) :live :else :dead)]\n\n        new-db (case bardo\n                 [:live :live]    (cond-> db dirty? (assoc-in path (output id->in)))\n                 [:live :dead]    (cleanup db path)\n                 [:dead :live]    (assoc-in db path (output id->in))\n                 [:new :live]     (do (swap! flows update id vary-meta dissoc ::new?)\n                                      (assoc-in db path (output id->in)))\n                 [:live :cleared] (cleanup db path)\n                 nil)]\n    (cond-> ctx new-db (assoc-effect :db new-db))))\n\n(defn with-cleared [m]\n  (into m (map (fn [[k v]] [[::cleared k (gensym)] (assoc v ::cleared? true)])\n               (::cleared (meta m)))))\n\n(def interceptor\n  (->interceptor\n   {:id :flow\n    :after (fn [ctx]\n             (let [all-flows (with-cleared @flows)]\n               (swap! flows vary-meta dissoc ::cleared)\n               (reduce run ctx ((memoize topsort) all-flows))))}))\n"],"x_google_ignoreList":[0]}