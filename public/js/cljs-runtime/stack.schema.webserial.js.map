{"version":3,"sources":["stack/schema/webserial.cljc"],"mappings":";AAQA,oCAAA,oFAAA,UAAA,UAAA,UAAA,SAAA,SAAA,SAAA,SAAA,QAAA,QAAA,QAAA,lNAAaA;AAKb,kCAAA,mFAAA,oDAAA,2CAAA,kDAAA,IAAA,iDAAA,3TAAKC;AACL,kCAAA,mFAAA,oDAAA,2CAAA,kDAAA,IAAA,iDAAA,3TAAKC;AACL,gCAAA,mFAAA,qDAAA,qDAAA,qDAAA,lRAAKC;AACL,qCAAA,mFAAA,qDAAA,qDAAA,lOAAKC;AAKL,kCAAA,mFAAA,oDAAA,2CAAA,kDAAA,IAAA,iDAAA,3TAAKC;AAEL,oCAAA,mFAAA,mDAAA,qDAAA,mFAAA,0DAAA,2CAAA,kDAAA,IAAA,4DAAA,uBAAA,mEAAA,2CAAA,4DAAA,1sBAAKC;AAIL,uCAAA,mFAAA,mDAAA,mFAAA,wEAAA,2CAAA,4DAAA,oDAAA,mFAAA,8DAAA,2CAAA,4DAAA,iBAAA,mFAAA,oDAAA,2CAAA,kDAAA,IAAA,iDAAA,mCAAA,mFAAA,6DAAA,2CAAA,4DAAA,oDAAA,mFAAA,4DAAA,2CAAA,4DAAA,oDAAA,mFAAA,0DAAA,2CAAA,4DAAA,mGAAA,mFAAA,iEAAA,2CAAA,4DAAA,cAAA,mFAAA,oDAAA,2CAAA,kDAAA,IAAA,2FAAA,mFAAA,mEAAA,2CAAA,4DAAA,7xFAAKC,2bAC6CF,g3BAENJ,0SACAC,yVACEC,wkBAEsB,CAAA,SAAA,0VACjBC;AAEnD,AAAaI,kCAAS,qFAAA,rFAACC,gDAASF,wEAAiBG;AAEjD,sCAAA,mFAAA,2CAAA,qDAAA,OAAA,mEAAA,YAAA,2CAAA,qDAAA,OAAA,mEAAA,zdAAaC;AAIb,2CAAA,3CAAaC;AACb,8CAAA,9CAAaC;AAEb,AAAaC,mCAAU,AAACC,6BAAiBd;AACzC,AAAae,mCAAU,AAACD,6BAAiBb;AACzC,AAAae,gCAAO,AAACC,+BAAmBf;AACxC,AAAagB,sCAAa,AAACD,+BAAmBd;AAG9C,8CAAA,9CAAMgB,oGAAsBC;AAA5B,AAEE,gEAAA,zDAACC,qHAAqB,AAAA,mFAAOD,IAAI,AAAA,iGAAcA","names":["stack.schema.webserial/BAUD-RATES","stack.schema.webserial/DataBits","stack.schema.webserial/StopBits","stack.schema.webserial/Parity","stack.schema.webserial/FlowControl","stack.schema.webserial/VendorId","stack.schema.webserial/PortFilter","stack.schema.webserial/SerialOptions","stack.schema.webserial/DEFAULTS","malli.core.decode","malli.transform/default-value-transformer","stack.schema.webserial/PORT-FILTERS","stack.schema.webserial/BAUD-RATE-DEFAULT","stack.schema.webserial/FLOW-CONTROL-DEFAULT","stack.schema.webserial/DATA-BITS","stack.utils.schema/int-range","stack.schema.webserial/STOP-BITS","stack.schema.webserial/PARITY","stack.utils.schema/enum-values","stack.schema.webserial/FLOW-CONTROL","stack.schema.webserial/describe-port-filter","pf","cuerdas.core.format"],"sourcesContent":["(ns stack.schema.webserial\n  (:require\n   [malli.core :as m]\n   [malli.transform :as mt]\n   [cuerdas.core :as str]\n   [stack.utils.schema :as schema]))\n\n;; Some reasonable standard baud rates for FTDI USB serial devices\n(def ^:const BAUD-RATES [4000000 2000000 1000000 512000 256000 128000 115200 57600 38400 19200 9600])\n\n;; Defined by WebSerial API\n;; See https://wicg.github.io/serial/#ref-for-dom-serialoptions-2\n\n(def DataBits [:int {:min 7, :max 8}])\n(def StopBits [:int {:min 0, :max 1}])\n(def Parity [:enum :none :even :odd])\n(def FlowControl [:enum :none :hardware])\n\n\n;; Port filter for WebSerial requestPort method\n;; API allows narrowing by product ID also, but vendor ID is as far as we want to go just now\n(def VendorId [:int {:min 0x0000, :max 0xFFFF}])\n\n(def PortFilter [:map\n                 :name [:string {:min 1 :default \"None\"}]\n                 :usbVendorId {:default 0}])\n\n(def SerialOptions [:map\n                    [:vendorIdFilter {:default 0} VendorId]\n                    [:baudRate {:default 115200} [:int {:min 1, :max 10000000}]]\n                    [:dataBits {:default 8} DataBits]\n                    [:stopBits {:default 1} StopBits]\n                    [:parity {:default :none} Parity]\n                    ;;I have no idea what the max is here - though it's an unsigned long...\n                    [:bufferSize {:default 255} [:int {:min 1, :max (* 1024 1024)}]]\n                    [:flowControl {:default :none} FlowControl]])\n\n(def ^:const DEFAULTS (m/decode SerialOptions {} mt/default-value-transformer))\n\n(def ^:const PORT-FILTERS [{:name \"None\" :usbVendorId 0x0000}\n                           {:name \"FTDI\" :usbVendorId 0x0403}])\n\n;;TODO: Reconcile these with the decoded DEFAULTS above...\n(def ^:const BAUD-RATE-DEFAULT 115200)\n(def ^:const FLOW-CONTROL-DEFAULT \"hardware\")\n\n(def ^:const DATA-BITS (schema/int-range DataBits))\n(def ^:const STOP-BITS (schema/int-range StopBits))\n(def ^:const PARITY (schema/enum-values Parity))\n(def ^:const FLOW-CONTROL (schema/enum-values FlowControl))\n\n\n(defn describe-port-filter [pf]\n  ;; {:pre [(m/validate PortFilter pf)]}\n  (str/format \"%s (%s)\" (:name pf) (:usbVendorId pf)))\n"]}