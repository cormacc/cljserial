{"version":3,"sources":["refx/subs.cljc"],"mappings":"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","names":["refx.subs/kind","refx$subs$ISignal$_value$dyn","x__5350__auto__","m__5351__auto__","refx.subs/-value","goog/typeOf","m__5349__auto__","cljs.core/missing-protocol","refx$subs$ISignal$_add_listener$dyn","refx.subs/-add-listener","refx$subs$ISignal$_remove_listener$dyn","refx.subs/-remove-listener","refx.subs/ISignal","this","k","f","refx.subs/signal?","x","cljs.core/PROTOCOL_SENTINEL","cljs.core/native-satisfies?","_","cljs.core/Atom","cljs.core/deref","a","cljs.core/add-watch","cljs.core/remove-watch","js/refx","js/refx.subs","js/refx.subs.sub-cache","refx.subs/sub-cache","cljs.core.atom","refx.subs/cache-lookup","query-v","cljs.core.get","refx.subs/cache-add!","sub","cljs.core.swap_BANG_","cljs.core/assoc","refx.subs/cache-remove!","cache","cljs.core.dissoc","refx$subs$ISub$_query_v$dyn","refx.subs/-query-v","refx$subs$ISub$_orphan_QMARK_$dyn","refx.subs/-orphan?","refx$subs$ISub$_dispose_BANG_$dyn","refx.subs/-dispose!","refx.subs/ISub","refx.subs/dispose!","refx.subs/sub-orphaned","G__86338","refx.interop/next-tick","refx.subs/clear-subscription-cache!","seq__86345","cljs.core/seq","chunk__86346","count__86347","i__86348","vec__86367","cljs.core.nth","temp__5823__auto__","cljs.core/chunked-seq?","c__5525__auto__","cljs.core/chunk-first","cljs.core/chunk-rest","cljs.core/count","vec__86374","cljs.core/first","cljs.core/next","this__5287__auto__","writer__5288__auto__","opt__5289__auto__","cljs.core/-write","refx.subs/Listeners","refx.subs/->Listeners","listeners","cljs.core/empty?","cljs.core.assoc","seq__86387","chunk__86388","count__86389","i__86390","vec__86401","vec__86412","refx.subs/make-listeners","refx.subs/map-signals","input","cljs.core/sequential?","cljs.core.mapv","cljs.core/map?","cljs.core/update-vals","refx.subs/run-signals!","refx.subs/compute-sub","compute-fn","G__86440","G__86441","refx.subs/Sub","refx.subs/->Sub","value","dirty?","p1__86445#","cb","p1__86446#","new-value","cljs.core.not_EQ_","other","goog/getUid","refx.subs/make-sub","refx.subs/register","query-id","input-fn","refx.registry/add!","handler-fn","refx.subs/DynamicSub","refx.subs/->DynamicSub","query-sub","value-sub","qv","or__5002__auto__","refx.subs/some-signal?","cljs.core.every_pred","cljs.core/some?","refx.subs/dynamic?","cljs.core/some","refx.subs/dynamic-input","cljs.core.into","cljs.core.keep_indexed","i","p__86574","vec__86575","refx.subs/dynamic-compute","cljs.core/reduce-kv","refx.subs/make-dynamic","dynamic","refx.subs/create-sub","refx.utils/first-in-vector","refx.registry.lookup","refx.subs/sub"],"sourcesContent":["(ns refx.subs\n  (:require [refx.interop :as interop]\n            [refx.registry :as registry]\n            [refx.utils :as utils]))\n\n(def kind :sub)\n\n;; --- signals ----------------------------------------------------------------\n\n(defprotocol ISignal\n  \"Protocol for signal types.\n\n   Very similar to IDeref + IWatchable (e.g. atoms), with the difference that\n   listeners will not receive old or new values.\"\n  (-value [this]\n    \"Returns the current value of the signal.\")\n  (-add-listener [this k f]\n    \"Register a listener that will be called without arguments.\")\n  (-remove-listener [this k]\n    \"Removes a listener previous registered with `-add-listener`.\"))\n\n(defn signal? [x]\n  (satisfies? ISignal x))\n\n(extend-protocol ISignal\n  ;; Useful for missing handlers.  For comparison, re-frame's `subscribe`\n  ;; will return `nil`, which is guarenteed to break views that will deref\n  ;; subscribed values.\n  nil\n  (-value [_] nil)\n  (-add-listener [_ _ _])\n  (-remove-listener [_ _])\n\n  #?(:cljs Atom\n     :clj clojure.lang.Atom)\n  (-value [a] @a)\n  (-add-listener [a k f] (add-watch a k f))\n  (-remove-listener [a k] (remove-watch a k)))\n\n;; --- subscription cache -----------------------------------------------------\n\n(defonce sub-cache (atom {}))\n\n(defn- cache-lookup [query-v]\n  (get @sub-cache query-v))\n\n(defn- cache-add! [query-v sub]\n  (swap! sub-cache assoc query-v sub))\n\n(defn- cache-remove! [query-v sub]\n  (swap! sub-cache (fn [cache]\n                     (if (identical? sub (get cache query-v))\n                       (dissoc cache query-v)\n                       cache))))\n\n;; --- subscriptions ----------------------------------------------------------\n\n(defprotocol ISub\n  (-query-v [this])\n  (-orphan? [this])\n  (-dispose! [this]))\n\n(defn- dispose! [sub]\n  (cache-remove! (-query-v sub) sub)\n  (-dispose! sub))\n\n;; TODO This could be changed to support \"garbage collection\": Don't dispose\n;; right away, but keep subscriptions around for a while in case they are\n;; requested again.\n;; E.g. we could trigger background jobs using window.requestIdleCallback()\n(defn- sub-orphaned [sub]\n  (interop/next-tick #(when (-orphan? sub)\n                        (dispose! sub))))\n\n(defn clear-subscription-cache! []\n  (doseq [[_ sub] @sub-cache]\n    (dispose! sub)))\n\n(deftype Listeners [^:mutable listeners]\n  Object\n  (empty? [_] (empty? listeners))\n  (add [_ k f]\n    (set! listeners (assoc listeners k f)))\n  (remove [_ k]\n    (set! listeners (dissoc listeners k)))\n  (notify [_]\n    (doseq [[_ f] listeners]\n      (f))))\n\n(defn- make-listeners []\n  (Listeners. nil))\n\n(defn- map-signals\n  \"Apply `f` to a node input value.\"\n  [f input]\n  (cond\n    (signal? input) (f input)\n    (sequential? input) (mapv f input) ; run-signal! assumes this is not lazy!\n    (map? input) (update-vals input f)\n    :else input))\n\n(defn- run-signals! [f input]\n  (map-signals f input)\n  nil)\n\n(defn- compute-sub [query-v input compute-fn]\n  (compute-fn (map-signals -value input) query-v))\n\n(deftype Sub [query-v input compute-fn\n              ^:mutable value\n              ^:mutable dirty?\n              ^Listeners listeners]\n\n  ISub\n  (-query-v [_] query-v)\n  (-orphan? [_] (.empty? listeners))\n  (-dispose! [this]\n    (run-signals! #(-remove-listener % this) input))\n\n  ISignal\n  (-value [_] value)\n  (-add-listener [_ k f]\n    (.add listeners k f))\n  (-remove-listener [this k]\n    (.remove listeners k)\n    (when (.empty? listeners)\n      (sub-orphaned this)))\n\n  Object\n  (init! [this]\n    (let [cb  #(.invalidate! this)]\n      (run-signals! #(-add-listener % this cb) input)))\n\n  (invalidate! [this]\n    (when-not dirty?\n      (set! dirty? true)\n      ;; TODO: Do we need invalidate-dirty or just update directly?\n      (.update! this)\n      #_(interop/next-tick #(.update! this))))\n\n  (update! [_]\n    (let [new-value (compute-sub query-v input compute-fn)]\n      (set! dirty? false)\n      (when (not= value new-value)\n        (set! value new-value)\n        (.notify listeners))))\n\n  #?@(:cljs\n      [IDeref\n       (-deref [this] (-value this))\n\n       IEquiv\n       (-equiv [this other] (identical? this other))\n\n       IHash\n       (-hash [this] (goog/getUid this))]))\n\n(defn- make-sub\n  [query-v input compute-fn]\n  (let [value (compute-sub query-v input compute-fn)\n        sub   (->Sub query-v input compute-fn value false (make-listeners))]\n    (.init! sub)\n    sub))\n\n;; --- register ---------------------------------------------------------------\n\n(defn register\n  [query-id input-fn compute-fn]\n  (letfn [(handler-fn [query-v]\n            (make-sub query-v (input-fn query-v) compute-fn))]\n    (registry/add! kind query-id handler-fn)))\n\n;; --- dynamic ----------------------------------------------------------------\n;;\n;; Dynamic subscriptions allow callers to place signals in query vectors:\n;; (sub [:dynamic (sub [:param1]) (sub [:param2])])\n;;\n;; This is not very useful in views, as these should be composed in such a way\n;; that child components take parameters for their subscriptions as props.\n;;\n;; However, it can be useful to create more powerful named subscriptions with\n;; `reg-sub`, without needing to change how views are organised.\n;;\n;; Dynamic subs wrap a special \"query-sub\" that computes the dynamic query\n;; vector, and a mutable \"value-sub\" that is updated whenever the query sub\n;; changes.\n(deftype DynamicSub [query-v handler-fn query-sub ^:mutable value-sub\n                     ^Listeners listeners]\n  ISub\n  (-query-v [_] query-v)\n  (-orphan? [_] (.empty? listeners))\n  (-dispose! [this]\n    (-remove-listener query-sub this)\n    (when value-sub\n      (-remove-listener value-sub this)))\n\n  ISignal\n  (-value [_]\n    (-value value-sub))\n  (-add-listener [_ k f]\n    (.add listeners k f))\n  (-remove-listener [this k]\n    (.remove listeners k)\n    (when (.empty? listeners)\n      (sub-orphaned this)))\n\n  Object\n  (init! [this]\n    (.update! this)\n    (-add-listener query-sub this #(.update! this)))\n\n  (update! [this]\n    (let [qv (-value query-sub)]\n      (when value-sub\n        (-remove-listener value-sub this))\n      (set! value-sub (or (cache-lookup qv)\n                          (handler-fn qv)))\n      (-add-listener value-sub this #(.notify listeners))\n      (.notify listeners)))\n\n  #?@(:cljs\n      [IEquiv\n       (-equiv [this other] (identical? this other))\n\n       IHash\n       (-hash [this] (goog/getUid this))\n\n       IDeref\n       (-deref [this] (-value this))]))\n\n;; Don't consider nil dynamic, even though it is a valid signal.\n(def ^:private some-signal?\n  (every-pred some? signal?))\n\n(defn- dynamic?\n  \"Return true if a query vector contains signals.\"\n  [query-v]\n  (some some-signal? query-v))\n\n(defn- dynamic-input\n  \"Input function for dynamic subscriptions, where the query vector contains\n   signals.  Returns a map of vector indexes to signals.\"\n  [query-v]\n  (into {}\n        (keep-indexed (fn [i x]\n                        (when (some-signal? x)\n                          [i x])))\n        query-v))\n\n(defn- dynamic-compute\n  \"Computation function for dynamic subscriptions.  Returns a query vector\n   where signals have been replaced with their current values.  `input` must\n   be a map of vector index to value, as returned by `dynamic-input`.\"\n  [input [_ query-v]]\n  (reduce-kv assoc query-v input))\n\n(defn- make-dynamic\n  \"Make a dynamic subscription.\"\n  [query-v handler-fn]\n  (let [query-sub (make-sub [::query query-v] (dynamic-input query-v) dynamic-compute)\n        dynamic   (->DynamicSub query-v handler-fn query-sub nil (make-listeners))]\n    (.init! dynamic)\n    dynamic))\n\n;; --- sub --------------------------------------------------------------------\n\n(defn- create-sub [query-v]\n  (let [query-id (utils/first-in-vector query-v)]\n    ;; Note that nil is a valid signal!\n    (when-let [handler-fn (registry/lookup kind query-id)]\n      (let [sub (if (dynamic? query-v)\n                  (make-dynamic query-v handler-fn)\n                  (handler-fn query-v))]\n        (cache-add! query-v sub)\n        sub))))\n\n(defn sub\n  \"Returns a subscription to `query-v`.\n\n   Callers must make sure that the returned object is eventually used, or it\n   will leak memory.  This is designed to construct custom subscriptions in\n   handlers, React components should use the `use-sub` hook instead.\"\n  [query-v]\n  (or (cache-lookup query-v)\n      (create-sub query-v)))\n"],"x_google_ignoreList":[0]}