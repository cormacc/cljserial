{
"version":3,
"file":"module$node_modules$$supabase$realtime_js$dist$main$RealtimeChannel.js",
"lineCount":325,
"mappings":"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",
"sources":["node_modules/@supabase/realtime-js/dist/main/RealtimeChannel.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$$supabase$realtime_js$dist$main$RealtimeChannel\"] = function(global,require,module,exports) {\n\"use strict\";\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    var desc = Object.getOwnPropertyDescriptor(m, k);\n    if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n      desc = { enumerable: true, get: function() { return m[k]; } };\n    }\n    Object.defineProperty(o, k2, desc);\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {\n    Object.defineProperty(o, \"default\", { enumerable: true, value: v });\n}) : function(o, v) {\n    o[\"default\"] = v;\n});\nvar __importStar = (this && this.__importStar) || function (mod) {\n    if (mod && mod.__esModule) return mod;\n    var result = {};\n    if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n    __setModuleDefault(result, mod);\n    return result;\n};\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.REALTIME_CHANNEL_STATES = exports.REALTIME_SUBSCRIBE_STATES = exports.REALTIME_LISTEN_TYPES = exports.REALTIME_POSTGRES_CHANGES_LISTEN_EVENT = void 0;\nconst constants_1 = require(\"./lib/constants\");\nconst push_1 = __importDefault(require(\"./lib/push\"));\nconst timer_1 = __importDefault(require(\"./lib/timer\"));\nconst RealtimePresence_1 = __importDefault(require(\"./RealtimePresence\"));\nconst Transformers = __importStar(require(\"./lib/transformers\"));\nconst transformers_1 = require(\"./lib/transformers\");\nvar REALTIME_POSTGRES_CHANGES_LISTEN_EVENT;\n(function (REALTIME_POSTGRES_CHANGES_LISTEN_EVENT) {\n    REALTIME_POSTGRES_CHANGES_LISTEN_EVENT[\"ALL\"] = \"*\";\n    REALTIME_POSTGRES_CHANGES_LISTEN_EVENT[\"INSERT\"] = \"INSERT\";\n    REALTIME_POSTGRES_CHANGES_LISTEN_EVENT[\"UPDATE\"] = \"UPDATE\";\n    REALTIME_POSTGRES_CHANGES_LISTEN_EVENT[\"DELETE\"] = \"DELETE\";\n})(REALTIME_POSTGRES_CHANGES_LISTEN_EVENT = exports.REALTIME_POSTGRES_CHANGES_LISTEN_EVENT || (exports.REALTIME_POSTGRES_CHANGES_LISTEN_EVENT = {}));\nvar REALTIME_LISTEN_TYPES;\n(function (REALTIME_LISTEN_TYPES) {\n    REALTIME_LISTEN_TYPES[\"BROADCAST\"] = \"broadcast\";\n    REALTIME_LISTEN_TYPES[\"PRESENCE\"] = \"presence\";\n    REALTIME_LISTEN_TYPES[\"POSTGRES_CHANGES\"] = \"postgres_changes\";\n    REALTIME_LISTEN_TYPES[\"SYSTEM\"] = \"system\";\n})(REALTIME_LISTEN_TYPES = exports.REALTIME_LISTEN_TYPES || (exports.REALTIME_LISTEN_TYPES = {}));\nvar REALTIME_SUBSCRIBE_STATES;\n(function (REALTIME_SUBSCRIBE_STATES) {\n    REALTIME_SUBSCRIBE_STATES[\"SUBSCRIBED\"] = \"SUBSCRIBED\";\n    REALTIME_SUBSCRIBE_STATES[\"TIMED_OUT\"] = \"TIMED_OUT\";\n    REALTIME_SUBSCRIBE_STATES[\"CLOSED\"] = \"CLOSED\";\n    REALTIME_SUBSCRIBE_STATES[\"CHANNEL_ERROR\"] = \"CHANNEL_ERROR\";\n})(REALTIME_SUBSCRIBE_STATES = exports.REALTIME_SUBSCRIBE_STATES || (exports.REALTIME_SUBSCRIBE_STATES = {}));\nexports.REALTIME_CHANNEL_STATES = constants_1.CHANNEL_STATES;\n/** A channel is the basic building block of Realtime\n * and narrows the scope of data flow to subscribed clients.\n * You can think of a channel as a chatroom where participants are able to see who's online\n * and send and receive messages.\n */\nclass RealtimeChannel {\n    constructor(\n    /** Topic name can be any string. */\n    topic, params = { config: {} }, socket) {\n        this.topic = topic;\n        this.params = params;\n        this.socket = socket;\n        this.bindings = {};\n        this.state = constants_1.CHANNEL_STATES.closed;\n        this.joinedOnce = false;\n        this.pushBuffer = [];\n        this.subTopic = topic.replace(/^realtime:/i, '');\n        this.params.config = Object.assign({\n            broadcast: { ack: false, self: false },\n            presence: { key: '' },\n            private: false,\n        }, params.config);\n        this.timeout = this.socket.timeout;\n        this.joinPush = new push_1.default(this, constants_1.CHANNEL_EVENTS.join, this.params, this.timeout);\n        this.rejoinTimer = new timer_1.default(() => this._rejoinUntilConnected(), this.socket.reconnectAfterMs);\n        this.joinPush.receive('ok', () => {\n            this.state = constants_1.CHANNEL_STATES.joined;\n            this.rejoinTimer.reset();\n            this.pushBuffer.forEach((pushEvent) => pushEvent.send());\n            this.pushBuffer = [];\n        });\n        this._onClose(() => {\n            this.rejoinTimer.reset();\n            this.socket.log('channel', `close ${this.topic} ${this._joinRef()}`);\n            this.state = constants_1.CHANNEL_STATES.closed;\n            this.socket._remove(this);\n        });\n        this._onError((reason) => {\n            if (this._isLeaving() || this._isClosed()) {\n                return;\n            }\n            this.socket.log('channel', `error ${this.topic}`, reason);\n            this.state = constants_1.CHANNEL_STATES.errored;\n            this.rejoinTimer.scheduleTimeout();\n        });\n        this.joinPush.receive('timeout', () => {\n            if (!this._isJoining()) {\n                return;\n            }\n            this.socket.log('channel', `timeout ${this.topic}`, this.joinPush.timeout);\n            this.state = constants_1.CHANNEL_STATES.errored;\n            this.rejoinTimer.scheduleTimeout();\n        });\n        this._on(constants_1.CHANNEL_EVENTS.reply, {}, (payload, ref) => {\n            this._trigger(this._replyEventName(ref), payload);\n        });\n        this.presence = new RealtimePresence_1.default(this);\n        this.broadcastEndpointURL =\n            (0, transformers_1.httpEndpointURL)(this.socket.endPoint) + '/api/broadcast';\n        this.private = this.params.config.private || false;\n    }\n    /** Subscribe registers your client with the server */\n    subscribe(callback, timeout = this.timeout) {\n        var _a, _b;\n        if (!this.socket.isConnected()) {\n            this.socket.connect();\n        }\n        if (this.joinedOnce) {\n            throw `tried to subscribe multiple times. 'subscribe' can only be called a single time per channel instance`;\n        }\n        else {\n            const { config: { broadcast, presence, private: isPrivate }, } = this.params;\n            this._onError((e) => callback === null || callback === void 0 ? void 0 : callback(REALTIME_SUBSCRIBE_STATES.CHANNEL_ERROR, e));\n            this._onClose(() => callback === null || callback === void 0 ? void 0 : callback(REALTIME_SUBSCRIBE_STATES.CLOSED));\n            const accessTokenPayload = {};\n            const config = {\n                broadcast,\n                presence,\n                postgres_changes: (_b = (_a = this.bindings.postgres_changes) === null || _a === void 0 ? void 0 : _a.map((r) => r.filter)) !== null && _b !== void 0 ? _b : [],\n                private: isPrivate,\n            };\n            if (this.socket.accessTokenValue) {\n                accessTokenPayload.access_token = this.socket.accessTokenValue;\n            }\n            this.updateJoinPayload(Object.assign({ config }, accessTokenPayload));\n            this.joinedOnce = true;\n            this._rejoin(timeout);\n            this.joinPush\n                .receive('ok', async ({ postgres_changes }) => {\n                var _a;\n                this.socket.setAuth();\n                if (postgres_changes === undefined) {\n                    callback === null || callback === void 0 ? void 0 : callback(REALTIME_SUBSCRIBE_STATES.SUBSCRIBED);\n                    return;\n                }\n                else {\n                    const clientPostgresBindings = this.bindings.postgres_changes;\n                    const bindingsLen = (_a = clientPostgresBindings === null || clientPostgresBindings === void 0 ? void 0 : clientPostgresBindings.length) !== null && _a !== void 0 ? _a : 0;\n                    const newPostgresBindings = [];\n                    for (let i = 0; i < bindingsLen; i++) {\n                        const clientPostgresBinding = clientPostgresBindings[i];\n                        const { filter: { event, schema, table, filter }, } = clientPostgresBinding;\n                        const serverPostgresFilter = postgres_changes && postgres_changes[i];\n                        if (serverPostgresFilter &&\n                            serverPostgresFilter.event === event &&\n                            serverPostgresFilter.schema === schema &&\n                            serverPostgresFilter.table === table &&\n                            serverPostgresFilter.filter === filter) {\n                            newPostgresBindings.push(Object.assign(Object.assign({}, clientPostgresBinding), { id: serverPostgresFilter.id }));\n                        }\n                        else {\n                            this.unsubscribe();\n                            callback === null || callback === void 0 ? void 0 : callback(REALTIME_SUBSCRIBE_STATES.CHANNEL_ERROR, new Error('mismatch between server and client bindings for postgres changes'));\n                            return;\n                        }\n                    }\n                    this.bindings.postgres_changes = newPostgresBindings;\n                    callback && callback(REALTIME_SUBSCRIBE_STATES.SUBSCRIBED);\n                    return;\n                }\n            })\n                .receive('error', (error) => {\n                callback === null || callback === void 0 ? void 0 : callback(REALTIME_SUBSCRIBE_STATES.CHANNEL_ERROR, new Error(JSON.stringify(Object.values(error).join(', ') || 'error')));\n                return;\n            })\n                .receive('timeout', () => {\n                callback === null || callback === void 0 ? void 0 : callback(REALTIME_SUBSCRIBE_STATES.TIMED_OUT);\n                return;\n            });\n        }\n        return this;\n    }\n    presenceState() {\n        return this.presence.state;\n    }\n    async track(payload, opts = {}) {\n        return await this.send({\n            type: 'presence',\n            event: 'track',\n            payload,\n        }, opts.timeout || this.timeout);\n    }\n    async untrack(opts = {}) {\n        return await this.send({\n            type: 'presence',\n            event: 'untrack',\n        }, opts);\n    }\n    on(type, filter, callback) {\n        return this._on(type, filter, callback);\n    }\n    /**\n     * Sends a message into the channel.\n     *\n     * @param args Arguments to send to channel\n     * @param args.type The type of event to send\n     * @param args.event The name of the event being sent\n     * @param args.payload Payload to be sent\n     * @param opts Options to be used during the send process\n     */\n    async send(args, opts = {}) {\n        var _a, _b;\n        if (!this._canPush() && args.type === 'broadcast') {\n            const { event, payload: endpoint_payload } = args;\n            const authorization = this.socket.accessTokenValue\n                ? `Bearer ${this.socket.accessTokenValue}`\n                : '';\n            const options = {\n                method: 'POST',\n                headers: {\n                    Authorization: authorization,\n                    apikey: this.socket.apiKey ? this.socket.apiKey : '',\n                    'Content-Type': 'application/json',\n                },\n                body: JSON.stringify({\n                    messages: [\n                        {\n                            topic: this.subTopic,\n                            event,\n                            payload: endpoint_payload,\n                            private: this.private,\n                        },\n                    ],\n                }),\n            };\n            try {\n                const response = await this._fetchWithTimeout(this.broadcastEndpointURL, options, (_a = opts.timeout) !== null && _a !== void 0 ? _a : this.timeout);\n                await ((_b = response.body) === null || _b === void 0 ? void 0 : _b.cancel());\n                return response.ok ? 'ok' : 'error';\n            }\n            catch (error) {\n                if (error.name === 'AbortError') {\n                    return 'timed out';\n                }\n                else {\n                    return 'error';\n                }\n            }\n        }\n        else {\n            return new Promise((resolve) => {\n                var _a, _b, _c;\n                const push = this._push(args.type, args, opts.timeout || this.timeout);\n                if (args.type === 'broadcast' && !((_c = (_b = (_a = this.params) === null || _a === void 0 ? void 0 : _a.config) === null || _b === void 0 ? void 0 : _b.broadcast) === null || _c === void 0 ? void 0 : _c.ack)) {\n                    resolve('ok');\n                }\n                push.receive('ok', () => resolve('ok'));\n                push.receive('error', () => resolve('error'));\n                push.receive('timeout', () => resolve('timed out'));\n            });\n        }\n    }\n    updateJoinPayload(payload) {\n        this.joinPush.updatePayload(payload);\n    }\n    /**\n     * Leaves the channel.\n     *\n     * Unsubscribes from server events, and instructs channel to terminate on server.\n     * Triggers onClose() hooks.\n     *\n     * To receive leave acknowledgements, use the a `receive` hook to bind to the server ack, ie:\n     * channel.unsubscribe().receive(\"ok\", () => alert(\"left!\") )\n     */\n    unsubscribe(timeout = this.timeout) {\n        this.state = constants_1.CHANNEL_STATES.leaving;\n        const onClose = () => {\n            this.socket.log('channel', `leave ${this.topic}`);\n            this._trigger(constants_1.CHANNEL_EVENTS.close, 'leave', this._joinRef());\n        };\n        this.rejoinTimer.reset();\n        // Destroy joinPush to avoid connection timeouts during unscription phase\n        this.joinPush.destroy();\n        return new Promise((resolve) => {\n            const leavePush = new push_1.default(this, constants_1.CHANNEL_EVENTS.leave, {}, timeout);\n            leavePush\n                .receive('ok', () => {\n                onClose();\n                resolve('ok');\n            })\n                .receive('timeout', () => {\n                onClose();\n                resolve('timed out');\n            })\n                .receive('error', () => {\n                resolve('error');\n            });\n            leavePush.send();\n            if (!this._canPush()) {\n                leavePush.trigger('ok', {});\n            }\n        });\n    }\n    /** @internal */\n    async _fetchWithTimeout(url, options, timeout) {\n        const controller = new AbortController();\n        const id = setTimeout(() => controller.abort(), timeout);\n        const response = await this.socket.fetch(url, Object.assign(Object.assign({}, options), { signal: controller.signal }));\n        clearTimeout(id);\n        return response;\n    }\n    /** @internal */\n    _push(event, payload, timeout = this.timeout) {\n        if (!this.joinedOnce) {\n            throw `tried to push '${event}' to '${this.topic}' before joining. Use channel.subscribe() before pushing events`;\n        }\n        let pushEvent = new push_1.default(this, event, payload, timeout);\n        if (this._canPush()) {\n            pushEvent.send();\n        }\n        else {\n            pushEvent.startTimeout();\n            this.pushBuffer.push(pushEvent);\n        }\n        return pushEvent;\n    }\n    /**\n     * Overridable message hook\n     *\n     * Receives all events for specialized message handling before dispatching to the channel callbacks.\n     * Must return the payload, modified or unmodified.\n     *\n     * @internal\n     */\n    _onMessage(_event, payload, _ref) {\n        return payload;\n    }\n    /** @internal */\n    _isMember(topic) {\n        return this.topic === topic;\n    }\n    /** @internal */\n    _joinRef() {\n        return this.joinPush.ref;\n    }\n    /** @internal */\n    _trigger(type, payload, ref) {\n        var _a, _b;\n        const typeLower = type.toLocaleLowerCase();\n        const { close, error, leave, join } = constants_1.CHANNEL_EVENTS;\n        const events = [close, error, leave, join];\n        if (ref && events.indexOf(typeLower) >= 0 && ref !== this._joinRef()) {\n            return;\n        }\n        let handledPayload = this._onMessage(typeLower, payload, ref);\n        if (payload && !handledPayload) {\n            throw 'channel onMessage callbacks must return the payload, modified or unmodified';\n        }\n        if (['insert', 'update', 'delete'].includes(typeLower)) {\n            (_a = this.bindings.postgres_changes) === null || _a === void 0 ? void 0 : _a.filter((bind) => {\n                var _a, _b, _c;\n                return (((_a = bind.filter) === null || _a === void 0 ? void 0 : _a.event) === '*' ||\n                    ((_c = (_b = bind.filter) === null || _b === void 0 ? void 0 : _b.event) === null || _c === void 0 ? void 0 : _c.toLocaleLowerCase()) === typeLower);\n            }).map((bind) => bind.callback(handledPayload, ref));\n        }\n        else {\n            (_b = this.bindings[typeLower]) === null || _b === void 0 ? void 0 : _b.filter((bind) => {\n                var _a, _b, _c, _d, _e, _f;\n                if (['broadcast', 'presence', 'postgres_changes'].includes(typeLower)) {\n                    if ('id' in bind) {\n                        const bindId = bind.id;\n                        const bindEvent = (_a = bind.filter) === null || _a === void 0 ? void 0 : _a.event;\n                        return (bindId &&\n                            ((_b = payload.ids) === null || _b === void 0 ? void 0 : _b.includes(bindId)) &&\n                            (bindEvent === '*' ||\n                                (bindEvent === null || bindEvent === void 0 ? void 0 : bindEvent.toLocaleLowerCase()) ===\n                                    ((_c = payload.data) === null || _c === void 0 ? void 0 : _c.type.toLocaleLowerCase())));\n                    }\n                    else {\n                        const bindEvent = (_e = (_d = bind === null || bind === void 0 ? void 0 : bind.filter) === null || _d === void 0 ? void 0 : _d.event) === null || _e === void 0 ? void 0 : _e.toLocaleLowerCase();\n                        return (bindEvent === '*' ||\n                            bindEvent === ((_f = payload === null || payload === void 0 ? void 0 : payload.event) === null || _f === void 0 ? void 0 : _f.toLocaleLowerCase()));\n                    }\n                }\n                else {\n                    return bind.type.toLocaleLowerCase() === typeLower;\n                }\n            }).map((bind) => {\n                if (typeof handledPayload === 'object' && 'ids' in handledPayload) {\n                    const postgresChanges = handledPayload.data;\n                    const { schema, table, commit_timestamp, type, errors } = postgresChanges;\n                    const enrichedPayload = {\n                        schema: schema,\n                        table: table,\n                        commit_timestamp: commit_timestamp,\n                        eventType: type,\n                        new: {},\n                        old: {},\n                        errors: errors,\n                    };\n                    handledPayload = Object.assign(Object.assign({}, enrichedPayload), this._getPayloadRecords(postgresChanges));\n                }\n                bind.callback(handledPayload, ref);\n            });\n        }\n    }\n    /** @internal */\n    _isClosed() {\n        return this.state === constants_1.CHANNEL_STATES.closed;\n    }\n    /** @internal */\n    _isJoined() {\n        return this.state === constants_1.CHANNEL_STATES.joined;\n    }\n    /** @internal */\n    _isJoining() {\n        return this.state === constants_1.CHANNEL_STATES.joining;\n    }\n    /** @internal */\n    _isLeaving() {\n        return this.state === constants_1.CHANNEL_STATES.leaving;\n    }\n    /** @internal */\n    _replyEventName(ref) {\n        return `chan_reply_${ref}`;\n    }\n    /** @internal */\n    _on(type, filter, callback) {\n        const typeLower = type.toLocaleLowerCase();\n        const binding = {\n            type: typeLower,\n            filter: filter,\n            callback: callback,\n        };\n        if (this.bindings[typeLower]) {\n            this.bindings[typeLower].push(binding);\n        }\n        else {\n            this.bindings[typeLower] = [binding];\n        }\n        return this;\n    }\n    /** @internal */\n    _off(type, filter) {\n        const typeLower = type.toLocaleLowerCase();\n        this.bindings[typeLower] = this.bindings[typeLower].filter((bind) => {\n            var _a;\n            return !(((_a = bind.type) === null || _a === void 0 ? void 0 : _a.toLocaleLowerCase()) === typeLower &&\n                RealtimeChannel.isEqual(bind.filter, filter));\n        });\n        return this;\n    }\n    /** @internal */\n    static isEqual(obj1, obj2) {\n        if (Object.keys(obj1).length !== Object.keys(obj2).length) {\n            return false;\n        }\n        for (const k in obj1) {\n            if (obj1[k] !== obj2[k]) {\n                return false;\n            }\n        }\n        return true;\n    }\n    /** @internal */\n    _rejoinUntilConnected() {\n        this.rejoinTimer.scheduleTimeout();\n        if (this.socket.isConnected()) {\n            this._rejoin();\n        }\n    }\n    /**\n     * Registers a callback that will be executed when the channel closes.\n     *\n     * @internal\n     */\n    _onClose(callback) {\n        this._on(constants_1.CHANNEL_EVENTS.close, {}, callback);\n    }\n    /**\n     * Registers a callback that will be executed when the channel encounteres an error.\n     *\n     * @internal\n     */\n    _onError(callback) {\n        this._on(constants_1.CHANNEL_EVENTS.error, {}, (reason) => callback(reason));\n    }\n    /**\n     * Returns `true` if the socket is connected and the channel has been joined.\n     *\n     * @internal\n     */\n    _canPush() {\n        return this.socket.isConnected() && this._isJoined();\n    }\n    /** @internal */\n    _rejoin(timeout = this.timeout) {\n        if (this._isLeaving()) {\n            return;\n        }\n        this.socket._leaveOpenTopic(this.topic);\n        this.state = constants_1.CHANNEL_STATES.joining;\n        this.joinPush.resend(timeout);\n    }\n    /** @internal */\n    _getPayloadRecords(payload) {\n        const records = {\n            new: {},\n            old: {},\n        };\n        if (payload.type === 'INSERT' || payload.type === 'UPDATE') {\n            records.new = Transformers.convertChangeData(payload.columns, payload.record);\n        }\n        if (payload.type === 'UPDATE' || payload.type === 'DELETE') {\n            records.old = Transformers.convertChangeData(payload.columns, payload.old_record);\n        }\n        return records;\n    }\n}\nexports.default = RealtimeChannel;\n//# sourceMappingURL=RealtimeChannel.js.map\n};"],
"names":["shadow$provide","global","require","module","exports","__createBinding","Object","create","o","m","k","k2","undefined","desc","getOwnPropertyDescriptor","__esModule","writable","configurable","enumerable","get","defineProperty","__setModuleDefault","v","value","__importStar","mod","result","prototype","hasOwnProperty","call","__importDefault","REALTIME_CHANNEL_STATES","REALTIME_SUBSCRIBE_STATES","REALTIME_LISTEN_TYPES","REALTIME_POSTGRES_CHANGES_LISTEN_EVENT","constants_1","push_1","timer_1","RealtimePresence_1","Transformers","transformers_1","CHANNEL_STATES","RealtimeChannel","constructor","topic","params","config","socket","bindings","state","closed","joinedOnce","pushBuffer","subTopic","replace","assign","broadcast","ack","self","presence","key","private","timeout","joinPush","default","CHANNEL_EVENTS","join","rejoinTimer","_rejoinUntilConnected","reconnectAfterMs","receive","joined","reset","forEach","pushEvent","send","_onClose","log","_joinRef","_remove","_onError","reason","_isLeaving","_isClosed","errored","scheduleTimeout","_isJoining","_on","reply","payload","ref","_trigger","_replyEventName","broadcastEndpointURL","httpEndpointURL","endPoint","subscribe","callback","_a","_b","isConnected","connect","isPrivate","e","CHANNEL_ERROR","CLOSED","accessTokenPayload","postgres_changes","map","r","filter","accessTokenValue","access_token","updateJoinPayload","_rejoin","setAuth","SUBSCRIBED","clientPostgresBindings","bindingsLen","length","newPostgresBindings","i","clientPostgresBinding","event","schema","table","serverPostgresFilter","push","id","unsubscribe","Error","error","JSON","stringify","values","TIMED_OUT","presenceState","track","opts","type","untrack","on","args","_canPush","Promise","resolve","_c","_push","endpoint_payload","options","method","headers","Authorization","authorization","apikey","apiKey","body","messages","response","_fetchWithTimeout","cancel","ok","name","updatePayload","leaving","onClose","close","destroy","leavePush","leave","trigger","url","controller","AbortController","setTimeout","abort","fetch","signal","clearTimeout","startTimeout","_onMessage","_event","_ref","_isMember","typeLower","toLocaleLowerCase","events","indexOf","handledPayload","includes","bind","_e","_f","bindId","bindEvent","ids","data","_d","postgresChanges","commit_timestamp","errors","enrichedPayload","eventType","new","old","_getPayloadRecords","_isJoined","joining","binding","_off","isEqual","obj1","obj2","keys","_leaveOpenTopic","resend","records","convertChangeData","columns","record","old_record"]
}
