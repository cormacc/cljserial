{"version":3,"sources":["stack/apis/async_iterator.cljs"],"mappings":"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","names":["stack.apis.async-iterator/get-iterator","iterable","cljs.core/js-invoke","js/Symbol.asyncIterator","stack.apis.async-iterator/push-next","output","value","step","c__33483__auto__","cljs.core.async.chan","cljs.core.async.impl.dispatch/run","f__33484__auto__","switch__33346__auto__","state_63144","state_val_63145","cljs.core.async.impl.ioc-helpers/put!","inst_63136","statearr-63151","statearr-63152","inst_63138","statearr-63153","statearr-63154","inst_63142","cljs.core.async.impl.ioc-helpers/return-chan","statearr-63157","state-machine__33347__auto__","ret-value__33348__auto__","result__33349__auto__","cljs.core/keyword-identical?","ex__33350__auto__","e63158","statearr-63159","cljs.core/seq","statearr-63160","cljs.core/first","state__33485__auto__","statearr-63162","cljs.core.async.impl.ioc-helpers/USER-START-IDX","cljs.core.async.impl.ioc-helpers/run-state-machine-wrapped","stack.apis.async-iterator/take-value","element","cljs.core/not","var_args","G__63165","stack.apis.async-iterator/onto-chan","js/Error","iterator","stack.apis.async_iterator.onto_chan","close?","temp__5821__auto__","cljs.core.async/close!","err","stack.apis.async-iterator/to-chan","iter-chan"],"sourcesContent":["(ns stack.apis.async-iterator\n  \"Utils for dealing with js async iterators. Other peoples work\"\n  (:require [cljs.core.async :as async :refer [go >! close!]]))\n\n\n;; CHANNEL BASED APPROACH -- credit to jjsullivan5196\n;; See https://gist.github.com/jjsullivan5196/0904057a2ec3eb080de5c4d6f45da630\n;; See usage example in stack.apis.opfs\n(defn get-iterator\n  \"Create an async iterator object from `iterable`. `iterable` must have a method\n  definition for `js/Symbol.asyncIterator`.\"\n  [iterable]\n  (js-invoke iterable js/Symbol.asyncIterator))\n\n(defn push-next\n  \"Run `step` when `value` is taken from `output` channel.\"\n  [output value step]\n  (go (when (>! output value)\n        (step))))\n\n(defn take-value\n  \"Pull the value from an async iterator `element`.\"\n  [element]\n  (when (not (.-done element))\n    (.-value element)))\n\n(defn onto-chan\n  \"Iteratively take values from async `iterator` and push them to channel\n  `output`. By default, will close `output` when `iterator` is\n  exhausted. Provide false `close?` argument to leave the output open.\"\n  ([output iterator] (onto-chan output iterator true))\n  ([output iterator close?]\n   (let [step #(onto-chan output iterator)]\n     (.. iterator\n         (next)\n         (then\n           (fn [element]\n             (if-let [value (take-value element)]\n               (push-next output value step)\n               (when close? (close! output))))\n           (fn [err]\n             (push-next output err step)))))))\n\n(defn to-chan\n  \"Create an unbuffered `core.async` channel that pulls values from async\n  `iterator`. Channel will close when `iterator` is exhausted.\"\n  [iterator]\n  (let [iter-chan (async/chan)]\n    (onto-chan iter-chan iterator)\n    iter-chan))\n\n\n;; For an alternative macro-based approach...\n;; See https://ask.clojure.org/index.php/10896/how-to-work-with-asynciterable-interface-in-cljs\n"]}