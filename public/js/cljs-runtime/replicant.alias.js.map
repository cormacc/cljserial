{"version":3,"sources":["replicant/alias.cljc"],"mappings":"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","names":["replicant.alias/aliases","cljs.core.atom","replicant.alias/register!","k","f","cljs.core.swap_BANG_","cljs.core/assoc","cljs.core/deref","replicant.alias/get-registered-aliases","replicant.alias/->hiccup","headers","or__5002__auto__","cljs.core.into","cljs.core.keyword","attrs","replicant.core/get-attrs","G__63726","cljs.core.assoc","cljs.core/set","replicant.core/flatten-seqs","replicant.alias/alias-hiccup?","x","replicant.hiccup/hiccup?","cljs.core/qualified-keyword?","cljs.core/first","replicant.alias/expand-aliased-hiccup","opt","replicant.core/get-hiccup-headers","defined?","cljs.core.get","cljs.core/not","cljs.core.ex_info","G__63740","replicant.core/get-alias-headers","replicant.alias/get-opts","p1__63745#","cljs.core.update","var_args","args__5732__auto__","len__5726__auto__","i__5727__auto__","argseq__5733__auto__","cljs.core/IndexedSeq","replicant.alias/expand-1","p__63757","vec__63758","cljs.core.nth","seq63753","G__63754","cljs.core/next","self__5711__auto__","hiccup","p1__63752#","clojure.walk/postwalk","replicant.alias/expand","p__63767","vec__63768","seq63762","G__63763","p1__63761#","clojure.walk/prewalk"],"sourcesContent":["(ns replicant.alias\n  (:require [clojure.walk :as walk]\n            [replicant.assert :as assert]\n            [replicant.core :as r]\n            [replicant.hiccup :as h]\n            [replicant.hiccup-headers :as hiccup])\n  #?(:cljs (:require-macros [replicant.alias])))\n\n(def ^:no-doc aliases (atom {}))\n\n(defmacro ^{:indent 2} aliasfn\n  \"Define a function to use as an alias function. Creates a function that wraps\n  returned hiccup with debugging meta data when Replicant asserts are\n  enabled (e.g. during development). When asserts are not enabled (default for\n  production builds), creates a regular function with no added overhead.\n\n  `aliasfn` is most commonly used through `defalias`\"\n  [alias & forms]\n  (let [[_docstring [attr-map & body]]\n        (if (string? (first forms))\n          [(first forms) (next forms)]\n          [\"\" forms])\n        n-args (count attr-map)\n        attr-map (cond\n                   (= 0 n-args)\n                   '[_ _]\n\n                   (= 1 n-args)\n                   (conj attr-map '_)\n\n                   :else\n                   attr-map)]\n    (if (assert/assert?)\n      `(with-meta\n         (fn [& args#]\n           (let [~attr-map args#\n                 res# (do ~@body)]\n             (cond-> res#\n               (vector? res#)\n               (with-meta\n                 {:replicant/context\n                  {:alias ~alias\n                   :data (first args#)}}))))\n         {:replicant/alias ~alias})\n      `(with-meta (fn ~attr-map ~@body) {:replicant/alias ~alias}))))\n\n(defn register!\n  \"Register an alias. Associates the alias key `k` with the function `f`:\n\n   ```clj\n   (replicant.alias/register! :ui/a custom-link)\n   ```\"\n  [k f]\n  (swap! aliases assoc k f))\n\n(defmacro defalias\n  \"Creates a function to render `alias` (a namespaced keyword), and registers\n  it in the global registry. See `aliasfn` for details about the created function.\n  The global registry is available through `replicant.alias/get-registered-aliases`.\"\n  [alias & forms]\n  (let [alias-kw (keyword (str *ns*) (name alias))\n        alias-f `(aliasfn ~alias-kw ~@forms)]\n    `(let [f# ~alias-f\n           alias# ~alias-kw]\n       (register! alias# f#)\n       (def ~alias alias#))))\n\n(defn get-registered-aliases\n  \"Returns globally registered aliases\"\n  []\n  @aliases)\n\n(defn ^:no-doc ->hiccup [headers]\n  (when headers\n    (or (hiccup/text headers)\n        (into [(keyword (hiccup/tag-name headers))\n               (let [attrs (r/get-attrs headers)]\n                 (cond-> (hiccup/attrs headers)\n                   (:id attrs) (assoc :id (:id attrs))\n                   (:classes attrs) (assoc :class (set (:classes attrs)))))]\n              (r/flatten-seqs (hiccup/children headers))))))\n\n(defn ^:no-doc alias-hiccup? [x]\n  (and (h/hiccup? x) (qualified-keyword? (first x))))\n\n(defn ^:no-doc expand-aliased-hiccup [x opt]\n  (if (alias-hiccup? x)\n    (let [headers (r/get-hiccup-headers nil x)\n          defined? (get (:aliases opt) (hiccup/tag-name headers))]\n      (when (and (not defined?) (false? (get opt :ignore-missing-alias? true)))\n        (throw (ex-info (str \"Tried to expand undefined alias \" (hiccup/tag-name headers))\n                        {:alias (hiccup/tag-name headers)})))\n      (cond->> headers\n        (get (:aliases opt) (hiccup/tag-name headers))\n        (r/get-alias-headers opt)\n\n        :then ->hiccup))\n    x))\n\n(defn ^:no-doc get-opts [opt]\n  (update opt :aliases #(or % (get-registered-aliases))))\n\n(defn expand-1\n  \"Expand the first level of aliases in `hiccup`. The result may contain aliases\n  if returned by the top-level aliases. If using aliases that are not in the\n  global registry, pass `:aliases` in `opt`.\"\n  [hiccup & [opt]]\n  (let [opt (get-opts opt)]\n    (walk/postwalk #(expand-aliased-hiccup % opt) hiccup)))\n\n(defn expand\n  \"Recursively expand all aliases in `hiccup`. The result will not contain\n  aliases. If using aliases that are not in the global registry, pass `:aliases`\n  in `opt`.\"\n  [hiccup & [opt]]\n  (let [opt (get-opts opt)]\n    (walk/prewalk #(expand-aliased-hiccup % opt) hiccup)))\n"],"x_google_ignoreList":[0]}