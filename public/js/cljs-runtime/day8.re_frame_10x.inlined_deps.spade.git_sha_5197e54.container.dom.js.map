{"version":3,"sources":["day8/re_frame_10x/inlined_deps/spade/git_sha_5197e54/container/dom.cljs"],"mappings":"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","names":["js/day8","js/day8.re-frame-10x","js/day8.re-frame-10x.inlined-deps","js/day8.re-frame-10x.inlined-deps.spade","js/day8.re-frame-10x.inlined-deps.spade.git-sha-5197e54","js/day8.re-frame-10x.inlined-deps.spade.git-sha-5197e54.container","js/day8.re-frame-10x.inlined-deps.spade.git-sha-5197e54.container.dom","js/day8.re-frame-10x.inlined-deps.spade.git-sha-5197e54.container.dom.*injected-styles*","day8.re-frame-10x.inlined-deps.spade.git-sha-5197e54.container.dom/*injected-styles*","cljs.core.atom","day8.re-frame-10x.inlined-deps.spade.git-sha-5197e54.container.dom/perform-update!","obj","css","day8.re-frame-10x.inlined-deps.spade.git-sha-5197e54.container.dom/update!","styles-container","id","info","cljs.core.swap_BANG_","cljs.core/update","cljs.core._EQ_","cljs.core.assoc","day8.re-frame-10x.inlined-deps.spade.git-sha-5197e54.container.dom/inject!","target-dom","element","G__59447","js/document.createElement","js/Error","cljs.core/assoc","cljs.core/PROTOCOL_SENTINEL","this__5287__auto__","writer__5288__auto__","opt__5289__auto__","cljs.core/-write","day8.re-frame-10x.inlined-deps.spade.git-sha-5197e54.container.dom/DomStyleContainer","day8.re-frame-10x.inlined-deps.spade.git-sha-5197e54.container.dom/->DomStyleContainer","styles","_","style-name","resolved-container","or__5002__auto__","cljs.core/deref","cljs.core.get","cljs.core/contains?","resolved-dom","cljs.core/ifn?","js/document","var_args","G__59461","day8.re-frame-10x.inlined-deps.spade.git-sha-5197e54.container.dom/create-container","day8.re_frame_10x.inlined_deps.spade.git_sha_5197e54.container.dom.create_container"],"sourcesContent":["(ns day8.re-frame-10x.inlined-deps.spade.git-sha-5197e54.container.dom\n  \"The DomStyleContainer renders styles into DOM elements. References to those\n   elements are stored in a `styles` atom, or `*injected-styles*` if that is\n   not provided. Similarly, if no `target-dom` is provided, the `document.head`\n   element is used.\"\n  (:require [day8.re-frame-10x.inlined-deps.spade.git-sha-5197e54.container :refer [IStyleContainer]]))\n\n(defonce ^:dynamic *injected-styles* (atom nil))\n\n(defn- perform-update! [obj css]\n  (set! (.-innerHTML (:element obj)) css))\n\n(defn update! [styles-container id css info]\n  (swap! styles-container update id\n         (fn update-injected-style [obj]\n           (when-not (= (:source obj) css)\n             (perform-update! obj css))\n           (assoc obj :source css :info info))))\n\n(defn inject! [target-dom styles-container id css info]\n  (let [element (doto (js/document.createElement \"style\")\n                  (.setAttribute \"spade-id\" (str id)))\n        obj {:element element\n             :source css\n             :info info\n             :id id}]\n    (assert (some? target-dom)\n            \"An <head> element or target DOM is required to inject the style.\")\n\n    (.appendChild target-dom element)\n\n    (swap! styles-container assoc id obj)\n    (perform-update! obj css)))\n\n(deftype DomStyleContainer [target-dom styles]\n  IStyleContainer\n  (mounted-info [_ style-name]\n    (let [resolved-container (or styles\n                                 *injected-styles*)]\n      (:info (get @resolved-container style-name))))\n\n  (mount-style! [_ style-name css info]\n    (let [resolved-container (or styles\n                                 *injected-styles*)]\n      (if (contains? @resolved-container style-name)\n        (update! resolved-container style-name css info)\n\n        (let [resolved-dom (or (when (ifn? target-dom)\n                                 (target-dom))\n                               target-dom\n                               (.-head js/document))]\n          (inject! resolved-dom resolved-container style-name css info))))))\n\n(defn create-container\n  \"Create a DomStyleContainer. With no args, the default is created, which\n   renders into the `document.head` element. For rendering into a custom\n   target, such as when using Shadow DOM, you may provide a custom\n   `target-dom`: this may either be the element itself, or a function which\n   returns that element.\n\n   If you also wish to provide your own storage for the style references, you\n   may use the 3-arity version and provide an atom.\"\n  ([] (create-container nil))\n  ([target-dom] (create-container target-dom (when target-dom\n                                               (atom nil))))\n  ([target-dom styles-container]\n   (->DomStyleContainer target-dom styles-container)))\n"],"x_google_ignoreList":[0]}