{"version":3,"sources":["day8/re_frame_10x/inlined_deps/re_frame/v1v3v0/re_frame/subs.cljc"],"mappings":"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","names":["day8.re-frame-10x.inlined-deps.re-frame.v1v3v0.re-frame.subs/kind","js/Error","day8.re-frame-10x.inlined-deps.re-frame.v1v3v0.re-frame.registrar/kinds","day8.re-frame-10x.inlined-deps.re-frame.v1v3v0.re-frame.subs/query->reaction","cljs.core.atom","day8.re-frame-10x.inlined-deps.re-frame.v1v3v0.re-frame.subs/clear-subscription-cache!","seq__59451","cljs.core/seq","cljs.core/deref","chunk__59452","count__59453","i__59454","vec__59468","cljs.core.nth","temp__5823__auto__","cljs.core/chunked-seq?","c__5525__auto__","cljs.core/chunk-first","cljs.core/chunk-rest","cljs.core/count","vec__59473","cljs.core/first","cljs.core/next","k","rxn","day8.re-frame-10x.inlined-deps.re-frame.v1v3v0.re-frame.interop/dispose!","cljs.core/not-empty","day8.re_frame_10x.inlined_deps.re_frame.v1v3v0.re_frame.loggers.console","day8.re-frame-10x.inlined-deps.re-frame.v1v3v0.re-frame.subs/clear-all-handlers!","day8.re_frame_10x.inlined_deps.re_frame.v1v3v0.re_frame.registrar.clear_handlers","day8.re-frame-10x.inlined-deps.re-frame.v1v3v0.re-frame.subs/cache-and-return","query-v","dynv","r","cache-key","day8.re-frame-10x.inlined-deps.re-frame.v1v3v0.re-frame.interop/add-on-dispose!","day8.re-frame-10x.inlined-deps.re-frame.v1v3v0.re-frame.trace/is-trace-enabled?","*current-trace*-orig-val__59483","day8.re-frame-10x.inlined-deps.re-frame.v1v3v0.re-frame.trace/*current-trace*","*current-trace*-temp-val__59484","day8.re-frame-10x.inlined-deps.re-frame.v1v3v0.re-frame.trace/start-trace","end__59347__auto__","day8.re-frame-10x.inlined-deps.re-frame.v1v3v0.re-frame.interop/now","duration__59348__auto__","cljs.core.swap_BANG_","day8.re-frame-10x.inlined-deps.re-frame.v1v3v0.re-frame.trace/traces","cljs.core/conj","cljs.core.assoc","day8.re-frame-10x.inlined-deps.re-frame.v1v3v0.re-frame.trace/run-tracing-callbacks!","day8.re-frame-10x.inlined-deps.re-frame.v1v3v0.re-frame.utils/first-in-vector","day8.re-frame-10x.inlined-deps.re-frame.v1v3v0.re-frame.interop/reagent-id","query-cache","cljs.core/contains?","cljs.core.get","cljs.core.dissoc","day8.re-frame-10x.inlined-deps.re-frame.v1v3v0.re-frame.interop/debug-enabled?","new-trace__59349__auto__","cljs.core.merge","cljs.core.update","cljs.core/merge","var_args","G__59492","day8.re-frame-10x.inlined-deps.re-frame.v1v3v0.re-frame.subs/cache-lookup","day8.re_frame_10x.inlined_deps.re_frame.v1v3v0.re_frame.subs.cache_lookup","dyn-v","day8.re-frame-10x.inlined-deps.re-frame.v1v3v0.re-frame.subs/warn-when-not-reactive","day8.re-frame-10x.inlined-deps.re-frame.v1v3v0.re-frame.interop/reactive?","G__59511","day8.re-frame-10x.inlined-deps.re-frame.v1v3v0.re-frame.subs/subscribe","query","*current-trace*-orig-val__59512","*current-trace*-temp-val__59513","temp__5821__auto__","cached","query-id","handler-fn","day8.re_frame_10x.inlined_deps.re_frame.v1v3v0.re_frame.registrar.get_handler","day8.re-frame-10x.inlined-deps.re-frame.v1v3v0.re-frame.db/app-db","*current-trace*-orig-val__59528","*current-trace*-temp-val__59529","not-reactive","cljs.core.remove","day8.re-frame-10x.inlined-deps.re-frame.v1v3v0.re-frame.interop/ratom?","dyn-vals","day8.re-frame-10x.inlined-deps.re-frame.v1v3v0.re-frame.interop/make-reaction","cljs.core.mapv","sub","G__59553","G__59554","G__59555","G__59578","G__59579","G__59580","day8.re-frame-10x.inlined-deps.re-frame.v1v3v0.re-frame.subs/map-vals","f","m","cljs.core.into","cljs.core/empty","cljs.core.map","p__59594","vec__59595","v","day8.re-frame-10x.inlined-deps.re-frame.v1v3v0.re-frame.subs/map-signals","signals","cljs.core/sequential?","cljs.core/map?","day8.re-frame-10x.inlined-deps.re-frame.v1v3v0.re-frame.interop/deref?","day8.re-frame-10x.inlined-deps.re-frame.v1v3v0.re-frame.subs/to-seq","x","cljs.core/List","day8.re-frame-10x.inlined-deps.re-frame.v1v3v0.re-frame.subs/deref-input-signals","dereffed-signals","cljs.core.doall","args__5732__auto__","len__5726__auto__","i__5727__auto__","argseq__5733__auto__","cljs.core/IndexedSeq","day8.re-frame-10x.inlined-deps.re-frame.v1v3v0.re-frame.subs/reg-sub","seq59614","G__59615","self__5711__auto__","args","vec__59619","err-header","input-args","computation-fn","vec__59622","op","comp-f","cljs.core/take-last","cljs.core._EQ_","cljs.core/fn?","cljs.core/vector?","cljs.core/butlast","cljs.core/last","cljs.core.drop_last","G__59626","cljs.core/Keyword","db","_","p__59634","vec__59636","seq__59637","first__59638","qs","cljs.core.apply","inputs-fn","G__59641","vec__59646","marker","vec","day8.re_frame_10x.inlined_deps.re_frame.v1v3v0.re_frame.subs.subscribe","pairs","cljs.core.partition","markers","vecs","cljs.core/second","cljs.core/every?","day8.re-frame-10x.inlined-deps.re-frame.v1v3v0.re-frame.registrar/register-handler","query-vec","subscriptions","reaction-id","reaction","*current-trace*-orig-val__59662","*current-trace*-temp-val__59663","subscription","G__59668","G__59670","G__59678","G__59679","cljs.core/reset!","dyn-vec","*current-trace*-orig-val__59688","*current-trace*-temp-val__59689","G__59693","G__59694","G__59695","G__59700","G__59701","G__59702"],"sourcesContent":["(ns ^{:mranderson/inlined true} day8.re-frame-10x.inlined-deps.re-frame.v1v3v0.re-frame.subs\n (:require\n   [day8.re-frame-10x.inlined-deps.re-frame.v1v3v0.re-frame.db        :refer [app-db]]\n   [day8.re-frame-10x.inlined-deps.re-frame.v1v3v0.re-frame.interop   :refer [add-on-dispose! debug-enabled? make-reaction ratom? deref? dispose! reagent-id reactive?]]\n   [day8.re-frame-10x.inlined-deps.re-frame.v1v3v0.re-frame.loggers   :refer [console]]\n   [day8.re-frame-10x.inlined-deps.re-frame.v1v3v0.re-frame.utils     :refer [first-in-vector]]\n   [day8.re-frame-10x.inlined-deps.re-frame.v1v3v0.re-frame.registrar :refer [get-handler clear-handlers register-handler]]\n   [day8.re-frame-10x.inlined-deps.re-frame.v1v3v0.re-frame.trace     :as trace :include-macros true]))\n\n(def kind :sub)\n(assert (day8.re-frame-10x.inlined-deps.re-frame.v1v3v0.re-frame.registrar/kinds kind))\n\n;; -- cache -------------------------------------------------------------------\n;;\n;; De-duplicate subscriptions. If two or more equal subscriptions\n;; are concurrently active, we want only one handler running.\n;; Two subscriptions are \"equal\" if their query vectors test \"=\".\n(def query->reaction (atom {}))\n\n(defn clear-subscription-cache!\n  \"calls `on-dispose` for each cached item, \n   which will cause the value to be removed from the cache\" \n  []\n  (doseq [[k rxn] @query->reaction]\n    (dispose! rxn))\n  (if (not-empty @query->reaction)\n    (console :warn \"re-frame: The subscription cache isn't empty after being cleared\")))\n\n(defn clear-all-handlers!\n  \"Unregisters all existing subscription handlers\"\n  []\n  (clear-handlers kind)\n  (clear-subscription-cache!))\n\n(defn cache-and-return\n  \"cache the reaction r\"\n  [query-v dynv r]\n  (let [cache-key [query-v dynv]]\n    ;; when this reaction is no longer being used, remove it from the cache\n    (add-on-dispose! r #(trace/with-trace {:operation (first-in-vector query-v)\n                                           :op-type   :sub/dispose\n                                           :tags      {:query-v  query-v\n                                                       :reaction (reagent-id r)}}\n                                          (swap! query->reaction\n                                                 (fn [query-cache]\n                                                   (if (and (contains? query-cache cache-key) (identical? r (get query-cache cache-key)))\n                                                     (dissoc query-cache cache-key)\n                                                     query-cache)))))\n    ;; cache this reaction, so it can be used to deduplicate other, later \"=\" subscriptions\n    (swap! query->reaction (fn [query-cache]\n                             (when debug-enabled?\n                               (when (contains? query-cache cache-key)\n                                 (console :warn \"re-frame: Adding a new subscription to the cache while there is an existing subscription in the cache\" cache-key)))\n                             (assoc query-cache cache-key r)))\n    (trace/merge-trace! {:tags {:reaction (reagent-id r)}})\n    r)) ;; return the actual reaction\n\n(defn cache-lookup\n  ([query-v]\n   (cache-lookup query-v []))\n  ([query-v dyn-v]\n   (get @query->reaction [query-v dyn-v])))\n\n;; -- subscribe ---------------------------------------------------------------\n\n(defn warn-when-not-reactive\n  []\n  (when (and debug-enabled? (not (reactive?)))\n    (console :warn\n             \"re-frame: Subscribe was called outside of a reactive context.\\n\"\n             \"See: https://day8.github.io/re-frame/FAQs/UseASubscriptionInAJsEvent/\\n\"\n             \"https://day8.github.io/re-frame/FAQs/UseASubscriptionInAnEventHandler/\")))\n\n(defn subscribe\n  ([query]\n   (warn-when-not-reactive)\n   (trace/with-trace {:operation (first-in-vector query)\n                      :op-type   :sub/create\n                      :tags      {:query-v query}}\n     (if-let [cached (cache-lookup query)]\n       (do\n         (trace/merge-trace! {:tags {:cached?  true\n                                     :reaction (reagent-id cached)}})\n         cached)\n\n       (let [query-id   (first-in-vector query)\n             handler-fn (get-handler kind query-id)]\n         (trace/merge-trace! {:tags {:cached? false}})\n         (if (nil? handler-fn)\n           (do (trace/merge-trace! {:error true})\n               (console :error (str \"re-frame: no subscription handler registered for: \" query-id \". Returning a nil subscription.\")))\n           (cache-and-return query [] (handler-fn app-db query)))))))\n\n  ([query dynv]\n   (warn-when-not-reactive)\n   (trace/with-trace {:operation (first-in-vector query)\n                      :op-type   :sub/create\n                      :tags      {:query-v query\n                                  :dyn-v   dynv}}\n     (if-let [cached (cache-lookup query dynv)]\n       (do\n         (trace/merge-trace! {:tags {:cached?  true\n                                     :reaction (reagent-id cached)}})\n         cached)\n       (let [query-id   (first-in-vector query)\n             handler-fn (get-handler kind query-id)]\n         (trace/merge-trace! {:tags {:cached? false}})\n         (when debug-enabled?\n           (when-let [not-reactive (not-empty (remove ratom? dynv))]\n             (console :warn \"re-frame: your subscription's dynamic parameters that don't implement IReactiveAtom:\" not-reactive)))\n         (if (nil? handler-fn)\n           (do (trace/merge-trace! {:error true})\n               (console :error (str \"re-frame: no subscription handler registered for: \" query-id \". Returning a nil subscription.\")))\n           (let [dyn-vals (make-reaction (fn [] (mapv deref dynv)))\n                 sub      (make-reaction (fn [] (handler-fn app-db query @dyn-vals)))]\n             ;; handler-fn returns a reaction which is then wrapped in the sub reaction\n             ;; need to double deref it to get to the actual value.\n             ;(console :log \"Subscription created: \" v dynv)\n             (cache-and-return query dynv (make-reaction (fn [] @@sub))))))))))\n\n;; -- reg-sub -----------------------------------------------------------------\n\n(defn- map-vals\n  \"Returns a new version of 'm' in which 'f' has been applied to each value.\n  (map-vals inc {:a 4, :b 2}) => {:a 5, :b 3}\"\n  [f m]\n  (into (empty m)\n        (map (fn [[k v]] [k (f v)]))\n        m))\n\n(defn map-signals\n  \"Runs f over signals. Signals may take several\n  forms, this function handles all of them.\"\n  [f signals]\n  (cond\n    (sequential? signals) (map f signals)\n    (map? signals) (map-vals f signals)\n    (deref? signals) (f signals)\n    :else '()))\n\n(defn to-seq\n  \"Coerces x to a seq if it isn't one already\"\n  [x]\n  (if (sequential? x)\n    x\n    (list x)))\n\n(defn- deref-input-signals\n  [signals query-id]\n  (let [dereffed-signals (map-signals deref signals)]\n    (cond\n      (sequential? signals) (map deref signals)\n      (map? signals) (map-vals deref signals)\n      (deref? signals) (deref signals)\n      :else (console :error \"re-frame: in the reg-sub for\" query-id \", the input-signals function returns:\" signals))\n    (trace/merge-trace! {:tags {:input-signals (doall (to-seq (map-signals reagent-id signals)))}})\n    dereffed-signals))\n\n(defn reg-sub\n  [query-id & args]\n  (let [err-header       (str \"re-frame: reg-sub for \" query-id \", \")\n        [input-args      ;; may be empty, or one signal fn, or pairs of  :<- / vector\n         computation-fn] (let [[op f :as comp-f] (take-last 2 args)]\n                           (if (or (= 1 (count comp-f))\n                                   (fn? op)\n                                   (vector? op))\n                             [(butlast args) (last args)]\n                             (let [args (drop-last 2 args)]\n                               (case op\n                                 ;; return a function that calls the computation fn\n                                 ;;  on the input signal, removing the query vector\n                                 :->\n                                 [args (fn [db _]\n                                         (f db))]\n                                 ;; return a function that calls the computation fn\n                                 ;;  on the input signal and the data in the query vector\n                                 ;;  that is not the query-id\n                                 :=>\n                                 [args (fn [db [_ & qs]]\n                                         (apply f db qs))]\n                                 ;; an incorrect keyword was passed\n                                 (console :error err-header \"expected :-> or :=> as second to last argument, got:\" op)))))\n        inputs-fn      (case (count input-args)\n                         ;; no `inputs` function provided - give the default\n                         0 (fn\n                             ([_] app-db)\n                             ([_ _] app-db))\n\n                         ;; a single `inputs` fn\n                         1 (let [f (first input-args)]\n                             (when-not (fn? f)\n                               (console :error err-header \"2nd argument expected to be an inputs function, got:\" f))\n                             f)\n\n                         ;; one sugar pair\n                         2 (let [[marker vec] input-args]\n                             (when-not (= :<- marker)\n                               (console :error err-header \"expected :<-, got:\" marker))\n                             (fn inp-fn\n                               ([_] (subscribe vec))\n                               ([_ _] (subscribe vec))))\n\n                         ;; multiple sugar pairs\n                         (let [pairs   (partition 2 input-args)\n                               markers (map first pairs)\n                               vecs    (map second pairs)]\n                           (when-not (and (every? #{:<-} markers) (every? vector? vecs))\n                             (console :error err-header \"expected pairs of :<- and vectors, got:\" pairs))\n                           (fn inp-fn\n                             ([_] (map subscribe vecs))\n                             ([_ _] (map subscribe vecs)))))]\n    (register-handler\n      kind\n      query-id\n      (fn subs-handler-fn\n        ([db query-vec]\n         (let [subscriptions (inputs-fn query-vec nil)\n               reaction-id   (atom nil)\n               reaction      (make-reaction\n                               (fn []\n                                 (trace/with-trace {:operation (first-in-vector query-vec)\n                                                    :op-type   :sub/run\n                                                    :tags      {:query-v    query-vec\n                                                                :reaction   @reaction-id}}\n                                                   (let [subscription (computation-fn (deref-input-signals subscriptions query-id) query-vec)]\n                                                     (trace/merge-trace! {:tags {:value subscription}})\n                                                     subscription))))]\n\n           (reset! reaction-id (reagent-id reaction))\n           reaction))\n        ([db query-vec dyn-vec]\n         (let [subscriptions (inputs-fn query-vec dyn-vec)\n               reaction-id   (atom nil)\n               reaction      (make-reaction\n                               (fn []\n                                 (trace/with-trace {:operation (first-in-vector query-vec)\n                                                    :op-type   :sub/run\n                                                    :tags      {:query-v   query-vec\n                                                                :dyn-v     dyn-vec\n                                                                :reaction  @reaction-id}}\n                                                   (let [subscription (computation-fn (deref-input-signals subscriptions query-id) query-vec dyn-vec)]\n                                                     (trace/merge-trace! {:tags {:value subscription}})\n                                                     subscription))))]\n\n           (reset! reaction-id (reagent-id reaction))\n           reaction))))))\n"],"x_google_ignoreList":[0]}