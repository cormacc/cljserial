{
"version":3,
"file":"module$node_modules$$supabase$realtime_js$dist$main$RealtimeClient.js",
"lineCount":280,
"mappings":"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",
"sources":["node_modules/@supabase/realtime-js/dist/main/RealtimeClient.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$$supabase$realtime_js$dist$main$RealtimeClient\"] = function(global,require,module,exports) {\n\"use strict\";\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    var desc = Object.getOwnPropertyDescriptor(m, k);\n    if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n      desc = { enumerable: true, get: function() { return m[k]; } };\n    }\n    Object.defineProperty(o, k2, desc);\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {\n    Object.defineProperty(o, \"default\", { enumerable: true, value: v });\n}) : function(o, v) {\n    o[\"default\"] = v;\n});\nvar __importStar = (this && this.__importStar) || function (mod) {\n    if (mod && mod.__esModule) return mod;\n    var result = {};\n    if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n    __setModuleDefault(result, mod);\n    return result;\n};\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst constants_1 = require(\"./lib/constants\");\nconst serializer_1 = __importDefault(require(\"./lib/serializer\"));\nconst timer_1 = __importDefault(require(\"./lib/timer\"));\nconst transformers_1 = require(\"./lib/transformers\");\nconst RealtimeChannel_1 = __importDefault(require(\"./RealtimeChannel\"));\nconst noop = () => { };\nconst NATIVE_WEBSOCKET_AVAILABLE = typeof WebSocket !== 'undefined';\nconst WORKER_SCRIPT = `\n  addEventListener(\"message\", (e) => {\n    if (e.data.event === \"start\") {\n      setInterval(() => postMessage({ event: \"keepAlive\" }), e.data.interval);\n    }\n  });`;\nclass RealtimeClient {\n    /**\n     * Initializes the Socket.\n     *\n     * @param endPoint The string WebSocket endpoint, ie, \"ws://example.com/socket\", \"wss://example.com\", \"/socket\" (inherited host & protocol)\n     * @param httpEndpoint The string HTTP endpoint, ie, \"https://example.com\", \"/\" (inherited host & protocol)\n     * @param options.transport The Websocket Transport, for example WebSocket.\n     * @param options.timeout The default timeout in milliseconds to trigger push timeouts.\n     * @param options.params The optional params to pass when connecting.\n     * @param options.headers The optional headers to pass when connecting.\n     * @param options.heartbeatIntervalMs The millisec interval to send a heartbeat message.\n     * @param options.logger The optional function for specialized logging, ie: logger: (kind, msg, data) => { console.log(`${kind}: ${msg}`, data) }\n     * @param options.encode The function to encode outgoing messages. Defaults to JSON: (payload, callback) => callback(JSON.stringify(payload))\n     * @param options.decode The function to decode incoming messages. Defaults to Serializer's decode.\n     * @param options.reconnectAfterMs he optional function that returns the millsec reconnect interval. Defaults to stepped backoff off.\n     * @param options.worker Use Web Worker to set a side flow. Defaults to false.\n     * @param options.workerUrl The URL of the worker script. Defaults to https://realtime.supabase.com/worker.js that includes a heartbeat event call to keep the connection alive.\n     */\n    constructor(endPoint, options) {\n        var _a;\n        this.accessTokenValue = null;\n        this.apiKey = null;\n        this.channels = [];\n        this.endPoint = '';\n        this.httpEndpoint = '';\n        this.headers = constants_1.DEFAULT_HEADERS;\n        this.params = {};\n        this.timeout = constants_1.DEFAULT_TIMEOUT;\n        this.heartbeatIntervalMs = 30000;\n        this.heartbeatTimer = undefined;\n        this.pendingHeartbeatRef = null;\n        this.ref = 0;\n        this.logger = noop;\n        this.conn = null;\n        this.sendBuffer = [];\n        this.serializer = new serializer_1.default();\n        this.stateChangeCallbacks = {\n            open: [],\n            close: [],\n            error: [],\n            message: [],\n        };\n        this.accessToken = null;\n        /**\n         * Use either custom fetch, if provided, or default fetch to make HTTP requests\n         *\n         * @internal\n         */\n        this._resolveFetch = (customFetch) => {\n            let _fetch;\n            if (customFetch) {\n                _fetch = customFetch;\n            }\n            else if (typeof fetch === 'undefined') {\n                _fetch = (...args) => Promise.resolve().then(() => __importStar(require('@supabase/node-fetch'))).then(({ default: fetch }) => fetch(...args));\n            }\n            else {\n                _fetch = fetch;\n            }\n            return (...args) => _fetch(...args);\n        };\n        this.endPoint = `${endPoint}/${constants_1.TRANSPORTS.websocket}`;\n        this.httpEndpoint = (0, transformers_1.httpEndpointURL)(endPoint);\n        if (options === null || options === void 0 ? void 0 : options.transport) {\n            this.transport = options.transport;\n        }\n        else {\n            this.transport = null;\n        }\n        if (options === null || options === void 0 ? void 0 : options.params)\n            this.params = options.params;\n        if (options === null || options === void 0 ? void 0 : options.headers)\n            this.headers = Object.assign(Object.assign({}, this.headers), options.headers);\n        if (options === null || options === void 0 ? void 0 : options.timeout)\n            this.timeout = options.timeout;\n        if (options === null || options === void 0 ? void 0 : options.logger)\n            this.logger = options.logger;\n        if (options === null || options === void 0 ? void 0 : options.heartbeatIntervalMs)\n            this.heartbeatIntervalMs = options.heartbeatIntervalMs;\n        const accessTokenValue = (_a = options === null || options === void 0 ? void 0 : options.params) === null || _a === void 0 ? void 0 : _a.apikey;\n        if (accessTokenValue) {\n            this.accessTokenValue = accessTokenValue;\n            this.apiKey = accessTokenValue;\n        }\n        this.reconnectAfterMs = (options === null || options === void 0 ? void 0 : options.reconnectAfterMs)\n            ? options.reconnectAfterMs\n            : (tries) => {\n                return [1000, 2000, 5000, 10000][tries - 1] || 10000;\n            };\n        this.encode = (options === null || options === void 0 ? void 0 : options.encode)\n            ? options.encode\n            : (payload, callback) => {\n                return callback(JSON.stringify(payload));\n            };\n        this.decode = (options === null || options === void 0 ? void 0 : options.decode)\n            ? options.decode\n            : this.serializer.decode.bind(this.serializer);\n        this.reconnectTimer = new timer_1.default(async () => {\n            this.disconnect();\n            this.connect();\n        }, this.reconnectAfterMs);\n        this.fetch = this._resolveFetch(options === null || options === void 0 ? void 0 : options.fetch);\n        if (options === null || options === void 0 ? void 0 : options.worker) {\n            if (typeof window !== 'undefined' && !window.Worker) {\n                throw new Error('Web Worker is not supported');\n            }\n            this.worker = (options === null || options === void 0 ? void 0 : options.worker) || false;\n            this.workerUrl = options === null || options === void 0 ? void 0 : options.workerUrl;\n        }\n        this.accessToken = (options === null || options === void 0 ? void 0 : options.accessToken) || null;\n    }\n    /**\n     * Connects the socket, unless already connected.\n     */\n    connect() {\n        if (this.conn) {\n            return;\n        }\n        if (this.transport) {\n            this.conn = new this.transport(this.endpointURL(), undefined, {\n                headers: this.headers,\n            });\n            return;\n        }\n        if (NATIVE_WEBSOCKET_AVAILABLE) {\n            this.conn = new WebSocket(this.endpointURL());\n            this.setupConnection();\n            return;\n        }\n        this.conn = new WSWebSocketDummy(this.endpointURL(), undefined, {\n            close: () => {\n                this.conn = null;\n            },\n        });\n        Promise.resolve().then(() => __importStar(require('ws'))).then(({ default: WS }) => {\n            this.conn = new WS(this.endpointURL(), undefined, {\n                headers: this.headers,\n            });\n            this.setupConnection();\n        });\n    }\n    /**\n     * Returns the URL of the websocket.\n     * @returns string The URL of the websocket.\n     */\n    endpointURL() {\n        return this._appendParams(this.endPoint, Object.assign({}, this.params, { vsn: constants_1.VSN }));\n    }\n    /**\n     * Disconnects the socket.\n     *\n     * @param code A numeric status code to send on disconnect.\n     * @param reason A custom reason for the disconnect.\n     */\n    disconnect(code, reason) {\n        if (this.conn) {\n            this.conn.onclose = function () { }; // noop\n            if (code) {\n                this.conn.close(code, reason !== null && reason !== void 0 ? reason : '');\n            }\n            else {\n                this.conn.close();\n            }\n            this.conn = null;\n            // remove open handles\n            this.heartbeatTimer && clearInterval(this.heartbeatTimer);\n            this.reconnectTimer.reset();\n        }\n    }\n    /**\n     * Returns all created channels\n     */\n    getChannels() {\n        return this.channels;\n    }\n    /**\n     * Unsubscribes and removes a single channel\n     * @param channel A RealtimeChannel instance\n     */\n    async removeChannel(channel) {\n        const status = await channel.unsubscribe();\n        if (this.channels.length === 0) {\n            this.disconnect();\n        }\n        return status;\n    }\n    /**\n     * Unsubscribes and removes all channels\n     */\n    async removeAllChannels() {\n        const values_1 = await Promise.all(this.channels.map((channel) => channel.unsubscribe()));\n        this.disconnect();\n        return values_1;\n    }\n    /**\n     * Logs the message.\n     *\n     * For customized logging, `this.logger` can be overridden.\n     */\n    log(kind, msg, data) {\n        this.logger(kind, msg, data);\n    }\n    /**\n     * Returns the current state of the socket.\n     */\n    connectionState() {\n        switch (this.conn && this.conn.readyState) {\n            case constants_1.SOCKET_STATES.connecting:\n                return constants_1.CONNECTION_STATE.Connecting;\n            case constants_1.SOCKET_STATES.open:\n                return constants_1.CONNECTION_STATE.Open;\n            case constants_1.SOCKET_STATES.closing:\n                return constants_1.CONNECTION_STATE.Closing;\n            default:\n                return constants_1.CONNECTION_STATE.Closed;\n        }\n    }\n    /**\n     * Returns `true` is the connection is open.\n     */\n    isConnected() {\n        return this.connectionState() === constants_1.CONNECTION_STATE.Open;\n    }\n    channel(topic, params = { config: {} }) {\n        const chan = new RealtimeChannel_1.default(`realtime:${topic}`, params, this);\n        this.channels.push(chan);\n        return chan;\n    }\n    /**\n     * Push out a message if the socket is connected.\n     *\n     * If the socket is not connected, the message gets enqueued within a local buffer, and sent out when a connection is next established.\n     */\n    push(data) {\n        const { topic, event, payload, ref } = data;\n        const callback = () => {\n            this.encode(data, (result) => {\n                var _a;\n                (_a = this.conn) === null || _a === void 0 ? void 0 : _a.send(result);\n            });\n        };\n        this.log('push', `${topic} ${event} (${ref})`, payload);\n        if (this.isConnected()) {\n            callback();\n        }\n        else {\n            this.sendBuffer.push(callback);\n        }\n    }\n    /**\n     * Sets the JWT access token used for channel subscription authorization and Realtime RLS.\n     *\n     * If param is null it will use the `accessToken` callback function or the token set on the client.\n     *\n     * On callback used, it will set the value of the token internal to the client.\n     *\n     * @param token A JWT string to override the token set on the client.\n     */\n    async setAuth(token = null) {\n        let tokenToSend = token ||\n            (this.accessToken && (await this.accessToken())) ||\n            this.accessTokenValue;\n        if (tokenToSend) {\n            let parsed = null;\n            try {\n                parsed = JSON.parse(atob(tokenToSend.split('.')[1]));\n            }\n            catch (_error) { }\n            if (parsed && parsed.exp) {\n                let now = Math.floor(Date.now() / 1000);\n                let valid = now - parsed.exp < 0;\n                if (!valid) {\n                    this.log('auth', `InvalidJWTToken: Invalid value for JWT claim \"exp\" with value ${parsed.exp}`);\n                    return Promise.reject(`InvalidJWTToken: Invalid value for JWT claim \"exp\" with value ${parsed.exp}`);\n                }\n            }\n            this.accessTokenValue = tokenToSend;\n            this.channels.forEach((channel) => {\n                tokenToSend && channel.updateJoinPayload({ access_token: tokenToSend });\n                if (channel.joinedOnce && channel._isJoined()) {\n                    channel._push(constants_1.CHANNEL_EVENTS.access_token, {\n                        access_token: tokenToSend,\n                    });\n                }\n            });\n        }\n    }\n    /**\n     * Sends a heartbeat message if the socket is connected.\n     */\n    async sendHeartbeat() {\n        var _a;\n        if (!this.isConnected()) {\n            return;\n        }\n        if (this.pendingHeartbeatRef) {\n            this.pendingHeartbeatRef = null;\n            this.log('transport', 'heartbeat timeout. Attempting to re-establish connection');\n            (_a = this.conn) === null || _a === void 0 ? void 0 : _a.close(constants_1.WS_CLOSE_NORMAL, 'hearbeat timeout');\n            return;\n        }\n        this.pendingHeartbeatRef = this._makeRef();\n        this.push({\n            topic: 'phoenix',\n            event: 'heartbeat',\n            payload: {},\n            ref: this.pendingHeartbeatRef,\n        });\n        this.setAuth();\n    }\n    /**\n     * Flushes send buffer\n     */\n    flushSendBuffer() {\n        if (this.isConnected() && this.sendBuffer.length > 0) {\n            this.sendBuffer.forEach((callback) => callback());\n            this.sendBuffer = [];\n        }\n    }\n    /**\n     * Return the next message ref, accounting for overflows\n     *\n     * @internal\n     */\n    _makeRef() {\n        let newRef = this.ref + 1;\n        if (newRef === this.ref) {\n            this.ref = 0;\n        }\n        else {\n            this.ref = newRef;\n        }\n        return this.ref.toString();\n    }\n    /**\n     * Unsubscribe from channels with the specified topic.\n     *\n     * @internal\n     */\n    _leaveOpenTopic(topic) {\n        let dupChannel = this.channels.find((c) => c.topic === topic && (c._isJoined() || c._isJoining()));\n        if (dupChannel) {\n            this.log('transport', `leaving duplicate topic \"${topic}\"`);\n            dupChannel.unsubscribe();\n        }\n    }\n    /**\n     * Removes a subscription from the socket.\n     *\n     * @param channel An open subscription.\n     *\n     * @internal\n     */\n    _remove(channel) {\n        this.channels = this.channels.filter((c) => c._joinRef() !== channel._joinRef());\n    }\n    /**\n     * Sets up connection handlers.\n     *\n     * @internal\n     */\n    setupConnection() {\n        if (this.conn) {\n            this.conn.binaryType = 'arraybuffer';\n            this.conn.onopen = () => this._onConnOpen();\n            this.conn.onerror = (error) => this._onConnError(error);\n            this.conn.onmessage = (event) => this._onConnMessage(event);\n            this.conn.onclose = (event) => this._onConnClose(event);\n        }\n    }\n    /** @internal */\n    _onConnMessage(rawMessage) {\n        this.decode(rawMessage.data, (msg) => {\n            let { topic, event, payload, ref } = msg;\n            if (ref && ref === this.pendingHeartbeatRef) {\n                this.pendingHeartbeatRef = null;\n            }\n            this.log('receive', `${payload.status || ''} ${topic} ${event} ${(ref && '(' + ref + ')') || ''}`, payload);\n            this.channels\n                .filter((channel) => channel._isMember(topic))\n                .forEach((channel) => channel._trigger(event, payload, ref));\n            this.stateChangeCallbacks.message.forEach((callback) => callback(msg));\n        });\n    }\n    /** @internal */\n    async _onConnOpen() {\n        this.log('transport', `connected to ${this.endpointURL()}`);\n        this.flushSendBuffer();\n        this.reconnectTimer.reset();\n        if (!this.worker) {\n            this.heartbeatTimer && clearInterval(this.heartbeatTimer);\n            this.heartbeatTimer = setInterval(() => this.sendHeartbeat(), this.heartbeatIntervalMs);\n        }\n        else {\n            if (this.workerUrl) {\n                this.log('worker', `starting worker for from ${this.workerUrl}`);\n            }\n            else {\n                this.log('worker', `starting default worker`);\n            }\n            const objectUrl = this._workerObjectUrl(this.workerUrl);\n            this.workerRef = new Worker(objectUrl);\n            this.workerRef.onerror = (error) => {\n                this.log('worker', 'worker error', error.message);\n                this.workerRef.terminate();\n            };\n            this.workerRef.onmessage = (event) => {\n                if (event.data.event === 'keepAlive') {\n                    this.sendHeartbeat();\n                }\n            };\n            this.workerRef.postMessage({\n                event: 'start',\n                interval: this.heartbeatIntervalMs,\n            });\n        }\n        this.stateChangeCallbacks.open.forEach((callback) => callback());\n    }\n    /** @internal */\n    _onConnClose(event) {\n        this.log('transport', 'close', event);\n        this._triggerChanError();\n        this.heartbeatTimer && clearInterval(this.heartbeatTimer);\n        this.reconnectTimer.scheduleTimeout();\n        this.stateChangeCallbacks.close.forEach((callback) => callback(event));\n    }\n    /** @internal */\n    _onConnError(error) {\n        this.log('transport', error.message);\n        this._triggerChanError();\n        this.stateChangeCallbacks.error.forEach((callback) => callback(error));\n    }\n    /** @internal */\n    _triggerChanError() {\n        this.channels.forEach((channel) => channel._trigger(constants_1.CHANNEL_EVENTS.error));\n    }\n    /** @internal */\n    _appendParams(url, params) {\n        if (Object.keys(params).length === 0) {\n            return url;\n        }\n        const prefix = url.match(/\\?/) ? '&' : '?';\n        const query = new URLSearchParams(params);\n        return `${url}${prefix}${query}`;\n    }\n    _workerObjectUrl(url) {\n        let result_url;\n        if (url) {\n            result_url = url;\n        }\n        else {\n            const blob = new Blob([WORKER_SCRIPT], { type: 'application/javascript' });\n            result_url = URL.createObjectURL(blob);\n        }\n        return result_url;\n    }\n}\nexports.default = RealtimeClient;\nclass WSWebSocketDummy {\n    constructor(address, _protocols, options) {\n        this.binaryType = 'arraybuffer';\n        this.onclose = () => { };\n        this.onerror = () => { };\n        this.onmessage = () => { };\n        this.onopen = () => { };\n        this.readyState = constants_1.SOCKET_STATES.connecting;\n        this.send = () => { };\n        this.url = null;\n        this.url = address;\n        this.close = options.close;\n    }\n}\n//# sourceMappingURL=RealtimeClient.js.map\n};"],
"names":["shadow$provide","global","require","module","exports","__createBinding","Object","create","o","m","k","k2","undefined","desc","getOwnPropertyDescriptor","__esModule","writable","configurable","enumerable","get","defineProperty","__setModuleDefault","v","value","__importStar","mod","result","prototype","hasOwnProperty","call","__importDefault","constants_1","serializer_1","timer_1","transformers_1","RealtimeChannel_1","noop","NATIVE_WEBSOCKET_AVAILABLE","WebSocket","RealtimeClient","constructor","endPoint","options","_a","apiKey","accessTokenValue","channels","httpEndpoint","headers","DEFAULT_HEADERS","params","timeout","DEFAULT_TIMEOUT","heartbeatIntervalMs","heartbeatTimer","pendingHeartbeatRef","ref","logger","conn","sendBuffer","serializer","default","stateChangeCallbacks","open","close","error","message","accessToken","_resolveFetch","customFetch","this._resolveFetch","_fetch","fetch","args","Promise","resolve","then","TRANSPORTS","websocket","httpEndpointURL","transport","assign","apikey","reconnectAfterMs","tries","encode","payload","callback","JSON","stringify","decode","bind","reconnectTimer","disconnect","connect","worker","window","Worker","Error","workerUrl","endpointURL","setupConnection","WSWebSocketDummy","WS","_appendParams","vsn","VSN","code","reason","onclose","this.conn.onclose","clearInterval","reset","getChannels","removeChannel","channel","status","unsubscribe","length","removeAllChannels","values_1","all","map","log","kind","msg","data","connectionState","readyState","SOCKET_STATES","connecting","CONNECTION_STATE","Connecting","Open","closing","Closing","Closed","isConnected","topic","config","chan","push","event","send","setAuth","token","tokenToSend","parsed","parse","atob","split","_error","exp","Math","floor","now","Date","reject","forEach","updateJoinPayload","access_token","joinedOnce","_isJoined","_push","CHANNEL_EVENTS","sendHeartbeat","WS_CLOSE_NORMAL","_makeRef","flushSendBuffer","newRef","toString","_leaveOpenTopic","dupChannel","find","c","_isJoining","_remove","filter","_joinRef","binaryType","onopen","this.conn.onopen","_onConnOpen","onerror","this.conn.onerror","_onConnError","onmessage","this.conn.onmessage","_onConnMessage","_onConnClose","rawMessage","_isMember","_trigger","objectUrl","_workerObjectUrl","workerRef","this.workerRef.onerror","terminate","this.workerRef.onmessage","postMessage","interval","setInterval","_triggerChanError","scheduleTimeout","url","keys","prefix","match","query","URLSearchParams","blob","Blob","WORKER_SCRIPT","type","result_url","URL","createObjectURL","address","_protocols","this.onclose","this.onerror","this.onmessage","this.onopen","this.send"]
}
