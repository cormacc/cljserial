{"version":3,"sources":["refx/effects.cljc"],"mappings":"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","names":["refx.effects/kind","refx.effects/register","id","handler","refx.registry/add!","refx.effects/db-effect","db","cljs.core/deref","refx.db/app-db","cljs.core/reset!","refx.effects/do-fx","refx.interceptor.__GT_interceptor","context","effects","effects-without-db","cljs.core.dissoc","temp__5823__auto__","new-db","seq__86837","cljs.core/seq","chunk__86838","count__86839","i__86840","vec__86869","cljs.core.nth","cljs.core/chunked-seq?","c__5525__auto__","cljs.core/chunk-first","cljs.core/chunk-rest","cljs.core/count","vec__86878","cljs.core/first","cljs.core/next","fx-id","effect-value","temp__5821__auto__","effect-fn","refx.registry.lookup","refx.log.warn","p__86885","map__86886","cljs.core/--destructure-map","cljs.core.get","refx.effects/dispatch-later","ms","dispatch","effect","cljs.core/empty?","refx.log.error","refx.interop/set-timeout!","refx.dispatch/dispatch","value","cljs.core/map?","seq__86911","chunk__86912","count__86913","i__86914","cljs.core.remove","cljs.core/nil?","seq-of-effects","cljs.core/sequential?","cljs.core/type","seq__86930","chunk__86931","count__86932","i__86933","vec__86953","vec__86964","cljs.core._EQ_","cljs.core/vector?","seq__86986","chunk__86987","count__86988","i__86989","event","seq__87033","chunk__87034","count__87035","i__87036","event-id","refx.registry/remove!","refx.events/kind","refx.registry/clear!"],"sourcesContent":["(ns refx.effects\n  (:require [refx.dispatch :as dispatch]\n            [refx.events :as events]\n            [refx.interceptor :refer [->interceptor]]\n            [refx.interop :as interop]\n            [refx.log :as log]\n            [refx.registry :as registry]\n            [refx.db :refer [app-db]]))\n\n(def kind :fx)\n\n;; -- Registration ------------------------------------------------------------\n\n(defn register\n  [id handler]\n  (registry/add! kind id handler))\n\n;; -- Interceptor -------------------------------------------------------------\n\n(defn- db-effect [db]\n  (when-not (identical? @app-db db)\n    (reset! app-db db)))\n\n(def do-fx\n  \"An interceptor whose `:after` actions the contents of `:effects`. As a result,\n  this interceptor is Domino 3.\n\n  This interceptor is silently added (by reg-event-db etc) to the front of\n  interceptor chains for all events.\n\n  For each key in `:effects` (a map), it calls the registered `effects handler`\n  (see `reg-fx` for registration of effect handlers).\n\n  So, if `:effects` was:\n      {:dispatch  [:hello 42]\n       :db        {...}\n       :undo      \\\"set flag\\\"}\n\n  it will call the registered effect handlers for each of the map's keys:\n  `:dispatch`, `:undo` and `:db`. When calling each handler, provides the map\n  value for that key - so in the example above the effect handler for :dispatch\n  will be given one arg `[:hello 42]`.\n\n  You cannot rely on the ordering in which effects are executed, other than that\n  `:db` is guaranteed to be executed first.\"\n  (->interceptor\n   :id :do-fx\n   :after (fn do-fx-after\n            [context]\n            (let [effects            (:effects context)\n                  effects-without-db (dissoc effects :db)]\n                 ;; :db effect is guaranteed to be handled before all other effects.\n              (when-let [new-db (:db effects)]\n                ;; TODO: Look it up, since it could change?\n                (db-effect new-db))\n              (doseq [[fx-id effect-value] effects-without-db]\n                (if-let [effect-fn (registry/lookup kind fx-id false)]\n                  (effect-fn effect-value)\n                  (log/warn \"no handler registered for effect:\" fx-id \". Ignoring.\")))))))\n\n;; -- Builtin Effect Handlers  ------------------------------------------------\n\n;; :dispatch-later\n;;\n;; `dispatch` one or more events after given delays. Expects a collection\n;; of maps with two keys:  :`ms` and `:dispatch`\n;;\n;; usage:\n;;\n;;    {:dispatch-later [{:ms 200 :dispatch [:event-id \"param\"]}    ;;  in 200ms do this: (dispatch [:event-id \"param\"])\n;;                      {:ms 100 :dispatch [:also :this :in :100ms]}]}\n;;\n;; Note: nil entries in the collection are ignored which means events can be added\n;; conditionally:\n;;    {:dispatch-later [ (when (> 3 5) {:ms 200 :dispatch [:conditioned-out]})\n;;                       {:ms 100 :dispatch [:another-one]}]}\n;;\n(defn dispatch-later\n  [{:keys [ms dispatch] :as effect}]\n  (if (or (empty? dispatch) (not (number? ms)))\n    (log/error \"ignoring bad :dispatch-later value:\" effect)\n    (interop/set-timeout! #(dispatch/dispatch dispatch) ms)))\n\n(register\n :dispatch-later\n (fn [value]\n   (if (map? value)\n     (dispatch-later value)\n     (doseq [effect (remove nil? value)]\n       (dispatch-later effect)))))\n\n;; :fx\n;;\n;; Handle one or more effects. Expects a collection of vectors (tuples) of the\n;; form [fx-id effect-value]. `nil` entries in the collection are ignored\n;; so effects can be added conditionally.\n;;\n;; usage:\n;;\n;; {:fx [[:dispatch [:event-id \"param\"]]\n;;       nil\n;;       [:http-xhrio {:method :post\n;;                     ...}]]}\n;;\n(register\n :fx\n (fn [seq-of-effects]\n   (if-not (sequential? seq-of-effects)\n     (log/warn \"\\\":fx\\\" effect expects a seq, but was given \" (type seq-of-effects))\n     (doseq [[fx-id effect-value] (remove nil? seq-of-effects)]\n       (when (= :db fx-id)\n         (log/warn \"\\\":fx\\\" effect should not contain a :db effect\"))\n       (if-let [effect-fn (registry/lookup kind fx-id false)]\n         (effect-fn effect-value)\n         (log/warn \"in \\\":fx\\\" effect found \" fx-id \" which has no associated handler. Ignoring.\"))))))\n\n;; :dispatch\n;;\n;; `dispatch` one event. Expects a single vector.\n;;\n;; usage:\n;;   {:dispatch [:event-id \"param\"] }\n(register\n :dispatch\n (fn [value]\n   (if-not (vector? value)\n     (log/error \"ignoring bad :dispatch value. Expected a vector, but got:\" value)\n     (dispatch/dispatch value))))\n\n;; :dispatch-n\n;;\n;; `dispatch` more than one event. Expects a list or vector of events. Something for which\n;; sequential? returns true.\n;;\n;; usage:\n;;   {:dispatch-n (list [:do :all] [:three :of] [:these])}\n;;\n;; Note: nil events are ignored which means events can be added\n;; conditionally:\n;;    {:dispatch-n (list (when (> 3 5) [:conditioned-out])\n;;                       [:another-one])}\n;;\n(register\n :dispatch-n\n (fn [value]\n   (if-not (sequential? value)\n     (log/error \"ignoring bad :dispatch-n value. Expected a collection, but got:\" value)\n     (doseq [event (remove nil? value)] (dispatch/dispatch event)))))\n\n\n;; :deregister-event-handler\n;;\n;; removes a previously registered event handler. Expects either a single id (\n;; typically a namespaced keyword), or a seq of ids.\n;;\n;; usage:\n;;   {:deregister-event-handler :my-id)}\n;; or:\n;;   {:deregister-event-handler [:one-id :another-id]}\n;;\n;; TODO: \"unregister\"\n(register\n :deregister-event-handler\n (fn [value]\n   (if (sequential? value)\n     (doseq [event-id value] (registry/remove! events/kind event-id))\n     (registry/clear! events/kind))))\n\n;; :db\n;;\n;; reset! app-db with a new value. `value` is expected to be a map.\n;;\n;; usage:\n;;   {:db  {:key1 value1 key2 value2}}\n;;\n(register\n :db\n  db-effect)\n"],"x_google_ignoreList":[0]}