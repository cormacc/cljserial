{"version":3,"sources":["day8/re_frame_10x.cljs"],"mappings":"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","names":["js/goog.define","day8.re-frame-10x/debug?","day8.re-frame-10x/resizer-style","draggable-area","day8.re-frame-10x/ease-transition","day8.re-frame-10x/devtools-outer","opts","handle-keys?","day8.re_frame_10x.inlined_deps.re_frame.v1v3v0.re_frame.core.subscribe","panel-width%","showing?","dragging?","day8.re_frame_10x.inlined_deps.reagent.v1v2v0.reagent.core.atom","window-width","js/window.innerWidth","panel-key","ready-to-bind-key","handle-window-resize","day8.re-frame-10x.inlined-deps.re-frame.v1v3v0.re-frame.core/dispatch","_","window-width-val","cljs.core/reset!","handle-keys","e","tag-name","modifier?","cljs.core/contains?","entering-input?","and__5000__auto__","cljs.core/deref","day8.re-frame-10x.tools.datafy/keyboard-event","cljs.core._EQ_","handle-mousemove","x","new-window-width","width%","handle-mouse-up","day8.re_frame_10x.inlined_deps.reagent.v1v2v0.reagent.core.create_class","js/window.addEventListener","js/window.removeEventListener","left","transition","day8.re-frame-10x.components.re-com/box","day8.re-frame-10x.components.re-com/h-box","day8.re-frame-10x.navigation.views/devtools-inner","day8.re-frame-10x/traced-sub","epoch-id","reaction-id","cljs.core.get_in","day8.re-frame-10x.inlined-deps.re-frame.v1v3v0.re-frame.db/app-db","day8.re-frame-10x/traced-result","trace-id","fragment-id","trace","cljs.core/first","p1__86956#","cljs.core.filter","day8.re-frame-10x/factory-reset!","day8.re-frame-10x/show-panel!","show-panel?","day8.re-frame-10x/handle-keys!","day8.re-frame-10x/create-shadow-root","day8.re-frame-10x.tools.shadow-dom/shadow-root","js/document","day8.re-frame-10x/create-style-container","shadow-root","day8.re-frame-10x.inlined-deps.spade.git-sha-5197e54.react/with-style-container","day8.re_frame_10x.inlined_deps.spade.git_sha_5197e54.container.dom.create_container","day8.re-frame-10x/patch!","day8.reagent.impl.component/patch-custom-wrapper","day8.reagent.impl.component/patch-wrap-funs","day8.reagent.impl.batching/patch-next-tick","day8.re-frame-10x/history-size","day8.re-frame-10x/ignored-events","day8.re-frame-10x/hidden-namespaces","day8.re-frame-10x/time-travel?","day8.re-frame-10x/ignored-libs","day8.re-frame-10x/ns-aliases","day8.re-frame-10x/trace-when","day8.re-frame-10x/project-config","p1__87000#","p1__87001#","read","day8.re-frame-10x.tools.reader.edn/read-string-maybe","keep-vals","cljs.core.remove","cljs.core.comp","cljs.core/nil?","cljs.core/second","ignore","view","alias","p__87014","vec__87015","cljs.core.nth","k","v","G__87018","cljs.core.map","day8.re-frame-10x.tools.coll/sortable-uuid-map","G__87023","G__87026","day8.re-frame-10x.tools.coll/pred-map","G__87027","G__87029","cljs.core.keyword","cljs.core.into"],"sourcesContent":["(ns day8.re-frame-10x\n  (:require\n   [day8.re-frame-10x.inlined-deps.reagent.v1v2v0.reagent.core           :as r]\n   [day8.re-frame-10x.inlined-deps.re-frame.v1v3v0.re-frame.core         :as rf]\n   [day8.re-frame-10x.inlined-deps.re-frame.v1v3v0.re-frame.db           :as db]\n   [day8.re-frame-10x.inlined-deps.spade.git-sha-5197e54.container.dom   :as spade.dom]\n   [day8.re-frame-10x.inlined-deps.spade.git-sha-5197e54.react           :as spade.react]\n   [day8.reagent.impl.batching                                           :refer [patch-next-tick]]\n   [day8.reagent.impl.component                                          :refer [patch-wrap-funs patch-custom-wrapper]]\n   [day8.re-frame-10x.tools.coll                                         :refer [sortable-uuid-map pred-map]]\n   [day8.re-frame-10x.tools.datafy                                       :as tools.datafy]\n   [day8.re-frame-10x.tools.reader.edn                                   :as reader.edn]\n   [day8.re-frame-10x.tools.shadow-dom                                   :as tools.shadow-dom]\n   [day8.re-frame-10x.components.re-com                                  :as rc]\n   [day8.re-frame-10x.navigation.views                                   :as navigation.views]\n   [day8.re-frame-10x.panels.settings.subs                               :as settings.subs]\n   [day8.re-frame-10x.panels.settings.events                             :as settings.events])\n  (:require-macros [day8.re-frame-10x.components.re-com :refer [inline-resource]]))\n\n(goog-define debug? false)\n\n#_(defonce real-schedule reagent.impl.batching/schedule)\n#_(defonce do-after-render-trace-scheduled? (atom false))\n\n(defn resizer-style [draggable-area]\n  {:position \"absolute\" :z-index 2 :opacity 0\n   :left     (str (- (/ draggable-area 2)) \"px\") :width \"10px\" :height \"100%\" :top \"0px\" :cursor \"col-resize\"})\n\n(def ease-transition \"left 0.2s ease-out, top 0.2s ease-out, width 0.2s ease-out, height 0.2s ease-out\")\n\n(defn devtools-outer [opts]\n  ;; Add clear button\n  ;; Filter out different trace types\n  (let [handle-keys?         (rf/subscribe [::settings.subs/handle-keys?])\n        panel-width%         (rf/subscribe [::settings.subs/panel-width%])\n        showing?             (rf/subscribe [::settings.subs/show-panel?])\n        dragging?            (r/atom false)\n        window-width         (r/atom js/window.innerWidth)\n        panel-key            (rf/subscribe [::settings.subs/key-bindings :show-panel])\n        ready-to-bind-key    (rf/subscribe [::settings.subs/ready-to-bind-key])\n        handle-window-resize (do (rf/dispatch [::settings.events/window-width js/window.innerWidth]) ;; Set initial\n                                 (fn [_]\n                                   ;; N.B. I don't think this should be a perf bottleneck.\n                                   (let [window-width-val js/window.innerWidth]\n                                     (rf/dispatch [::settings.events/window-width window-width-val])\n                                     (reset! window-width window-width-val))))\n        handle-keys          (fn [e]\n                               (let [tag-name        (.-tagName (.-target e))\n                                     modifier?       (contains? #{\"Shift\" \"Alt\" \"Control\"} (.-key e))\n                                     entering-input? (contains? #{\"INPUT\" \"SELECT\" \"TEXTAREA\"} tag-name)]\n                                 (when-not entering-input?\n                                   (cond\n                                     (and @ready-to-bind-key (not modifier?))\n                                     (do (rf/dispatch [::settings.events/bind-key\n                                                       @ready-to-bind-key\n                                                       (tools.datafy/keyboard-event e)])\n                                         (rf/dispatch [::settings.events/ready-to-bind-key nil])\n                                         (.preventDefault e))\n                                     (and @handle-keys?\n                                          (= @panel-key (tools.datafy/keyboard-event e)))\n                                     (do (rf/dispatch [::settings.events/user-toggle-panel])\n                                         (.preventDefault e))))))\n        handle-mousemove     (fn [e]\n                               (when @dragging?\n                                 (let [x                (.-clientX e)\n                                       #_#_y                (.-clientY e)\n                                       new-window-width js/window.innerWidth]\n                                   (.preventDefault e)\n                                   (let [width% (/ (- new-window-width x) new-window-width)]\n                                     (when (<= width% 0.9)\n                                       (rf/dispatch [::settings.events/panel-width% width%])))\n                                   (reset! window-width new-window-width))))\n        handle-mouse-up      (fn [_] (reset! dragging? false))]\n    (r/create-class\n     {:component-did-mount    (fn []\n                                (js/window.addEventListener \"keydown\" handle-keys)\n                                (js/window.addEventListener \"mousemove\" handle-mousemove)\n                                (js/window.addEventListener \"mouseup\" handle-mouse-up)\n                                (js/window.addEventListener \"resize\" handle-window-resize))\n      :component-will-unmount (fn []\n                                (js/window.removeEventListener \"keydown\" handle-keys)\n                                (js/window.removeEventListener \"mousemove\" handle-mousemove)\n                                (js/window.removeEventListener \"mouseup\" handle-mouse-up)\n                                (js/window.removeEventListener \"resize\" handle-window-resize))\n      :display-name           \"devtools outer\"\n      :reagent-render         (fn []\n                                (let [draggable-area 10\n                                      left           (if @showing? (str (* 100 (- 1 @panel-width%)) \"%\")\n                                                         (str @window-width \"px\"))\n                                      transition     (if @dragging?\n                                                       \"\"\n                                                       ease-transition)]\n                                  [rc/box\n                                   :width  \"0px\"\n                                   :height \"0px\"\n                                   :style  {:position \"fixed\"\n                                            :top      \"0px\"\n                                            :left     \"0px\"\n                                            :z-index  99999999}\n                                   :child [rc/h-box\n                                           :width (str (* 100 @panel-width%) \"%\")\n                                           :height \"100%\"\n                                           :style {:position   \"fixed\"\n                                                   :z-index    1\n                                                   :box-shadow \"rgba(0, 0, 0, 0.3) 0px 0px 4px\"\n                                                   :background \"white\"\n                                                   :left       left\n                                                   :top        \"0px\"\n                                                   :transition transition}\n                                           :children [[:div.panel-resizer (when @showing? {:style         (resizer-style draggable-area)\n                                                                                           :on-mouse-down #(reset! dragging? true)})]\n                                                      [navigation.views/devtools-inner opts]]]]))})))\n\n(defn traced-sub [epoch-id reaction-id]\n  (get-in @db/app-db\n          [:epochs :matches-by-id epoch-id :sub-state :reaction-state reaction-id :value]))\n\n(defn traced-result [trace-id fragment-id]\n  ;; TODO: this is not terribly efficient, figure out how to get the index of the trace directly.\n  (let [trace (first (filter #(= trace-id (:id %)) (get-in @db/app-db [:traces :all])))]\n    (get-in trace [:tags :code fragment-id :result])))\n\n(defn ^:export factory-reset! []\n  (rf/dispatch [::settings.events/factory-reset]))\n\n(defn ^:export show-panel! [show-panel?]\n  (rf/dispatch [::settings.events/show-panel? show-panel?]))\n\n(defn ^:export handle-keys! [handle-keys?]\n  (rf/dispatch [::settings.events/handle-keys? handle-keys?]))\n\n(defn create-shadow-root []\n  (tools.shadow-dom/shadow-root js/document \"--re-frame-10x--\"))\n\n(defn create-style-container [shadow-root]\n  [spade.react/with-style-container\n   (spade.dom/create-container shadow-root)\n   [:<>\n    [:style (inline-resource \"day8/re_frame_10x/style.css\")]\n    [devtools-outer\n     {:panel-type :inline\n      :debug?     debug?}]]])\n\n(defn patch!\n  \"Sets up any initial state that needs to be there for tracing. Does not enable tracing.\"\n  []\n  (patch-custom-wrapper)\n  (patch-wrap-funs)\n  (patch-next-tick))\n\n(goog-define history-size 25)\n(goog-define ignored-events \"{}\")\n(goog-define hidden-namespaces \"[re-com.box re-com.input-text]\")\n(goog-define time-travel? true)\n(goog-define ignored-libs \"[:reagent :re-frame]\")\n(goog-define ns-aliases \"{long-namespace ln}\")\n(goog-define trace-when \":panel\")\n\n(def project-config\n  (let [read      reader.edn/read-string-maybe\n        keep-vals (remove (comp nil? second))\n        ignore    #(do {:event-id % :event-str (str %)})\n        view      #(do {:ns % :ns-str (str %)})\n        alias     (fn [[k v]] {:ns-full (str k) :ns-alias (str v)})]\n    (->> {:debug?                 debug?\n          :retained-epochs        history-size\n          :ignored-events         (some->> ignored-events read (map ignore) sortable-uuid-map)\n          :filtered-view-trace    (some->> hidden-namespaces read (map view) sortable-uuid-map)\n          :app-db-follows-events? time-travel?\n          :low-level-trace        (some-> ignored-libs read (pred-map #{:re-frame :reagent}))\n          :ns-aliases             (some->> ns-aliases read (map alias) sortable-uuid-map)\n          :trace-when             (some->> trace-when read keyword)}\n         (into {} keep-vals))))\n"],"x_google_ignoreList":[0]}