shadow$provide.module$node_modules$$supabase$storage_js$dist$main$lib$fetch = function(global, require, module, exports) {
  function _handleRequest(fetcher, method, url, options, parameters, body) {
    return __awaiter(this, void 0, void 0, function*() {
      return new Promise((resolve, reject) => {
        fetcher(url, _getRequestParams(method, options, parameters, body)).then(result => {
          if (!result.ok) {
            throw result;
          }
          return (null === options || void 0 === options ? 0 : options.noResolveJson) ? result : result.json();
        }).then(data => resolve(data)).catch(error => handleError(error, reject, options));
      });
    });
  }
  var __awaiter = this && this.__awaiter || function(thisArg, _arguments, P, generator) {
    function adopt(value) {
      return value instanceof P ? value : new P(function(resolve) {
        resolve(value);
      });
    }
    return new (P || (P = Promise))(function(resolve, reject) {
      function fulfilled(value) {
        try {
          step(generator.next(value));
        } catch (e) {
          reject(e);
        }
      }
      function rejected(value) {
        try {
          step(generator["throw"](value));
        } catch (e) {
          reject(e);
        }
      }
      function step(result) {
        result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
      }
      step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
  };
  Object.defineProperty(exports, "__esModule", {value:!0});
  exports.remove = exports.head = exports.put = exports.post = exports.get = void 0;
  const errors_1 = require("module$node_modules$$supabase$storage_js$dist$main$lib$errors"), helpers_1 = require("module$node_modules$$supabase$storage_js$dist$main$lib$helpers"), _getErrorMessage = err => err.msg || err.message || err.error_description || err.error || JSON.stringify(err), handleError = (error, reject, options) => __awaiter(void 0, void 0, void 0, function*() {
    const Res = yield (0,helpers_1.resolveResponse)();
    error instanceof Res && (null === options || void 0 === options || !options.noResolveJson) ? error.json().then(err => {
      reject(new errors_1.StorageApiError(_getErrorMessage(err), error.status || 500));
    }).catch(err => {
      reject(new errors_1.StorageUnknownError(_getErrorMessage(err), err));
    }) : reject(new errors_1.StorageUnknownError(_getErrorMessage(error), error));
  }), _getRequestParams = (method, options, parameters, body) => {
    const params = {method, headers:(null === options || void 0 === options ? void 0 : options.headers) || {}};
    if ("GET" === method) {
      return params;
    }
    params.headers = Object.assign({"Content-Type":"application/json"}, null === options || void 0 === options ? void 0 : options.headers);
    body && (params.body = JSON.stringify(body));
    return Object.assign(Object.assign({}, params), parameters);
  };
  exports.get = function(fetcher, url, options, parameters) {
    return __awaiter(this, void 0, void 0, function*() {
      return _handleRequest(fetcher, "GET", url, options, parameters);
    });
  };
  exports.post = function(fetcher, url, body, options, parameters) {
    return __awaiter(this, void 0, void 0, function*() {
      return _handleRequest(fetcher, "POST", url, options, parameters, body);
    });
  };
  exports.put = function(fetcher, url, body, options, parameters) {
    return __awaiter(this, void 0, void 0, function*() {
      return _handleRequest(fetcher, "PUT", url, options, parameters, body);
    });
  };
  exports.head = function(fetcher, url, options, parameters) {
    return __awaiter(this, void 0, void 0, function*() {
      return _handleRequest(fetcher, "HEAD", url, Object.assign(Object.assign({}, options), {noResolveJson:!0}), parameters);
    });
  };
  exports.remove = function(fetcher, url, body, options, parameters) {
    return __awaiter(this, void 0, void 0, function*() {
      return _handleRequest(fetcher, "DELETE", url, options, parameters, body);
    });
  };
};

//# sourceMappingURL=module$node_modules$$supabase$storage_js$dist$main$lib$fetch.js.map
