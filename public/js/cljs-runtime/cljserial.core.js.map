{"version":3,"sources":["cljserial/core.cljs"],"mappings":";AA2BA,AAACA;AACD,8BAAA,2CAAA,6DAAA,wDAAA,AAAA,wFAAA,wDAAA,AAAA,uEAAA,rZAACC;AAMD,GAAAC;AAAA,AAAA,AAAAC,qDAAA,iBAAA,qDAAA,AAAAC,mBAAA,2CAAA,wEAAA,uBAAA,oDAAA,YAAA;;AAAA;AACA,AAACC;AAKD,IAAAC,iBAAA,mFAAA;AAAA,AAAA,qIAAAA,gEAAAA,pMAACC,mEAAAA,mFAAAA;AAGD,wBAAA,mFAAA,mFAAA,IAAA,2CAAA,qDAAA,qGAAA,sDAAA,YAAA,4GAAA,mFAAA,MAAA,2CAAA,qDAAA,6FAAA,sDAAA,eAAA,wGAAA,mFAAA,WAAA,2CAAA,qDAAA,+FAAA,sDAAA,UAAA,oGAAA,mFAAA,QAAA,2CAAA,qDAAA,+EAAA,sDAAA,UAAA,qGAAA,mFAAA,WAAA,2CAAA,qDAAA,sFAAA,sDAAA,YAAA,9rEAAKC,8fAIMC,ucAKAC,qcAKAC,8aAKAC,2bAKAC;AAGX,+BAAA,/BAAMC;AAAN,AAIE,AAACC;;AAGD,AAACC;;AAGD,OAACC;;AAOH,sBAAA,tBAAeC;AAAf,AAEE,AAACJ;;AAaD,GAAAZ;AAAA,AAAA,AAAAC,qDAAA,iBAAA,qDAAA,AAAAC,mBAAA,2CAAA,yDAAA,aAAA,oDAAA,aAAA;;AAAA;;AAEA,2CAAA,2CAAA,8EAAA,kGAAA,sFAAA,gEAAA,rZAACe,uIAAwBX,qFAAkBY,6FAAiCC","names":["lambdaisland.glogi.console/install!","lambdaisland.glogi/set-levels","js/goog.debug.LOGGING_ENABLED","lambdaisland.glogi.log","cljs.core/identity","cljs.core/enable-console-print!","G__57580","cljserial.utils.dbfx/dispatch-sync","cljserial.core/routes","cljserial.pages.serial-terminal/layout","cljserial.pages.bt-terminal/layout","cljserial.pages.backend/layout","cljserial.pages.todo-mvc/layout","cljserial.pages.converter/layout","cljserial.core/init-services","cljserial.services.webserial/init","cljserial.services.bt/init","cljserial.services.mbt-cd/init","cljserial.core/init","cljserial.utils.router/render!","cljserial.i18n/supported-languages","cljserial.layout/app-layout"],"sourcesContent":["(ns cljserial.core\n  (:require\n   [lambdaisland.glogi :as log]\n   [lambdaisland.glogi.console :as glogi-console]\n   [cljserial.utils.dbfx :refer [dispatch-sync]]\n   [cljserial.model]\n   [cljserial.i18n :as i18n]\n   [cljserial.utils.router :as router]\n   ;; AWS integration bypassed for now\n   ;; [cljserial.utils.aws :as aws]\n   ;; Services ...\n   [cljserial.services.bt]\n   [cljserial.services.webserial]\n   [cljserial.services.mbt-cd]\n   ;; UI ...\n   [cljserial.layout :refer [app-layout]]\n   [cljserial.pages.serial-terminal :as serial-terminal]\n   [cljserial.pages.bt-terminal :as bt-terminal]\n   [cljserial.pages.todo-mvc :as todo]\n   [cljserial.pages.converter :as converter]\n   [cljserial.pages.backend :as backend]\n   ;; DEV tools\n   ;; ... TODO: Move to a new module in dev/ tree? or do configuration based init\n   [cljs-react-devtools.core]))\n\n;; -- Logging ----------------------------------------------------------\n;; See https://github.com/lambdaisland/glogi\n(glogi-console/install!)\n(log/set-levels\n {:glogi/root   :debug    ;; Set a root logger level, this will be inherited by all loggers\n  'cljserial.utils.hsm :debug   ;; Some namespaces you might want detailed logging\n  'my.app.other :error   ;; or for others you only want to see errors.\n  })\n\n(log/info :startup/logging \"Logging initialised!\")\n(enable-console-print!)   ;; so that println writes to `console.log`\n\n;; -- Initialise refx application database ------------------------------------\n;; The event handler for `:initialise-db` can be found in `model.cljs`\n;; Using the sync version of dispatch means that value is in place before we go onto the next step.\n(dispatch-sync [:initialise-db])\n\n;; -- Setup routes ------------------------------------\n(def routes\n  [[\"/\"\n    {:name ::serial-terminal\n     :title \"WebSerial\"\n     :view serial-terminal/layout}]\n\n   [\"/bt\"\n    {:name ::bt-terminal\n     :title \"WebBluetooth\"\n     :view bt-terminal/layout}]\n\n   [\"/backend\"\n    {:name ::backend-demo\n     :title \"Backend\"\n     :view backend/layout}]\n\n   [\"/todo\"\n    {:name ::todo\n     :title \"TodoMVC\"\n     :view todo/layout}]\n\n   [\"/convert\"\n    {:name ::convert\n     :title \"HTML->UIx\"\n     :view converter/layout}]])\n\n\n(defn init-services []\n\n  ;; The WebSerial service is implemented as a heirarchical state machine\n  ;; Can be used for a simple terminal, or as a basis for services using a command parser\n  (cljserial.services.webserial/init)\n\n  ;; WebBluetooth service (this does nothing yet)\n  (cljserial.services.bt/init)\n\n  ;; MBT CD service - implements command/response parsing on top of the webserial service\n  (cljserial.services.mbt-cd/init))\n\n;; -- Wrap UIx layout in AWS Amplify auth --------------\n;; (defn aws-auth-wrap [uix-layout]\n;;   (withAuthenticator (uix/as-react uix-layout)))\n\n;; -- Initialise UI ------------------------------------\n(defn ^:export init []\n\n  (init-services)\n\n  ;;Bypassed initialisation for https://github.com/roman01la/cljs-react-devtools\n  ;;Hotkey activation not working on initial attempt, and may conflict with re-frame-10x\n  ;; (log/info :uix-devtools \"Initialising\")\n  ;; (cljs-react-devtools.core/init!\n  ;;  {:root (js/document.getElementById \"root\")\n  ;;   :shortcut \"Control-Alt-r\"})\n\n;; AWS integration bypassed for now\n  ;; (aws/configure)\n  ;; (router/render! {:routes routes :languages i18n/supported-languages :layout (aws/with-authenticator app-layout)})\n\n  (log/info :router \"Rendering!\")\n\n  (router/render! {:routes routes :languages i18n/supported-languages :layout app-layout :with-auth true}))\n"]}