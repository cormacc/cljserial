shadow$provide.module$node_modules$$supabase$auth_js$dist$main$lib$errors = function(global, require, module, exports) {
  function isAuthError(error) {
    return "object" === typeof error && null !== error && "__isAuthError" in error;
  }
  Object.defineProperty(exports, "__esModule", {value:!0});
  exports.isAuthWeakPasswordError = exports.AuthWeakPasswordError = exports.isAuthRetryableFetchError = exports.AuthRetryableFetchError = exports.AuthPKCEGrantCodeExchangeError = exports.isAuthImplicitGrantRedirectError = exports.AuthImplicitGrantRedirectError = exports.AuthInvalidCredentialsError = exports.AuthInvalidTokenResponseError = exports.isAuthSessionMissingError = exports.AuthSessionMissingError = exports.CustomAuthError = exports.AuthUnknownError = exports.isAuthApiError = exports.AuthApiError = 
  exports.isAuthError = exports.AuthError = void 0;
  class AuthError extends Error {
    constructor(message, status, code) {
      super(message);
      this.__isAuthError = !0;
      this.name = "AuthError";
      this.status = status;
      this.code = code;
    }
  }
  exports.AuthError = AuthError;
  exports.isAuthError = isAuthError;
  class AuthApiError extends AuthError {
    constructor(message, status, code) {
      super(message, status, code);
      this.name = "AuthApiError";
      this.status = status;
      this.code = code;
    }
  }
  exports.AuthApiError = AuthApiError;
  exports.isAuthApiError = function(error) {
    return isAuthError(error) && "AuthApiError" === error.name;
  };
  class AuthUnknownError extends AuthError {
    constructor(message, originalError) {
      super(message);
      this.name = "AuthUnknownError";
      this.originalError = originalError;
    }
  }
  exports.AuthUnknownError = AuthUnknownError;
  class CustomAuthError extends AuthError {
    constructor(message, name, status, code) {
      super(message, status, code);
      this.name = name;
      this.status = status;
    }
  }
  exports.CustomAuthError = CustomAuthError;
  class AuthSessionMissingError extends CustomAuthError {
    constructor() {
      super("Auth session missing!", "AuthSessionMissingError", 400, void 0);
    }
  }
  exports.AuthSessionMissingError = AuthSessionMissingError;
  exports.isAuthSessionMissingError = function(error) {
    return isAuthError(error) && "AuthSessionMissingError" === error.name;
  };
  class AuthInvalidTokenResponseError extends CustomAuthError {
    constructor() {
      super("Auth session or user missing", "AuthInvalidTokenResponseError", 500, void 0);
    }
  }
  exports.AuthInvalidTokenResponseError = AuthInvalidTokenResponseError;
  class AuthInvalidCredentialsError extends CustomAuthError {
    constructor(message) {
      super(message, "AuthInvalidCredentialsError", 400, void 0);
    }
  }
  exports.AuthInvalidCredentialsError = AuthInvalidCredentialsError;
  class AuthImplicitGrantRedirectError extends CustomAuthError {
    constructor(message, details = null) {
      super(message, "AuthImplicitGrantRedirectError", 500, void 0);
      this.details = null;
      this.details = details;
    }
    toJSON() {
      return {name:this.name, message:this.message, status:this.status, details:this.details};
    }
  }
  exports.AuthImplicitGrantRedirectError = AuthImplicitGrantRedirectError;
  exports.isAuthImplicitGrantRedirectError = function(error) {
    return isAuthError(error) && "AuthImplicitGrantRedirectError" === error.name;
  };
  class AuthPKCEGrantCodeExchangeError extends CustomAuthError {
    constructor(message, details = null) {
      super(message, "AuthPKCEGrantCodeExchangeError", 500, void 0);
      this.details = null;
      this.details = details;
    }
    toJSON() {
      return {name:this.name, message:this.message, status:this.status, details:this.details};
    }
  }
  exports.AuthPKCEGrantCodeExchangeError = AuthPKCEGrantCodeExchangeError;
  class AuthRetryableFetchError extends CustomAuthError {
    constructor(message, status) {
      super(message, "AuthRetryableFetchError", status, void 0);
    }
  }
  exports.AuthRetryableFetchError = AuthRetryableFetchError;
  exports.isAuthRetryableFetchError = function(error) {
    return isAuthError(error) && "AuthRetryableFetchError" === error.name;
  };
  class AuthWeakPasswordError extends CustomAuthError {
    constructor(message, status, reasons) {
      super(message, "AuthWeakPasswordError", status, "weak_password");
      this.reasons = reasons;
    }
  }
  exports.AuthWeakPasswordError = AuthWeakPasswordError;
  exports.isAuthWeakPasswordError = function(error) {
    return isAuthError(error) && "AuthWeakPasswordError" === error.name;
  };
};

//# sourceMappingURL=module$node_modules$$supabase$auth_js$dist$main$lib$errors.js.map
