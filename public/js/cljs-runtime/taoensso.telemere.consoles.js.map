{"version":3,"sources":["taoensso/telemere/consoles.cljc"],"mappings":"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","names":["var_args","G__62732","taoensso.telemere.consoles/handler:console","js/Error","p__62733","map__62735","cljs.core/--destructure-map","cljs.core.get","taoensso.telemere.consoles.handler_COLON_console","output-fn","taoensso.telemere.utils.format_signal_fn","js/console","js-console-logger","taoensso.telemere.utils/js-console-logger","signal","temp__5823__auto__","output","logger","G__62752","taoensso.telemere.consoles/logger-fn","x1","x2","x3","more","cljs.core.apply","G__62774","taoensso.telemere.consoles/handler:console-raw","p__62776","map__62777","taoensso.telemere.consoles.handler_COLON_console_raw","preamble-fn","format-nsecs-fn","opts","taoensso.telemere.utils.signal_preamble_fn","taoensso.telemere.utils.format_nsecs_fn","js/console.group","content-fn","taoensso.telemere.utils.signal_content_fn","map__62779","level","error","cljs.core/identity","stack","and__5000__auto__","taoensso.encore/ex-root"],"sourcesContent":["(ns ^:no-doc taoensso.telemere.consoles\n  \"Private ns, implementation detail.\n  Core console handlers, aliased in main Telemere ns.\"\n  (:require\n   [taoensso.encore         :as enc :refer [have have?]]\n   [taoensso.telemere.utils :as utils]))\n\n(comment\n  (require  '[taoensso.telemere :as tel])\n  (remove-ns (symbol (str *ns*)))\n  (:api (enc/interns-overview)))\n\n#?(:clj\n   (defn ^:public handler:console\n     \"Experimental, subject to change.\n\n     Returns a signal handler that:\n       - Takes a Telemere signal (map).\n       - Writes the signal as a string to specified stream.\n\n     A general-purpose `println`-style handler that's well suited for outputting\n     signals as human or machine-readable (edn, JSON) strings.\n\n     Options:\n       `:output-fn` - (fn [signal]) => string, see `format-signal-fn` or `pr-signal-fn`\n       `:stream`    - `java.io.writer`\n         Defaults to `*err*` if `utils/error-signal?` is true, and `*out*` otherwise.\"\n\n     ([] (handler:console nil))\n     ([{:keys [stream output-fn ]\n        :or\n        {stream    :auto\n         output-fn (utils/format-signal-fn)}}]\n\n      (let [error-signal? utils/error-signal?]\n\n        (fn a-handler:console\n          ([      ]) ; Stop => noop\n          ([signal]\n           (let [^java.io.Writer stream\n                 (case stream\n                   (:out :*out*) *out*\n                   (:err :*err*) *err*\n                   :auto  (if (error-signal? signal) *err* *out*)\n                   stream)]\n\n             (when-let [output (output-fn signal)]\n               (.write stream (str output))\n               (.flush stream))))))))\n\n   :cljs\n   (defn ^:public handler:console\n     \"Experimental, subject to change.\n\n     If `js/console` exists, returns a signal handler that:\n       - Takes a Telemere signal (map).\n       - Writes the signal as a string to JavaScript console.\n\n     A general-purpose `println`-style handler that's well suited for outputting\n     signals as human or machine-readable (edn, JSON) strings.\n\n     Options:\n       `:output-fn` - (fn [signal]) => string, see `format-signal-fn` or `pr-signal-fn`\"\n\n     ([] (handler:console nil))\n     ([{:keys [output-fn]\n        :or   {output-fn (utils/format-signal-fn)}}]\n\n      (when (exists? js/console)\n        (let [js-console-logger utils/js-console-logger]\n\n          (fn a-handler:console\n            ([      ]) ; Stop => noop\n            ([signal]\n             (when-let [output (output-fn signal)]\n               (let [logger (js-console-logger (get signal :level))]\n                 (.call logger logger (str output)))))))))))\n\n#?(:cljs\n   (defn- logger-fn [logger]\n     ;; (fn [& xs] (.apply logger logger (into-array xs)))\n     (fn\n       ([x1             ] (.call logger logger x1))\n       ([x1 x2          ] (.call logger logger x1 x2))\n       ([x1 x2 x3       ] (.call logger logger x1 x2 x3))\n       ([x1 x2 x3 & more] (apply        logger x1 x2 x3 more)))))\n\n#?(:cljs\n   (defn ^:public handler:console-raw\n     \"Experimental, subject to change.\n\n     If `js/console` exists, returns a signal handler that:\n       - Takes a Telemere signal (map).\n       - Writes the raw signal to JavaScript console.\n\n     Intended for use with browser formatting tools like `binaryage/devtools`,\n     Ref. <https://github.com/binaryage/cljs-devtools>.\n\n     Options:\n       `:preamble-fn`     - (fn [signal])   => string, see [1].\n       `:format-nsecs-fn` - (fn [nanosecs]) => string.\n\n     [1] `taoensso.telemere.utils/signal-preamble-fn`, etc.\"\n\n     ([] (handler:console-raw nil))\n     ([{:keys [preamble-fn format-nsecs-fn] :as opts\n        :or\n        {preamble-fn     (utils/signal-preamble-fn)\n         format-nsecs-fn (utils/format-nsecs-fn)}}]\n\n      (when (and (exists? js/console) (exists? js/console.group))\n        (let [js-console-logger utils/js-console-logger\n              content-fn ; (fn [signal append-fn val-fn])\n              (utils/signal-content-fn\n                {:format-nsecs-fn format-nsecs-fn\n                 :format-error-fn nil\n                 :raw-error?      true})]\n\n          (fn a-handler:console-raw\n            ([      ]) ; Stop => noop\n            ([signal]\n             (let [{:keys [level error]} signal\n                   logger (js-console-logger level)]\n\n               ;; Unfortunately groups have no level\n               (.group js/console (preamble-fn signal))\n               (content-fn signal (logger-fn logger) identity)\n\n               (when-let [stack (and error (.-stack (enc/ex-root error)))]\n                 (.call logger logger stack))\n\n               (.groupEnd js/console)))))))))\n"],"x_google_ignoreList":[0]}