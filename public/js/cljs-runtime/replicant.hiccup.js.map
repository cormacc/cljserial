{"version":3,"sources":["replicant/hiccup.cljc"],"mappings":";AAEA;;;iCAAA,jCAAMA,0EAEHC;AAFH,AAGE,4CAAA,nCAAK,AAACC,wBAAQD,aACT,GAAK,AAACE,2BAAWF,aACjB,kCAAAG,jCAAU,AAACC,gBAAMJ;;AAExB,AAAA;;;;;;;;;;;gCAAA,wCAAAK,xEAAMM;AAAN,AAAA,IAAAL,qBAAA;AAAA,AAAA,IAAAC,0BAAA,AAAA;AAAA,AAAA,IAAAC,wBAAA;;AAAA,AAAA,GAAA,CAAAA,wBAAAD;AAAA,AAAA,AAAAD,wBAAA,CAAA,UAAAE;;AAAA,eAAA,CAAAA,wBAAA;;;;AAAA;;;;AAAA,IAAAC,uBAAA,EAAA,CAAA,MAAA,AAAAH,4BAAA,AAAA,KAAAI,qBAAA,AAAAJ,yBAAA,KAAA,IAAA,OAAA;AAAA,AAAA,OAAAK,mEAAA,CAAA,UAAA,MAAAF;;;AAAA,AAAA,CAAA,qEAAA,rEAAME,gFAUHK,OAASC;AAVZ,AAWE,GAAI,AAACC,qBAAK,AAACC,iBAAOH;AAChB,6EAAA,tEAACI,8CAAMC,iBAAOL,WAASC;;AACvB,oDAAA,7CAACK,gIAAM,AAAClB,gBAAMY,QAAQ,oEAAA,pEAACI,8CAAM,AAAChB,gBAAMa,yCAAS,AAACM,eAAKN,eAAQ,AAACM,eAAKP;;;;AAbrE,CAAA,wDAAA,xDAAML;;AAAN;AAAA,CAAA,kDAAA,WAAAC,7DAAMD;AAAN,AAAA,IAAAE,WAAA,AAAAT,gBAAAQ;IAAAA,eAAA,AAAAE,eAAAF;AAAA,AAAA,IAAAG,qBAAA;AAAA,AAAA,OAAAA,wDAAAF,SAAAD;;;AAAA,AAeA;;;;;;;;;;;;4BAAA,5BAAMY,gEAWHR,OAAOS,KAAKC;AAXf,AAYE,OAACC,mEAAaX,yDAAOY,gBAAMH,KAAKC","names":["replicant.hiccup/hiccup?","sexp","cljs.core/vector?","cljs.core/map-entry?","cljs.core/Keyword","cljs.core/first","var_args","args__5732__auto__","len__5726__auto__","i__5727__auto__","argseq__5733__auto__","cljs.core/IndexedSeq","replicant.hiccup/update-attrs","seq61376","G__61378","cljs.core/next","self__5711__auto__","hiccup","args","cljs.core/map?","cljs.core/second","cljs.core.apply","cljs.core/update","cljs.core.into","cljs.core/rest","replicant.hiccup/set-attr","attr","v","replicant.hiccup.update_attrs","cljs.core/assoc"],"sourcesContent":["(ns replicant.hiccup)\n\n(defn hiccup?\n  \"Returns `true` if `sexp` is a vector with a keyword in the first position.\"\n  [sexp]\n  (and (vector? sexp)\n       (not (map-entry? sexp))\n       (keyword? (first sexp))))\n\n(defn update-attrs\n  \"Ensure that `hiccup` has an attribute map, and call `update` on it with `args`.\n\n  ```clj\n  (update-attrs [:h1 \\\"Hello\\\"] assoc :title \\\"Hi\\\")\n  ;;=> [:h1 {:title \\\"Hi\\\"} \\\"Hello\\\"]\n\n  (update-attrs [:h1 {:title \\\"Hello\\\"} \\\"Hello\\\"] dissoc :title)\n  ;;=> [:h1 {} \\\"Hello\\\"]\n  ```\"\n  [hiccup & args]\n  (if (map? (second hiccup))\n    (apply update hiccup 1 args)\n    (into [(first hiccup) (apply (first args) {} (rest args))] (rest hiccup))))\n\n(defn set-attr\n  \"Set attribute `attr` on the `hiccup` node to `v`. Updates the attribute map\n  if it exists, otherwise inserts one.\n\n  ```clj\n  (set-attr [:h1 \\\"Hello\\\"] :title \\\"Hi\\\")\n  ;;=> [:h1 {:title \\\"Hi\\\"} \\\"Hello\\\"]\n\n  (set-attr [:h1 {:title \\\"Hello\\\"} \\\"Hello\\\"] :title \\\"Hi\\\")\n  ;;=> [:h1 {:title \\\"Hi\\\"} \\\"Hello\\\"]\n  ```\"\n  [hiccup attr v]\n  (update-attrs hiccup assoc attr v))\n"],"x_google_ignoreList":[0]}