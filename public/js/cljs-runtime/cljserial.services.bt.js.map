{"version":3,"sources":["cljserial/services/bt.cljs"],"mappings":"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","names":["cljserial.services.bt/device-request-callback","options","_e","p1__56518#","cljserial.utils.webbluetooth.await_device","G__56521","cljserial.utils.dbfx/dispatch","G__56522","cljserial.services.bt/device-connect-callback","device","p1__56526#","cljserial.utils.webbluetooth.await_device_gatt_connect","G__56533","G__56534","cljserial.services.bt/gatt-get-service-callback","gatt","p1__56538#","cljserial.utils.webbluetooth.await_gatt_get_service","G__56545","G__56546","cljserial.services.bt/service-get-tx-char-callback","service","p1__56547#","cljserial.utils.webbluetooth.await_service_get_tx_characteristic","G__56548","G__56549","cljserial.services.bt/service-get-rx-char-callback","p1__56552#","cljserial.utils.webbluetooth.await_service_get_rx_characteristic","G__56557","G__56558","cljserial.services.bt/serial-event-interceptors","G__56559","cljserial.utils.dbfx/path","cljserial.utils.dbfx/inject-cofx","p__56560","map__56561","cljs.core/--destructure-map","cljs.core.get","cljserial.services.bt/append-event","events","timestamp","event-type","bytes","cljs.core.assoc","G__56564","G__56565","G__56566","cljserial.utils.dbfx/reg-event-fx","p__56568","p__56569","map__56572","vec__56573","cljs.core.nth","db","_","G__56583","G__56584","G__56585","p__56587","p__56588","map__56589","vec__56590","_event_id","js/goog.debug.LOGGING_ENABLED","lambdaisland.glogi.log","cljs.core/identity","prev-event","cljs.core/last","cljs.core/vals","ongoing","cljs.core._EQ_","ts","data","G__56598","G__56599","cljserial.utils.dbfx/reg-sub","G__56601","G__56602","G__56603","G__56604","bt-serial-state","cljserial.services.bt/extract-rx-payload","response","cljs.core/first","cljserial.services.bt/default-context","cljserial.utils.webbluetooth/DEFAULT_OPTIONS","cljserial.services.bt/controller","G__56621","statecharts.core/machine","ctx","e","G__56624","cljserial.utils.webbluetooth/is-supported?","rx-char","decoder","js/TextDecoder","G__56626","text","tx-char","encoder","js/TextEncoder","cljserial.utils.webbluetooth/service-write-value-without-response","cljserial.utils.webbluetooth.forget_device","G__56635","G__56641","statecharts.core/assign","G__56642","event","G__56644","G__56645","G__56646","G__56647","G__56648","G__56649","cljserial.services.bt/init","cljserial.utils.hsm/register"],"sourcesContent":["(ns cljserial.services.bt\n  (:require\n   [lambdaisland.glogi :as log]\n   [statecharts.core :as hsm]\n   [cljserial.utils.dbfx :as dbfx :refer [reg-event-fx inject-cofx reg-sub]]\n   [cljserial.utils.hsm :as hsm-dbfx]\n   [cljserial.utils.webbluetooth :as weble]))\n\n(defn device-request-callback [options _e]\n  (weble/await-device\n   :filter-options options\n   :on-success #(dbfx/dispatch [:bt-has-device %1])\n   :on-failure #(dbfx/dispatch [:bt-no-device])))\n\n(defn device-connect-callback [device]\n  (weble/await-device-gatt-connect\n   :device device\n   :on-success #(dbfx/dispatch [:bt-has-gatt %1])\n   :on-failure #(dbfx/dispatch [:bt-no-gatt])))\n\n(defn gatt-get-service-callback [gatt]\n  (weble/await-gatt-get-service\n   :gatt gatt\n   :on-success #(dbfx/dispatch [:bt-has-service %1])\n   :on-failure #(dbfx/dispatch [:bt-no-service])))\n\n(defn service-get-tx-char-callback [service]\n  (weble/await-service-get-tx-characteristic\n   :service service\n   :on-success #(dbfx/dispatch [:bt-has-tx-char %1])\n   :on-failure #(dbfx/dispatch [:bt-no-tx-char])))\n\n(defn service-get-rx-char-callback [service]\n  (weble/await-service-get-rx-characteristic\n   :service service\n   :on-success #(dbfx/dispatch [:bt-has-rx-char %1])\n   :on-failure #(dbfx/dispatch [:bt-no-rx-char])))\n\n;; == Schema =====================================================================\n;; -- see cljserial.utils.term\n\n;; ============================================================================\n;; re-fx events and subscriptions\n\n;; TODO: Inject the db path during initialisation instead maybe?\n\n;; Define a standard set of interceptors for all serial port events\n(def serial-event-interceptors\n  ;; \"path\" interceptor: Update specified subsection of db rather than entire db\n  [(dbfx/path [:bt-serial-term :events])\n   ;; Provide event timestamp as coeffect so our event handlers can be pure functions\n   (inject-cofx :timestamp)])\n\n(defn append-event [events {:keys [timestamp event-type bytes]}]\n  (assoc events timestamp {:timestamp timestamp\n                           :event-type event-type\n                           :event-data {:byte-encoding :text\n                                        :bytes bytes}}))\n\n;; Clients transmit a :serial-tx event containg commands/data to be transmitted\n;; This logs it to the app database, then generates an internal :webbluetooth-tx event\n;; that triggers the statemachine to transmit data via the port\n;;\n;; N.B. this may need adaptation to allow for coexistence with a webserial\n;; connection.... TBD\n(reg-event-fx\n :bt-serial-tx\n serial-event-interceptors\n (fn [{:keys [db timestamp]} [_ bytes]]\n   ;;DB effect: Append entry to the serial event database\n   {:db (append-event db {:timestamp timestamp\n                          :event-type :tx\n                          :bytes bytes})\n    ;;Coeffect - pass the request on to the statemachine to transmit\n    :fx [[:dispatch [:bt-tx bytes]]]}))\n\n(reg-event-fx\n :bt-serial-rx\n serial-event-interceptors\n (fn [{:keys [db timestamp]} [_event_id bytes]]\n   ;;Append to an ongoing rx event...\n   ;;As long data streams can be read over multiple rx events, if the previous recorded\n   ;;comms event is rx, we assume this is an ongoing event and consolidate.\n   ;;\n   ;;N.B. This does NOT do any command terminator parsing -- that's a higher level concern\n   ;;     to be dealt with by any subscribers to :weble-rx\n   (log/info :weble/serial-rx bytes)\n   (let [prev-event (last (vals db))\n         ongoing (and (some? prev-event) (= (:event-type prev-event prev-event) :rx))\n         ts (if ongoing (:timestamp prev-event) timestamp)\n         data (if ongoing (str (:bytes (:event-data prev-event)) bytes) bytes)]\n     ;;DB effect: Append entry to the serial event database\n     {:db (append-event db {:timestamp ts\n                            :event-type :rx\n                            :bytes data})\n      ;;Coeffect: Notify any downstream listeners (e.g. CD handlers) that new rx data has been added to the DB\n      :fx [[:dispatch [:weble-rx nil]]]})))\n\n(reg-sub\n :bt-serial-data\n (fn [db _]\n   (:bt-serial-term db))) ;;\n\n(reg-sub\n :bt-serial-events\n :<- [:bt-serial-data]\n (fn [bt-serial-state _]\n   (:events bt-serial-state))) ;;\n\n;; JS: event.target.value\n;; (defn- extract-rx-payload\n;;   [response]\n;;   (.-value (.-target ^js (first (:data response)))))\n\n;; (defn- extract-rx-payload\n;;   [response]\n;;   (.. (first (:data response)) -target -value))\n\n;; (defn- extract-rx-payload\n;;   [response]\n;;   (.. (-> response :data first) -target -value))\n\n(defn- extract-rx-payload\n  [response]\n  (-> response\n      :data\n      first\n      .-target\n      .-value))\n\n\n;; ============================================================================\n;; Controller - a statemachine\n;; See https://lucywang000.github.io/clj-statecharts/\n\n;;Initial context...\n;; TODO Write a Schema?\n;; ... also consider including event store in context here rather than separately in the refx db\n\n(def default-context {:device nil\n                      :gatt nil\n                      :service nil\n                      :tx-char nil\n                      :rx-char nil\n                      :options weble/DEFAULT_OPTIONS\n                      :line-terminator \"\\r\"})\n\n(def controller\n  (hsm/machine\n   {:id :bt-serial\n    :initial :check\n    :context default-context\n    :states\n    {:check {:entry (fn [ctx e]\n                      (log/debug :state/entry (str \"Check web bluetooth\" ctx e))\n                      (dbfx/dispatch [(if (weble/is-supported?)\n                                        :bt-disconnected\n                                        :bt-unsupported)]))\n             :on {:bt-disconnected [:> :supported :disconnected]\n                  :bt-unsupported :unsupported}}\n     :supported {:initial :disconnected\n                 :on {:bt-disconnected [:> :supported :disconnected]\n                      :bt-disconnect [:> :supported :disconnecting]}\n                 :states\n                 {:connected {:entry (fn [ctx e]\n                                       (let [rx-char (:rx-char ctx)]\n                                         (log/info :bt-rx \"Start Notifications\")\n                                         (.startNotifications ^js rx-char)))\n                              :on {:bt-rx {:actions (fn [ctx e]\n                                                      (log/info :bt-rx (str ctx e))\n                                                      (let [bytes (extract-rx-payload e)\n                                                            decoder (js/TextDecoder. \"utf-8\")]\n                                                        (log/info :bt-rx bytes)\n                                                        (dbfx/dispatch [:bt-serial-rx (.decode ^js decoder bytes)])))}\n                                   :bt-tx {:actions (fn [ctx e]\n                                                      (let [text (first (:data e)) tx-char (:tx-char ctx)\n                                                            encoder (js/TextEncoder. \"utf-8\")]\n                                                        (log/info :bt-tx text)\n                                                        (weble/service-write-value-without-response tx-char (.encode ^js encoder text))))}}}\n                  :disconnecting {:entry (fn [ctx e]\n                                           (let [device (:device ctx)]\n                                             (log/info :device/forget \"Disconnecting device\")\n                                             (weble/forget-device {:device device\n                                                                   :on-success #(dbfx/dispatch [:bt-disconnected])\n                                                                   :on-failure #(log/error :device/forget (str \"Failed to forget \" device))})))}\n                  :disconnected {:initial :device-pending\n                                 :entry (hsm/assign\n                                         (fn [ctx e]\n                                           (log/info :state/entry \"Resetting device assignment\")\n                                               ;;(dbfx/dispatch [:bt-disconnect])\n                                           (assoc ctx\n                                                  :device nil\n                                                  :gatt nil\n                                                  :service nil\n                                                  :tx-char nil\n                                                  :rx-char nil)))\n                                 :on {:bt-connected [:> :supported :connected]}\n                                 :states\n                                 {:device-pending {:entry (fn [ctx e]\n                                                            (log/debug :state/entry (str \"DEVICE PENDING\" ctx e)))\n                                                   :on {:bt-has-device\n                                                        {:actions (hsm/assign (fn [ctx e]\n                                                                                (let [device (first (:data e))]\n                                                                                  (.addEventListener\n                                                                                   ^js device \"gattserverdisconnected\" (fn [event]\n                                                                                                                         (log/debug :bt-disconnected (str event))\n                                                                                                                         (dbfx/dispatch [:bt-disconnected device])))\n                                                                                  (assoc ctx :device device))))\n                                                         :target :bluetooth-connecting}\n                                                        :bt-no-device [:> :supported :disconnected]}}\n                                  :bluetooth-connecting {:entry (fn [ctx e]\n                                                                  (log/debug :state/entry (str \"CONNECTING\" ctx e))\n                                                                  (device-connect-callback (:device ctx)))\n                                                         :on {:bt-has-gatt\n                                                              {:actions (hsm/assign (fn [ctx e]\n                                                                                      (let [gatt (first (:data e))]\n                                                                                        (assoc ctx :gatt gatt))))\n                                                               :target :bluetooth-getting-service}\n                                                              :bt-no-gatt [:> :supported :disconnecting]}}\n                                  :bluetooth-getting-service {:entry (fn [ctx e]\n                                                                       (log/debug :state/entry (str \"GETTING SERVICE\" ctx e))\n                                                                       (gatt-get-service-callback (:gatt ctx)))\n                                                              :on {:bt-has-service\n                                                                   {:actions (hsm/assign (fn [ctx e]\n                                                                                           (let [service (first (:data e))]\n                                                                                             (assoc ctx :service service))))\n                                                                    :target :bluetooth-getting-tx-char}\n                                                                   :bt-no-service [:> :supported :disconnecting]}}\n                                  :bluetooth-getting-tx-char {:entry (fn [ctx e]\n                                                                       (log/debug :state/entry (str \"GETTING TX CHARACTERISTIC\" ctx e))\n                                                                       (service-get-tx-char-callback (:service ctx)))\n                                                              :on {:bt-has-tx-char\n                                                                   {:actions (hsm/assign\n                                                                              (fn [ctx e]\n                                                                                (let [tx-char (first (:data e))]\n                                                                                  (assoc ctx :tx-char tx-char))))\n                                                                    :target :bluetooth-getting-rx-char}\n                                                                   :bt-no-tx-char [:> :supported :disconnecting]}}\n                                  :bluetooth-getting-rx-char {:entry (fn [ctx e]\n                                                                       (log/debug :state/entry (str \"GETTING RX CHARACTERISTIC\" ctx e))\n                                                                       (service-get-rx-char-callback (:service ctx)))\n                                                              :on {:bt-has-rx-char\n                                                                   {:actions (hsm/assign\n                                                                              (fn [ctx e]\n                                                                                (let [rx-char (first (:data e))]\n                                                                                  (log/debug :bt-has-rx-char (str \"add event listener\"))\n                                                                                  (.addEventListener\n                                                                                   ^js rx-char \"characteristicvaluechanged\" (fn [event]\n                                                                                                                              (log/debug :rx-event (str event))\n                                                                                                                              (dbfx/dispatch [:bt-rx event])))\n                                                                                  (assoc ctx :rx-char rx-char))))\n                                                                    :target [:> :supported :connected]}\n                                                                   :bt-no-rx-char [:> :supported :disconnecting]}}}}}}\n     :unsupported {}}}))\n\n(defn init []\n  (hsm-dbfx/register controller))\n"]}