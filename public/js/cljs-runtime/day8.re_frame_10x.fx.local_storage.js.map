{"version":3,"sources":["day8/re_frame_10x/fx/local_storage.cljs"],"mappings":"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","names":["day8.re-frame-10x.fx.local-storage/storage-mechanism","e63255","js/localStorage","js/goog.storage.mechanism.HTML5LocalStorage","js/Error","_","day8.re_frame_10x.fx.local_storage.goog$module$goog$testing$storage$FakeMechanism","day8.re-frame-10x.fx.local-storage/storage","js/goog.storage.Storage","day8.re-frame-10x.fx.local-storage/safe-prefix","day8.re-frame-10x.fx.local-storage/safe-key","key","day8.re-frame-10x.fx.local-storage/load","value","cljs.reader.read_string","day8.re-frame-10x.fx.local-storage/all-keys","e63264","js/Object.keys","day8.re-frame-10x.fx.local-storage/delete-all-keys!","seq__63265","cljs.core/seq","chunk__63266","count__63267","i__63268","temp__5823__auto__","cljs.core/chunked-seq?","c__5525__auto__","cljs.core/chunk-first","cljs.core/chunk-rest","cljs.core/count","cljs.core/first","cljs.core/next","k","clojure.string/starts-with?","var_args","G__63274","day8.re-frame-10x.fx.local-storage/save","args-arr__5751__auto__","len__5726__auto__","i__5727__auto__","argseq__5752__auto__","cljs.core/IndexedSeq","seq63272","G__63273","self__5711__auto__","day8.re-frame-10x.inlined-deps.re-frame.v1v3v0.re-frame.core/after","db","day8.re-frame-10x.tools.datafy/pr-str-safe","ks","cljs.core/run!","v","cljs.core/vector?","cljs.core.get_in","cljs.core.get","day8.re-frame-10x.inlined-deps.re-frame.v1v3v0.re-frame.core/reg-cofx","p__63275","map__63276","cljs.core/--destructure-map","coeffects","storage-key","fallback","cljs.core.keyword","G__63277","cljs.core.assoc","cljs.core/assoc-in"],"sourcesContent":["(ns day8.re-frame-10x.fx.local-storage\n  (:require\n   [goog.storage.Storage]\n   [goog.storage.mechanism.HTML5LocalStorage]\n   [goog.testing.storage.FakeMechanism]\n   [cljs.reader                                                  :as reader]\n   [clojure.string                                               :as string]\n   [day8.re-frame-10x.tools.datafy                               :as tools.datafy]\n   [day8.re-frame-10x.inlined-deps.re-frame.v1v3v0.re-frame.core :as rf]))\n\n(def storage-mechanism\n  \"LocalStorage is not available in sandboxed iframes, so check\n  window.localStorage and use the fake storage mechanism if it's not available.\n  re-frame-10x settings will not persist, but it will work.\"\n  (try\n    (when js/localStorage\n      (goog.storage.mechanism.HTML5LocalStorage.))\n    (catch js/Error _\n      (goog.testing.storage.FakeMechanism.))))\n\n(def storage (goog.storage.Storage. storage-mechanism))\n\n(def safe-prefix \"day8.re-frame-10x.\")\n\n(defn- safe-key\n  \"Adds a unique prefix to local storage keys to ensure they don't collide with the host application\"\n  [key]\n  (str safe-prefix key))\n\n(defn load\n  \"Loads a re-frame-10x value from local storage.\"\n  [key]\n  (let [value (.get storage (safe-key key))]\n    (when-not (undefined? value)\n      (reader/read-string value))))\n\n(defn- all-keys []\n  (try\n    (js/Object.keys js/localStorage)\n    (catch js/Error _\n      [])))\n\n(defn delete-all-keys!\n  \"Deletes all re-frame-10x config keys\"\n  []\n  (doseq [k (all-keys)]\n    (when (string/starts-with? k safe-prefix)\n      (.remove storage k))))\n\n(defn save\n  ([key]\n   (rf/after\n    (fn [db]\n      (.set storage (safe-key key) (tools.datafy/pr-str-safe db)))))\n  ([key & ks]\n   (rf/after\n    (fn [db]\n      (run!\n       (fn [k]\n         (let [v (if (vector? k) (get-in db k) (get db k))]\n           (.set storage (safe-key key) (tools.datafy/pr-str-safe v))))\n       ks)))))\n\n(rf/reg-cofx\n ::load\n (fn [coeffects {storage-key :key fallback :or}]\n   (let [k (keyword storage-key)\n         v (load storage-key)]\n     (cond-> coeffects\n       (some? fallback) (-> (assoc k fallback)\n                            (assoc-in [::fallback k] fallback))\n       (some? v) (-> (assoc k v)\n                     (assoc-in [::stored k] v))))))\n"],"x_google_ignoreList":[0]}