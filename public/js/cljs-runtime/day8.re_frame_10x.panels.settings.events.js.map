{"version":3,"sources":["day8/re_frame_10x/panels/settings/events.cljs"],"mappings":"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","names":["day8.re_frame_10x.inlined_deps.re_frame.v1v3v0.re_frame.core.reg_event_db","day8.re_frame_10x.inlined_deps.re_frame.v1v3v0.re_frame.core.path","day8.re-frame-10x.inlined-deps.re-frame.v1v3v0.re-frame.core/trim-v","day8.re_frame_10x.fx.local_storage.save","p__66135","vec__66136","cljs.core.nth","_","width%","x__5087__auto__","y__5088__auto__","p__66140","vec__66144","width","p__66151","vec__66152","selected-tab","showing?","cljs.core/not","p__66156","vec__66157","show-panel?","db","day8.re-frame-10x.fx.local-storage/delete-all-keys!","js/location.reload","p__66165","vec__66166","ambiance","p__66169","vec__66170","syntax-color-scheme","p__66178","vec__66179","num-str","num","js/parseInt","js/isNaN","cljs.core/pos-int?","day8.re-frame-10x.panels.settings.events/ignored-event-interceptors","ignored-events","id","cljs.core/random-uuid","cljs.core.assoc","js/Date.now","p__66182","vec__66183","cljs.core.dissoc","p__66186","vec__66187","event-str","event","day8.re-frame-10x.tools.reader.edn/read-string-maybe","cljs.core/assoc-in","cljs.core.update_in","old-event","p__66191","vec__66193","day8.re-frame-10x.panels.settings.events/filtered-view-trace-interceptors","filtered-view-trace","p__66196","vec__66197","p__66200","vec__66201","ns-str","p__66204","vec__66205","day8.re-frame-10x.panels.settings.events/low-level-trace-interceptors","p__66208","vec__66209","low-level","p__66212","vec__66213","trace-type","capture?","p__66216","vec__66218","debug?","p__66221","vec__66222","follows-events?","p__66225","vec__66226","external-window-dimensions","day8.re-frame-10x.inlined-deps.re-frame.v1v3v0.re-frame.core/unwrap","p__66230","map__66231","cljs.core/--destructure-map","cljs.core.get","height","p__66232","map__66233","left","top","day8.re_frame_10x.inlined_deps.re_frame.v1v3v0.re_frame.core.reg_event_fx","p__66234","map__66235","settings","now-showing?","external-panel?","trace-when","using-trace?","or__5002__auto__","cljs.core._EQ_","cljs.core.merge","p__66236","vec__66237","show-event-history?","p__66240","vec__66241","open-new-inspectors?","p__66244","vec__66245","handle-keys?","p__66249","vec__66250","key-intent","p__66253","vec__66254","key-bindings","p__66257","vec__66258","value","p__66261","vec__66262","seq__66263","cljs.core/seq","first__66264","cljs.core/first","cljs.core/next","vec__66265","log-outputs","enabled?","cljs.core/vector?","cljs.core/set","G__66270","G__66271","fexpr__66269","cljs.core/conj","cljs.core/disj","cljs.core.sort","cljs.core/vec","p__66272","vec__66273","pretty?","day8.re-frame-10x.panels.settings.events/ns-aliases-interceptors","p__66285","vec__66286","b","p__66291","vec__66292","ns-aliases","p__66295","vec__66296","ns-full","ns-alias","p__66299","vec__66301","p__66304","vec__66308","cljs.core.update","cljs.core/merge","p__66313","vec__66314","limit","p__66318","p__66319","map__66321","vec__66322","k","cljs.core.into","cljs.core.not_EQ_"],"sourcesContent":["(ns day8.re-frame-10x.panels.settings.events\n  (:require\n   [day8.re-frame-10x.inlined-deps.re-frame.v1v3v0.re-frame.core :as rf]\n   [day8.re-frame-10x.fx.local-storage                           :as local-storage]\n   [day8.re-frame-10x.fx.trace                                   :as trace]\n   [day8.re-frame-10x.tools.reader.edn                           :as reader.edn]\n   [day8.re-frame-10x.panels.settings.subs                       :as settings.subs]))\n\n(rf/reg-event-db\n ::panel-width%\n [(rf/path [:settings :panel-width%]) rf/trim-v (local-storage/save \"panel-width-ratio\")]\n (fn [_ [width%]]\n   (max width% 0.05)))\n\n(rf/reg-event-db\n ::window-width\n [(rf/path [:settings :window-width]) rf/trim-v]\n (fn [_ [width]]\n   width))\n\n(rf/reg-event-db\n ::selected-tab\n [(rf/path [:settings :selected-tab]) rf/trim-v (local-storage/save \"selected-tab\")]\n (fn [_ [selected-tab]]\n   selected-tab))\n\n(rf/reg-event-db\n ::toggle\n [(rf/path [:settings :showing-settings?])]\n (fn [showing? _]\n   (not showing?)))\n\n(rf/reg-event-db\n ::show-panel?\n [(rf/path [:settings :show-panel?]) rf/trim-v (local-storage/save \"show-panel\")]\n (fn [_ [show-panel?]]\n   show-panel?))\n\n(rf/reg-event-db\n ::factory-reset\n (fn [db _]\n    ;; [IJ] TODO: these should be fx\n   (local-storage/delete-all-keys!)\n   (js/location.reload)\n   db))\n\n(rf/reg-event-db\n ::set-ambiance\n [(rf/path [:settings :ambiance]) rf/trim-v (local-storage/save \"ambiance\")]\n (fn [_ [ambiance]]\n   ambiance))\n\n(rf/reg-event-db\n ::set-syntax-color-scheme\n [(rf/path [:settings :syntax-color-scheme]) rf/trim-v (local-storage/save \"syntax-color-scheme\")]\n (fn [_ [syntax-color-scheme]]\n   syntax-color-scheme))\n\n(rf/reg-event-db\n ::set-number-of-retained-epochs\n [(rf/path [:settings :number-of-epochs]) rf/trim-v (local-storage/save \"retained-epochs\")]\n (fn [_ [num-str]]\n    ;; TODO: this is not perfect, there is an issue in re-com\n    ;; where it won't update its model if it never receives another\n    ;; changes after it's on-change is fired.\n    ;; TODO: you could reset the stored epochs on change here\n    ;; once the way they are processed is refactored.\n   (let [num (js/parseInt num-str)\n         num (if (and (not (js/isNaN num)) (pos-int? num))\n               num\n               5)]\n     num)))\n\n(def ignored-event-interceptors\n  [(rf/path [:settings :ignored-events])\n   rf/trim-v\n   (local-storage/save \"ignored-events\")])\n\n(rf/reg-event-db\n ::add-ignored-event\n ignored-event-interceptors\n (fn [ignored-events _]\n   (let [id (random-uuid)]\n     (assoc ignored-events id {:id id :event-str \"\" :event-id nil :sort (js/Date.now)}))))\n\n(rf/reg-event-db\n ::remove-ignored-event\n ignored-event-interceptors\n (fn [ignored-events [id]]\n   (dissoc ignored-events id)))\n\n(rf/reg-event-db\n ::update-ignored-event\n ignored-event-interceptors\n (fn [ignored-events [id event-str]]\n    ;; TODO: this won't inform users if they type bad strings in.\n   (let [event (reader.edn/read-string-maybe event-str)]\n     (-> ignored-events\n         (assoc-in [id :event-str] event-str)\n         (update-in [id :event-id] (fn [old-event] (if event event old-event)))))))\n\n(rf/reg-event-db\n ::set-ignored-events\n ignored-event-interceptors\n (fn [_ [ignored-events]]\n   ignored-events))\n\n(def filtered-view-trace-interceptors\n  [(rf/path [:settings :filtered-view-trace])\n   rf/trim-v\n   (local-storage/save \"filtered-view-trace\")])\n\n(rf/reg-event-db\n ::add-filtered-view-trace\n filtered-view-trace-interceptors\n (fn [filtered-view-trace _]\n   (let [id (random-uuid)]\n     (assoc filtered-view-trace id {:id id :ns-str \"\" :ns nil :sort (js/Date.now)}))))\n\n(rf/reg-event-db\n ::remove-filtered-view-trace\n filtered-view-trace-interceptors\n (fn [filtered-view-trace [id]]\n   (dissoc filtered-view-trace id)))\n\n(rf/reg-event-db\n ::update-filtered-view-trace\n filtered-view-trace-interceptors\n (fn [filtered-view-trace [id ns-str]]\n    ;; TODO: this won't inform users if they type bad strings in.\n   (let [event (reader.edn/read-string-maybe ns-str)]\n     (-> filtered-view-trace\n         (assoc-in [id :ns-str] ns-str)\n         (update-in [id :ns] (fn [old-event] (if event event old-event)))))))\n\n(rf/reg-event-db\n ::set-filtered-view-trace\n filtered-view-trace-interceptors\n (fn [_ [ignored-events]]\n   ignored-events))\n\n(def low-level-trace-interceptors\n  [(rf/path [:settings :low-level-trace])\n   rf/trim-v\n   (local-storage/save \"low-level-trace\")])\n\n(rf/reg-event-db\n ::set-low-level-trace\n low-level-trace-interceptors\n (fn [_ [low-level]]\n   low-level))\n\n(rf/reg-event-db\n ::low-level-trace\n low-level-trace-interceptors\n (fn [low-level [trace-type capture?]]\n   (assoc low-level trace-type capture?)))\n\n(rf/reg-event-db\n ::debug?\n [(rf/path [:settings :debug?]) rf/trim-v]\n (fn [_ [debug?]]\n   debug?))\n\n(rf/reg-event-db\n ::app-db-follows-events?\n [(rf/path [:settings :app-db-follows-events?]) rf/trim-v (local-storage/save \"app-db-follows-events?\")]\n (fn [_ [follows-events?]]\n   follows-events?))\n\n(rf/reg-event-db\n ::external-window-dimensions\n [(rf/path [:settings :external-window-dimensions]) rf/trim-v (local-storage/save \"external-window-dimensions\")]\n (fn [_ [external-window-dimensions]]\n   external-window-dimensions))\n\n(rf/reg-event-db\n ::external-window-resize\n [(rf/path [:settings :external-window-dimensions]) rf/unwrap (local-storage/save \"external-window-dimensions\")]\n (fn [external-window-dimensions {:keys [width height]}]\n   (assoc external-window-dimensions :width width :height height)))\n\n(rf/reg-event-db\n ::external-window-position\n [(rf/path [:settings :external-window-dimensions]) rf/unwrap (local-storage/save \"external-window-dimensions\")]\n (fn [external-window-dimensions {:keys [left top]}]\n   (assoc external-window-dimensions :left left :top top)))\n\n(rf/reg-event-fx\n ::user-toggle-panel\n [(rf/path [:settings])\n  (local-storage/save \"using-trace?\" :using-trace?)\n  (local-storage/save \"show-panel\" :show-panel?)]\n (fn [{settings :db} _]\n   (let [now-showing?    (not (get settings :show-panel?))\n         external-panel? (get settings :external-window?)\n         trace-when      (get settings :trace-when)\n         using-trace?    (or external-panel? now-showing? (= :always trace-when))]\n     (merge\n      {:db (-> settings\n               (assoc :using-trace? using-trace?)\n               (assoc :show-panel? now-showing?))}\n      (when (= :panel trace-when)\n        (if now-showing?\n          {::trace/enable {:key ::cb}}\n          (when-not external-panel?\n            {::trace/disable {:key ::cb}})))))))\n\n(rf/reg-event-fx\n ::enable-tracing\n (fn [_ _]\n   {::trace/enable {:key ::cb}}))\n\n(rf/reg-event-fx\n ::disable-tracing\n (fn [_ _]\n   {::trace/disable {:key ::cb}}))\n\n(rf/reg-event-db\n ::show-event-history?\n [(rf/path [:settings :show-event-history?]) rf/trim-v (local-storage/save \"show-event-history\")]\n (fn [_ [show-event-history?]]\n   show-event-history?))\n\n(rf/reg-event-db\n ::open-new-inspectors?\n [(rf/path [:settings :open-new-inspectors?]) rf/trim-v (local-storage/save \"open-new-inspectors?\")]\n (fn [_ [open-new-inspectors?]]\n   open-new-inspectors?))\n\n(rf/reg-event-db\n ::handle-keys?\n [(rf/path [:settings :handle-keys?]) rf/trim-v (local-storage/save \"handle-keys?\")]\n (fn [_ [handle-keys?]]\n   handle-keys?))\n\n(rf/reg-event-db\n ::ready-to-bind-key\n [(rf/path [:settings :ready-to-bind-key]) rf/trim-v]\n (fn [_ [key-intent]] key-intent))\n\n(rf/reg-event-db\n ::key-bindings\n [(rf/path [:settings :key-bindings]) rf/trim-v (local-storage/save \"key-bindings\")]\n (fn [_ [key-bindings]] key-bindings))\n\n(rf/reg-event-db\n ::bind-key\n [(rf/path [:settings :key-bindings]) rf/trim-v (local-storage/save \"key-bindings\")]\n (fn [key-bindings [key-intent value]]\n   (assoc key-bindings key-intent value)))\n\n(rf/reg-event-db\n ::log-outputs\n [(rf/path [:settings :log-outputs]) rf/trim-v (local-storage/save \"log-outputs\")]\n (fn [log-outputs [value & [enabled?]]]\n   (if (vector? value)\n     value\n     (-> (set log-outputs)\n         ((if-not (false? enabled?) conj disj) value)\n         sort\n         vec))))\n\n(rf/reg-event-db\n ::log-pretty?\n [(rf/path [:settings :log-pretty?]) rf/trim-v (local-storage/save \"log-pretty?\")]\n (fn [_ [pretty?]]\n   pretty?))\n\n(def ns-aliases-interceptors\n  [(rf/path [:settings :ns-aliases])\n   rf/trim-v\n   (local-storage/save \"ns-aliases\")])\n\n(rf/reg-event-db\n ::alias-namespaces?\n [(rf/path [:settings :alias-namespaces?])\n  rf/trim-v\n  (local-storage/save \"alias-namespaces?\")]\n (fn [_ [b]]\n   b))\n\n(rf/reg-event-db\n ::ns-aliases\n ns-aliases-interceptors\n (fn [_ [ns-aliases]]\n   ns-aliases))\n\n(rf/reg-event-db\n ::add-ns-alias\n ns-aliases-interceptors\n (fn [ns-aliases [ns-full ns-alias]]\n   (let [id (random-uuid)]\n     (assoc ns-aliases id {:id id\n                           :ns-full ns-full\n                           :ns-alias ns-alias\n                           :sort (js/Date.now)}))))\n\n(rf/reg-event-db\n ::remove-ns-alias\n ns-aliases-interceptors\n (fn [ns-aliases [id]]\n   (dissoc ns-aliases id)))\n\n(rf/reg-event-db\n ::update-ns-alias\n ns-aliases-interceptors\n (fn [ns-aliases [id ns-full ns-alias]]\n   (update ns-aliases id merge {:ns-full (str ns-full)\n                                :ns-alias (str ns-alias)})))\n\n(rf/reg-event-db\n ::expansion-limit\n [(rf/path [:settings :expansion-limit]) rf/trim-v (local-storage/save \"expansion-limit\")]\n (fn [_ [limit]] limit))\n\n(rf/reg-event-fx\n ::trace-when\n [(rf/path [:settings :trace-when]) rf/trim-v (local-storage/save \"trace-when\")]\n (fn [{trace-when :db} [k]]\n   (into {:db k}\n         (cond\n           (and (not= :never trace-when) (= :never k)) {::trace/disable {:key ::cb}}\n           (and (= :never trace-when) (not= :never k)) {::trace/enable {:key ::cb}}))))\n"],"x_google_ignoreList":[0]}