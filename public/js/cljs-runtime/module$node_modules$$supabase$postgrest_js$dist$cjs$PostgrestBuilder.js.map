{
"version":3,
"file":"module$node_modules$$supabase$postgrest_js$dist$cjs$PostgrestBuilder.js",
"lineCount":69,
"mappings":"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",
"sources":["node_modules/@supabase/postgrest-js/dist/cjs/PostgrestBuilder.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$$supabase$postgrest_js$dist$cjs$PostgrestBuilder\"] = function(global,require,module,exports) {\n\"use strict\";\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\n// @ts-ignore\nconst node_fetch_1 = __importDefault(require(\"@supabase/node-fetch\"));\nconst PostgrestError_1 = __importDefault(require(\"./PostgrestError\"));\nclass PostgrestBuilder {\n    constructor(builder) {\n        this.shouldThrowOnError = false;\n        this.method = builder.method;\n        this.url = builder.url;\n        this.headers = builder.headers;\n        this.schema = builder.schema;\n        this.body = builder.body;\n        this.shouldThrowOnError = builder.shouldThrowOnError;\n        this.signal = builder.signal;\n        this.isMaybeSingle = builder.isMaybeSingle;\n        if (builder.fetch) {\n            this.fetch = builder.fetch;\n        }\n        else if (typeof fetch === 'undefined') {\n            this.fetch = node_fetch_1.default;\n        }\n        else {\n            this.fetch = fetch;\n        }\n    }\n    /**\n     * If there's an error with the query, throwOnError will reject the promise by\n     * throwing the error instead of returning it as part of a successful response.\n     *\n     * {@link https://github.com/supabase/supabase-js/issues/92}\n     */\n    throwOnError() {\n        this.shouldThrowOnError = true;\n        return this;\n    }\n    /**\n     * Set an HTTP header for the request.\n     */\n    setHeader(name, value) {\n        this.headers = Object.assign({}, this.headers);\n        this.headers[name] = value;\n        return this;\n    }\n    then(onfulfilled, onrejected) {\n        // https://postgrest.org/en/stable/api.html#switching-schemas\n        if (this.schema === undefined) {\n            // skip\n        }\n        else if (['GET', 'HEAD'].includes(this.method)) {\n            this.headers['Accept-Profile'] = this.schema;\n        }\n        else {\n            this.headers['Content-Profile'] = this.schema;\n        }\n        if (this.method !== 'GET' && this.method !== 'HEAD') {\n            this.headers['Content-Type'] = 'application/json';\n        }\n        // NOTE: Invoke w/o `this` to avoid illegal invocation error.\n        // https://github.com/supabase/postgrest-js/pull/247\n        const _fetch = this.fetch;\n        let res = _fetch(this.url.toString(), {\n            method: this.method,\n            headers: this.headers,\n            body: JSON.stringify(this.body),\n            signal: this.signal,\n        }).then(async (res) => {\n            var _a, _b, _c;\n            let error = null;\n            let data = null;\n            let count = null;\n            let status = res.status;\n            let statusText = res.statusText;\n            if (res.ok) {\n                if (this.method !== 'HEAD') {\n                    const body = await res.text();\n                    if (body === '') {\n                        // Prefer: return=minimal\n                    }\n                    else if (this.headers['Accept'] === 'text/csv') {\n                        data = body;\n                    }\n                    else if (this.headers['Accept'] &&\n                        this.headers['Accept'].includes('application/vnd.pgrst.plan+text')) {\n                        data = body;\n                    }\n                    else {\n                        data = JSON.parse(body);\n                    }\n                }\n                const countHeader = (_a = this.headers['Prefer']) === null || _a === void 0 ? void 0 : _a.match(/count=(exact|planned|estimated)/);\n                const contentRange = (_b = res.headers.get('content-range')) === null || _b === void 0 ? void 0 : _b.split('/');\n                if (countHeader && contentRange && contentRange.length > 1) {\n                    count = parseInt(contentRange[1]);\n                }\n                // Temporary partial fix for https://github.com/supabase/postgrest-js/issues/361\n                // Issue persists e.g. for `.insert([...]).select().maybeSingle()`\n                if (this.isMaybeSingle && this.method === 'GET' && Array.isArray(data)) {\n                    if (data.length > 1) {\n                        error = {\n                            // https://github.com/PostgREST/postgrest/blob/a867d79c42419af16c18c3fb019eba8df992626f/src/PostgREST/Error.hs#L553\n                            code: 'PGRST116',\n                            details: `Results contain ${data.length} rows, application/vnd.pgrst.object+json requires 1 row`,\n                            hint: null,\n                            message: 'JSON object requested, multiple (or no) rows returned',\n                        };\n                        data = null;\n                        count = null;\n                        status = 406;\n                        statusText = 'Not Acceptable';\n                    }\n                    else if (data.length === 1) {\n                        data = data[0];\n                    }\n                    else {\n                        data = null;\n                    }\n                }\n            }\n            else {\n                const body = await res.text();\n                try {\n                    error = JSON.parse(body);\n                    // Workaround for https://github.com/supabase/postgrest-js/issues/295\n                    if (Array.isArray(error) && res.status === 404) {\n                        data = [];\n                        error = null;\n                        status = 200;\n                        statusText = 'OK';\n                    }\n                }\n                catch (_d) {\n                    // Workaround for https://github.com/supabase/postgrest-js/issues/295\n                    if (res.status === 404 && body === '') {\n                        status = 204;\n                        statusText = 'No Content';\n                    }\n                    else {\n                        error = {\n                            message: body,\n                        };\n                    }\n                }\n                if (error && this.isMaybeSingle && ((_c = error === null || error === void 0 ? void 0 : error.details) === null || _c === void 0 ? void 0 : _c.includes('0 rows'))) {\n                    error = null;\n                    status = 200;\n                    statusText = 'OK';\n                }\n                if (error && this.shouldThrowOnError) {\n                    throw new PostgrestError_1.default(error);\n                }\n            }\n            const postgrestResponse = {\n                error,\n                data,\n                count,\n                status,\n                statusText,\n            };\n            return postgrestResponse;\n        });\n        if (!this.shouldThrowOnError) {\n            res = res.catch((fetchError) => {\n                var _a, _b, _c;\n                return ({\n                    error: {\n                        message: `${(_a = fetchError === null || fetchError === void 0 ? void 0 : fetchError.name) !== null && _a !== void 0 ? _a : 'FetchError'}: ${fetchError === null || fetchError === void 0 ? void 0 : fetchError.message}`,\n                        details: `${(_b = fetchError === null || fetchError === void 0 ? void 0 : fetchError.stack) !== null && _b !== void 0 ? _b : ''}`,\n                        hint: '',\n                        code: `${(_c = fetchError === null || fetchError === void 0 ? void 0 : fetchError.code) !== null && _c !== void 0 ? _c : ''}`,\n                    },\n                    data: null,\n                    count: null,\n                    status: 0,\n                    statusText: '',\n                });\n            });\n        }\n        return res.then(onfulfilled, onrejected);\n    }\n}\nexports.default = PostgrestBuilder;\n//# sourceMappingURL=PostgrestBuilder.js.map\n};"],
"names":["shadow$provide","global","require","module","exports","__importDefault","mod","__esModule","Object","defineProperty","value","node_fetch_1","PostgrestError_1","PostgrestBuilder","constructor","builder","shouldThrowOnError","method","url","headers","schema","body","signal","isMaybeSingle","fetch","default","throwOnError","setHeader","name","assign","then","onfulfilled","onrejected","undefined","includes","_fetch","res","toString","JSON","stringify","_a","_b","error","data","count","status","statusText","ok","text","parse","countHeader","match","contentRange","get","split","length","parseInt","Array","isArray","code","details","hint","message","_d","_c","postgrestResponse","catch","fetchError","stack"]
}
