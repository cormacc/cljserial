{"version":3,"sources":["rewrite_clj/zip/walk.cljc"],"mappings":";AAMA,gCAAA,hCAAOA,wEAAUC;AAAjB,AACE,4FAAK,AAACC,kBAAQC,0BAAOF,lHAChB,AAACG,mDAAWC,lEACZC;;AAEP,mCAAA,nCAAOC,8EAAaN,KAAKO,SAAGC;AAA5B,AACE,oBAAI,CAACD,yCAAAA,+CAAAA,RAAGP,4BAAAA;AACN,IAAAS,mBAAI,CAACD,kCAAAA,wCAAAA,RAAER,qBAAAA;AAAP,AAAA,oBAAAS;AAAAA;;AAAaT;;;AACbA;;;AAEJ,uCAAA,vCAAOU,sFACJH,SAAGC,EAAER;AADR,AAEE,IAAOW,MAAIX;;AAAX,AACE,oBAAI,AAACY,gCAAOD;AACVA;;AACA,eAAO,2DAAIA,jCACA,AAACL,qCAAYC,SAAGC,xEAChBK;;;;;;;AAEjB,AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;+BAAA,uCAAAC,tEAAME;AAAN,AAAA,IAAAD,WAAA,AAAA;AAAA,AAAA,QAAAA;KAAA;AAAA,OAAAC,2DAAA,CAAA,UAAA,MAAA,CAAA,UAAA;;;KAAA;AAAA,OAAAA,2DAAA,CAAA,UAAA,MAAA,CAAA,UAAA,MAAA,CAAA,UAAA;;;;AAAA,MAAA,KAAAC,MAAA,CAAA,8DAAA,AAAA;;;;;AAAA,CAAA,6DAAA,7DAAMD,wEAsCFhB,KAAKQ;AAtCT,AAsCY,OAACU,2DAAQlB,KAAK,qBAAA,rBAACmB,2BAAiBX;;;AAtC5C,CAAA,6DAAA,7DAAMQ,wEAuCFhB,KAAKO,SAAGC;AAvCZ,iDAwCQ,AAACY,gDAAQV,qCAAgBH,SAAGC,/IAC5B,OAACa,qCAAqBrB;;;AAzC9B,CAAA,uDAAA,vDAAMgB;;AAAN,AA2CA,wCAAA,xCAAMM,wFACHf,SAAGC,EAAER;AADR,AAEE,IAAOW,MAAI,AAACZ,8BAASC;;AAArB,AACE,IAAMW,UAAI,AAACL,iCAAYK,IAAIJ,SAAGC;AAA9B,AACE,oBAAM,AAACe,2BAAQZ;AACT,eAAO,8BAAA,2BAAIA,3BAAIY,9BAAQxB;;;;AAD7B,oBAGM,AAACyB,wBAAKb;AACN,eAAO,AAACa,wBAAKb;;;;AAJnB,AAOMA;;;;;;;AAEZ,AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;gCAAA,wCAAAG,xEAAMY;AAAN,AAAA,IAAAD,WAAA,AAAA;AAAA,AAAA,QAAAA;KAAA;AAAA,OAAAC,4DAAA,CAAA,UAAA,MAAA,CAAA,UAAA;;;KAAA;AAAA,OAAAA,4DAAA,CAAA,UAAA,MAAA,CAAA,UAAA,MAAA,CAAA,UAAA;;;;AAAA,MAAA,KAAAT,MAAA,CAAA,8DAAA,AAAA;;;;;AAAA,CAAA,8DAAA,9DAAMS,yEAsCF1B,KAAKQ;AAtCT,AAsCY,OAACmB,4DAAS3B,KAAK,qBAAA,rBAACmB,2BAAiBX;;;AAtC7C,CAAA,8DAAA,9DAAMkB,yEAuCF1B,KAAKO,SAAGC;AAvCZ,AAwCG,iDAAA,WAAAoB,rDAACP,qCAAqBrB;AAAtB,AAA4B,wDAAA4B,jDAACN,sCAAiBf,SAAGC;;;;AAxCpD,CAAA,wDAAA,xDAAMkB;;AAAN","names":["rewrite-clj.zip.walk/downmost","zloc","cljs.core/iterate","rewrite-clj.zip.move/down","cljs.core.take_while","cljs.core/identity","cljs.core/last","rewrite-clj.zip.walk/process-loc","p?","f","or__5002__auto__","rewrite-clj.zip.walk/prewalk-subtree","loc","rewrite-clj.zip.move/end?","rewrite-clj.zip.move/next","var_args","G__69835","rewrite-clj.zip.walk/prewalk","js/Error","rewrite_clj.zip.walk.prewalk","cljs.core/constantly","cljs.core.partial","rewrite-clj.zip.subedit/subedit-node","rewrite-clj.zip.walk/postwalk-subtree","rewrite-clj.zip.move/right","rewrite-clj.zip.move/up","G__69865","rewrite-clj.zip.walk/postwalk","rewrite_clj.zip.walk.postwalk","p1__69855#"],"sourcesContent":["(ns ^:no-doc rewrite-clj.zip.walk\n  (:require  [rewrite-clj.zip.move :as m]\n             [rewrite-clj.zip.subedit :as subedit]))\n\n#?(:clj (set! *warn-on-reflection* true))\n\n(defn- downmost [zloc]\n  (->> (iterate m/down zloc)\n       (take-while identity)\n       last))\n\n(defn- process-loc [zloc p? f]\n  (if (p? zloc)\n    (or (f zloc) zloc)\n    zloc))\n\n(defn- prewalk-subtree\n  [p? f zloc]\n  (loop [loc zloc]\n    (if (m/end? loc)\n      loc\n      (recur (-> loc\n                 (process-loc p? f)\n                 m/next)))))\n\n(defn prewalk\n  \"Return zipper modified by an isolated depth-first pre-order traversal.\n\n   Pre-order traversal visits root before children.\n   For example, traversal order of `(1 (2 3 (4 5) 6 (7 8)) 9)` is:\n\n   1. `(1 (2 3 (4 5) 6 (7 8)) 9)`\n   2. `1`\n   3. `(2 3 (4 5) 6 (7 8))`\n   4. `2`\n   5. `3`\n   6. `(4 5)`\n   7. `4`\n   8. `5`\n   9. `6`\n   10. `(7 8)`\n   11. `7`\n   12. `8`\n   13. `9`\n\n   Traversal starts at the current node in `zloc` and continues to the end of the isolated sub-tree.\n\n   Function `f` is called on the zipper locations satisfying predicate `p?` and must return either\n   - nil to indicate no changes\n   - or a valid zipper\n   WARNING: when function `f` changes the location in the zipper, normal traversal will be affected.\n\n   When `p?` is not specified `f` is called on all locations.\n\n   To walk all nodes, you'll want to walk from the root node.\n   You can do this by, for example, using [[of-string*]] instead of [[of-string]].\n\n   ```Clojure\n   (-> (zip/of-string* \\\"my clojure forms\\\")\n       (zip/prewalk ...))\n   ```\n\n   See [docs on sub editing](/doc/01-user-guide.adoc#sub-editing).\"\n  ([zloc f] (prewalk zloc (constantly true) f))\n  ([zloc p? f]\n   (->> (partial prewalk-subtree p? f)\n        (subedit/subedit-node zloc))))\n\n(defn postwalk-subtree\n  [p? f zloc]\n  (loop [loc (downmost zloc)]\n    (let [loc (process-loc loc p? f)]\n      (cond (m/right loc)\n            (recur (-> loc m/right downmost))\n\n            (m/up loc)\n            (recur (m/up loc))\n\n            :else\n            loc))))\n\n(defn postwalk\n  \"Return zipper modified by an isolated depth-first post-order traversal.\n\n   Post-order traversal visits children before root.\n   For example, traversal order of `(1 (2 3 (4 5) 6 (7 8)) 9)` is:\n\n   1. `1`\n   2. `2`\n   3. `3`\n   4. `4`\n   5. `5`\n   6. `(4 5)`\n   7. `6`\n   8. `7`\n   9. `8`\n   10. `(7 8)`\n   11. `(2 3 (4 5) 6 (7 8))`\n   12. `9`\n   13. `(1 (2 3 (4 5) 6 (7 8)) 9)`\n\n   Traversal starts at the current node in `zloc` and continues to the end of the isolated sub-tree.\n\n   Function `f` is called on the zipper locations satisfying predicate `p?` and must return either\n   - nil to indicate no changes\n   - or a valid zipper\n   WARNING: when function `f` changes the location in the zipper, normal traversal will be affected.\n\n   When `p?` is not specified `f` is called on all locations.\n\n   To walk all nodes, you'll want to walk from the root node.\n   You can do this by, for example, using [[of-string*]] instead of [[of-string]].\n\n   ```Clojure\n   (-> (zip/of-string* \\\"my clojure forms\\\")\n       (zip/postwalk ...))\n   ```\n\n   See [docs on sub editing](/doc/01-user-guide.adoc#sub-editing).\"\n  ([zloc f] (postwalk zloc (constantly true) f))\n  ([zloc p? f]\n   (subedit/subedit-node zloc #(postwalk-subtree p? f %))))\n"],"x_google_ignoreList":[0]}