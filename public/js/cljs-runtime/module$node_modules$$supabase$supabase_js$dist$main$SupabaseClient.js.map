{
"version":3,
"file":"module$node_modules$$supabase$supabase_js$dist$main$SupabaseClient.js",
"lineCount":115,
"mappings":"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",
"sources":["node_modules/@supabase/supabase-js/dist/main/SupabaseClient.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$$supabase$supabase_js$dist$main$SupabaseClient\"] = function(global,require,module,exports) {\n\"use strict\";\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst functions_js_1 = require(\"@supabase/functions-js\");\nconst postgrest_js_1 = require(\"@supabase/postgrest-js\");\nconst realtime_js_1 = require(\"@supabase/realtime-js\");\nconst storage_js_1 = require(\"@supabase/storage-js\");\nconst constants_1 = require(\"./lib/constants\");\nconst fetch_1 = require(\"./lib/fetch\");\nconst helpers_1 = require(\"./lib/helpers\");\nconst SupabaseAuthClient_1 = require(\"./lib/SupabaseAuthClient\");\n/**\n * Supabase Client.\n *\n * An isomorphic Javascript client for interacting with Postgres.\n */\nclass SupabaseClient {\n    /**\n     * Create a new client for use in the browser.\n     * @param supabaseUrl The unique Supabase URL which is supplied when you create a new project in your project dashboard.\n     * @param supabaseKey The unique Supabase Key which is supplied when you create a new project in your project dashboard.\n     * @param options.db.schema You can switch in between schemas. The schema needs to be on the list of exposed schemas inside Supabase.\n     * @param options.auth.autoRefreshToken Set to \"true\" if you want to automatically refresh the token before expiring.\n     * @param options.auth.persistSession Set to \"true\" if you want to automatically save the user session into local storage.\n     * @param options.auth.detectSessionInUrl Set to \"true\" if you want to automatically detects OAuth grants in the URL and signs in the user.\n     * @param options.realtime Options passed along to realtime-js constructor.\n     * @param options.global.fetch A custom fetch implementation.\n     * @param options.global.headers Any additional headers to send with each network request.\n     */\n    constructor(supabaseUrl, supabaseKey, options) {\n        var _a, _b, _c;\n        this.supabaseUrl = supabaseUrl;\n        this.supabaseKey = supabaseKey;\n        if (!supabaseUrl)\n            throw new Error('supabaseUrl is required.');\n        if (!supabaseKey)\n            throw new Error('supabaseKey is required.');\n        const _supabaseUrl = (0, helpers_1.stripTrailingSlash)(supabaseUrl);\n        this.realtimeUrl = `${_supabaseUrl}/realtime/v1`.replace(/^http/i, 'ws');\n        this.authUrl = `${_supabaseUrl}/auth/v1`;\n        this.storageUrl = `${_supabaseUrl}/storage/v1`;\n        this.functionsUrl = `${_supabaseUrl}/functions/v1`;\n        // default storage key uses the supabase project ref as a namespace\n        const defaultStorageKey = `sb-${new URL(this.authUrl).hostname.split('.')[0]}-auth-token`;\n        const DEFAULTS = {\n            db: constants_1.DEFAULT_DB_OPTIONS,\n            realtime: constants_1.DEFAULT_REALTIME_OPTIONS,\n            auth: Object.assign(Object.assign({}, constants_1.DEFAULT_AUTH_OPTIONS), { storageKey: defaultStorageKey }),\n            global: constants_1.DEFAULT_GLOBAL_OPTIONS,\n        };\n        const settings = (0, helpers_1.applySettingDefaults)(options !== null && options !== void 0 ? options : {}, DEFAULTS);\n        this.storageKey = (_a = settings.auth.storageKey) !== null && _a !== void 0 ? _a : '';\n        this.headers = (_b = settings.global.headers) !== null && _b !== void 0 ? _b : {};\n        if (!settings.accessToken) {\n            this.auth = this._initSupabaseAuthClient((_c = settings.auth) !== null && _c !== void 0 ? _c : {}, this.headers, settings.global.fetch);\n        }\n        else {\n            this.accessToken = settings.accessToken;\n            this.auth = new Proxy({}, {\n                get: (_, prop) => {\n                    throw new Error(`@supabase/supabase-js: Supabase Client is configured with the accessToken option, accessing supabase.auth.${String(prop)} is not possible`);\n                },\n            });\n        }\n        this.fetch = (0, fetch_1.fetchWithAuth)(supabaseKey, this._getAccessToken.bind(this), settings.global.fetch);\n        this.realtime = this._initRealtimeClient(Object.assign({ headers: this.headers, accessToken: this._getAccessToken.bind(this) }, settings.realtime));\n        this.rest = new postgrest_js_1.PostgrestClient(`${_supabaseUrl}/rest/v1`, {\n            headers: this.headers,\n            schema: settings.db.schema,\n            fetch: this.fetch,\n        });\n        if (!settings.accessToken) {\n            this._listenForAuthEvents();\n        }\n    }\n    /**\n     * Supabase Functions allows you to deploy and invoke edge functions.\n     */\n    get functions() {\n        return new functions_js_1.FunctionsClient(this.functionsUrl, {\n            headers: this.headers,\n            customFetch: this.fetch,\n        });\n    }\n    /**\n     * Supabase Storage allows you to manage user-generated content, such as photos or videos.\n     */\n    get storage() {\n        return new storage_js_1.StorageClient(this.storageUrl, this.headers, this.fetch);\n    }\n    /**\n     * Perform a query on a table or a view.\n     *\n     * @param relation - The table or view name to query\n     */\n    from(relation) {\n        return this.rest.from(relation);\n    }\n    // NOTE: signatures must be kept in sync with PostgrestClient.schema\n    /**\n     * Select a schema to query or perform an function (rpc) call.\n     *\n     * The schema needs to be on the list of exposed schemas inside Supabase.\n     *\n     * @param schema - The schema to query\n     */\n    schema(schema) {\n        return this.rest.schema(schema);\n    }\n    // NOTE: signatures must be kept in sync with PostgrestClient.rpc\n    /**\n     * Perform a function call.\n     *\n     * @param fn - The function name to call\n     * @param args - The arguments to pass to the function call\n     * @param options - Named parameters\n     * @param options.head - When set to `true`, `data` will not be returned.\n     * Useful if you only need the count.\n     * @param options.get - When set to `true`, the function will be called with\n     * read-only access mode.\n     * @param options.count - Count algorithm to use to count rows returned by the\n     * function. Only applicable for [set-returning\n     * functions](https://www.postgresql.org/docs/current/functions-srf.html).\n     *\n     * `\"exact\"`: Exact but slow count algorithm. Performs a `COUNT(*)` under the\n     * hood.\n     *\n     * `\"planned\"`: Approximated but fast count algorithm. Uses the Postgres\n     * statistics under the hood.\n     *\n     * `\"estimated\"`: Uses exact count for low numbers and planned count for high\n     * numbers.\n     */\n    rpc(fn, args = {}, options = {}) {\n        return this.rest.rpc(fn, args, options);\n    }\n    /**\n     * Creates a Realtime channel with Broadcast, Presence, and Postgres Changes.\n     *\n     * @param {string} name - The name of the Realtime channel.\n     * @param {Object} opts - The options to pass to the Realtime channel.\n     *\n     */\n    channel(name, opts = { config: {} }) {\n        return this.realtime.channel(name, opts);\n    }\n    /**\n     * Returns all Realtime channels.\n     */\n    getChannels() {\n        return this.realtime.getChannels();\n    }\n    /**\n     * Unsubscribes and removes Realtime channel from Realtime client.\n     *\n     * @param {RealtimeChannel} channel - The name of the Realtime channel.\n     *\n     */\n    removeChannel(channel) {\n        return this.realtime.removeChannel(channel);\n    }\n    /**\n     * Unsubscribes and removes all Realtime channels from Realtime client.\n     */\n    removeAllChannels() {\n        return this.realtime.removeAllChannels();\n    }\n    _getAccessToken() {\n        var _a, _b;\n        return __awaiter(this, void 0, void 0, function* () {\n            if (this.accessToken) {\n                return yield this.accessToken();\n            }\n            const { data } = yield this.auth.getSession();\n            return (_b = (_a = data.session) === null || _a === void 0 ? void 0 : _a.access_token) !== null && _b !== void 0 ? _b : null;\n        });\n    }\n    _initSupabaseAuthClient({ autoRefreshToken, persistSession, detectSessionInUrl, storage, storageKey, flowType, lock, debug, }, headers, fetch) {\n        const authHeaders = {\n            Authorization: `Bearer ${this.supabaseKey}`,\n            apikey: `${this.supabaseKey}`,\n        };\n        return new SupabaseAuthClient_1.SupabaseAuthClient({\n            url: this.authUrl,\n            headers: Object.assign(Object.assign({}, authHeaders), headers),\n            storageKey: storageKey,\n            autoRefreshToken,\n            persistSession,\n            detectSessionInUrl,\n            storage,\n            flowType,\n            lock,\n            debug,\n            fetch,\n            // auth checks if there is a custom authorizaiton header using this flag\n            // so it knows whether to return an error when getUser is called with no session\n            hasCustomAuthorizationHeader: 'Authorization' in this.headers,\n        });\n    }\n    _initRealtimeClient(options) {\n        return new realtime_js_1.RealtimeClient(this.realtimeUrl, Object.assign(Object.assign({}, options), { params: Object.assign({ apikey: this.supabaseKey }, options === null || options === void 0 ? void 0 : options.params) }));\n    }\n    _listenForAuthEvents() {\n        let data = this.auth.onAuthStateChange((event, session) => {\n            this._handleTokenChanged(event, 'CLIENT', session === null || session === void 0 ? void 0 : session.access_token);\n        });\n        return data;\n    }\n    _handleTokenChanged(event, source, token) {\n        if ((event === 'TOKEN_REFRESHED' || event === 'SIGNED_IN') &&\n            this.changedAccessToken !== token) {\n            this.changedAccessToken = token;\n        }\n        else if (event === 'SIGNED_OUT') {\n            this.realtime.setAuth();\n            if (source == 'STORAGE')\n                this.auth.signOut();\n            this.changedAccessToken = undefined;\n        }\n    }\n}\nexports.default = SupabaseClient;\n//# sourceMappingURL=SupabaseClient.js.map\n};"],
"names":["shadow$provide","global","require","module","exports","__awaiter","thisArg","_arguments","P","generator","adopt","value","resolve","Promise","reject","fulfilled","step","next","e","rejected","result","done","then","apply","Object","defineProperty","functions_js_1","postgrest_js_1","realtime_js_1","storage_js_1","constants_1","fetch_1","helpers_1","SupabaseAuthClient_1","SupabaseClient","constructor","supabaseUrl","supabaseKey","options","_a","_b","_c","Error","_supabaseUrl","stripTrailingSlash","realtimeUrl","replace","authUrl","storageUrl","functionsUrl","defaultStorageKey","hostname","URL","split","DEFAULTS","db","DEFAULT_DB_OPTIONS","realtime","DEFAULT_REALTIME_OPTIONS","auth","assign","DEFAULT_AUTH_OPTIONS","storageKey","DEFAULT_GLOBAL_OPTIONS","settings","applySettingDefaults","headers","accessToken","Proxy","get","_","prop","String","_initSupabaseAuthClient","fetch","fetchWithAuth","_getAccessToken","bind","_initRealtimeClient","rest","PostgrestClient","schema","_listenForAuthEvents","FunctionsClient","customFetch","StorageClient","from","relation","rpc","fn","args","channel","name","opts","config","getChannels","removeChannel","removeAllChannels","data","getSession","session","access_token","autoRefreshToken","persistSession","detectSessionInUrl","storage","flowType","lock","debug","SupabaseAuthClient","url","authHeaders","Authorization","apikey","hasCustomAuthorizationHeader","RealtimeClient","params","onAuthStateChange","event","_handleTokenChanged","source","token","changedAccessToken","setAuth","signOut","undefined","default"]
}
