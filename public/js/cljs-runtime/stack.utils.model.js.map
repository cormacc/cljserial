{"version":3,"sources":["stack/utils/model.cljs"],"mappings":"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","names":["stack.utils.model/reg-reframe-transactions","schema","__run-fn-form","__kind","__ns","__id","__level","sf","taoensso.telemere.impl/*rt-sig-filter*","__inst","js/Date","__thread","__root0","taoensso.telemere.impl/*trace-root*","__otel-context1","__uid","__root1","__run-result","signal__42410__auto__","cljs.core/Delay","signal__42401__auto__","taoensso.telemere.impl/Signal","taoensso.telemere/*ctx*","taoensso.telemere.impl/*trace-parent*","temp__5821__auto__","taoensso.telemere/*middleware*","sig-middleware__42402__auto__","taoensso.telemere.impl/dispatch-signal!","taoensso.telemere.impl/WrappedSignal","G__96745","G__96746","G__96747","stack.utils.dbfx/reg-event-db","stack.utils.dbfx/path","p__96755","vec__96759","cljs.core.nth","domain-db","_eid","transactions","stack.utils.datascript/rebuild","G__96773","G__96774","stack.utils.dbfx/reg-fx","transaction","G__96781","stack.utils.dbfx/dispatch","G__96784","G__96785","G__96786","stack.utils.dbfx/reg-event-fx","p__96799","p__96800","map__96802","cljs.core/--destructure-map","cljs.core.get","vec__96803","db","new-db","stack.utils.datascript/transact","new-transaction","cljs.core/last","G__96816","G__96817","stack.utils.datascript/add-tx+","stack.utils.model/reg-reframe-subs","G__96820","G__96821","stack.utils.dbfx/reg-sub","_","G__96822","G__96823","G__96824","G__96825","ddb","G__96827","G__96828","G__96829","G__96830","stack.utils.model/embed-bitemporal-db","id","stack.utils.datascript/empty-db","promesa.core.chain","promesa.core.promise","p__91509__auto__","p1__96835#","stack.utils.datascript/open-tx-log+","promesa.core.then","G__96858","stack.utils.model/get-embedded-db","cljs.core/deref","re-frame.db/app-db","stack.utils.model/get-data","stack.utils.model/get-tx-log","stack.utils.model/transact!","G__96869"],"sourcesContent":["(ns stack.utils.model\n  (:require\n   [taoensso.telemere :as t]\n   [re-frame.db]\n   [promesa.core :as p]\n   [stack.utils.datascript :as du]\n   [stack.utils.dbfx :as dbfx]))\n\n;;\n;; EMBED THE DB AND TRANSACTION LOG IN A REFRAME DB\n\n(defn reg-reframe-transactions [schema]\n  (t/log! :debug \"Registering re-frame transactions...\")\n  ;; Transaction log initialisation event handler -- triggered after load\n  (dbfx/reg-event-db\n   :tx-log-loaded\n   [(dbfx/path :domain-db)]\n   (fn [domain-db [_eid transactions]]\n     (du/rebuild domain-db transactions)))\n  ;; Transaction effect -- syntactic sugar to abbreviate fx: [[:dispatch [:transact ....]]]\n  (dbfx/reg-fx\n   :transact\n   (fn [transaction]\n     (dbfx/dispatch [:transact transaction])))\n  ;; Transaction event handler -- interface between frontend and domain db\n  (dbfx/reg-event-fx\n   :transact\n   [(dbfx/path :domain-db)]\n   (fn [{:keys [db]} [_eid transaction]]\n     (t/event! ::handling-transaction {:level :debug :data {:db db :trans transaction}})\n     (let [new-db (du/transact db transaction)\n           new-transaction (last (:tx-log new-db))]\n       {:db new-db\n        :fx [[:persist-transaction new-transaction]]})))\n  ;; Transaction persistence effect -- persists each transaction to indexeddb\n  (dbfx/reg-fx\n   :persist-transaction\n   (fn [transaction]\n     (du/add-tx+ transaction))))\n\n(defn reg-reframe-subs []\n  (dbfx/reg-sub\n   :domain-db\n   (fn [db _]\n     (:domain-db db)))\n\n  (dbfx/reg-sub\n   :domain-data\n   :<- [:domain-db]\n   (fn [ddb _]\n     (:data ddb)))\n\n  (dbfx/reg-sub\n   :domain-tx-log\n   :<- [:domain-db]\n   (fn [ddb _]\n     (:tx-log ddb))))\n\n(defn embed-bitemporal-db\n  [id schema]\n  (t/log! {:level :info :data id} \"Embedding bi-temporal DB ...\")\n  (let [db (du/empty-db id schema)]\n    (reg-reframe-transactions schema)\n    (reg-reframe-subs)\n    (p/->\n     (du/open-tx-log+ id)\n     (p/then #(dbfx/dispatch [:tx-log-loaded %])))\n    db))\n\n;; Convenience functions for inspection at the repl\n(defn get-embedded-db\n  \"Retrieve the current state of the embedded db.\"\n  []\n  (:domain-db @re-frame.db/app-db))\n\n(defn get-data [] (:data (get-embedded-db)))\n(defn get-tx-log [] (:tx-log (get-embedded-db)))\n(defn transact! [transaction]\n  (dbfx/dispatch [:transact transaction]))\n"]}