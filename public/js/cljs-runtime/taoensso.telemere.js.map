{"version":3,"sources":["taoensso/telemere.cljc"],"mappings":"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","names":["taoensso.telemere/level-aliases","taoensso.encore.signals/level-aliases","taoensso.telemere/help:filters","taoensso.telemere/help:handlers","taoensso.telemere/help:handler-dispatch-options","taoensso.telemere/get-filters","taoensso.encore.assoc_some","taoensso.encore/force-ref","taoensso.telemere.impl/*rt-sig-filter*","taoensso.telemere/get-min-levels","var_args","G__62811","js/Error","taoensso.telemere.get_min_levels","cljs.core/*ns*","kind","ns","taoensso.encore.signals/parse-min-level","cljs.core.get","taoensso.telemere/get-handlers","taoensso.encore.signals.get_handlers_map","taoensso.telemere.impl/*sig-handlers*","taoensso.telemere/get-handlers-stats","taoensso.encore.signals/get-handlers-stats","taoensso.telemere/set-kind-filter!","kind-filter","old__41992__auto__","taoensso.encore.signals/update-sig-filter","taoensso.telemere/set-ns-filter!","ns-filter","old__41995__auto__","taoensso.telemere/set-id-filter!","id-filter","old__41998__auto__","taoensso.telemere/set-min-level!","G__62830","min-level","taoensso.telemere.set_min_level_BANG_","old-sf__42004__auto__","old-ml__42005__auto__","taoensso.encore.signals/update-min-level","taoensso.telemere/add-handler!","G__62838","handler-id","handler-fn","taoensso.telemere.add_handler_BANG_","dispatch-opts","removed-handler__42014__auto__","taoensso.encore.signals/get-wrapped-handler-fn","new-handlers-vec__42015__auto__","m__42016__auto__","taoensso.encore.signals.add_handler","taoensso.telemere/remove-handler!","removed-handler__42018__auto__","new-handlers-vec__42019__auto__","m__42020__auto__","taoensso.encore.signals/remove-handler","taoensso.telemere/stop-handlers!","taoensso.encore.signals/stop-handlers!","taoensso.telemere/*ctx*","taoensso.telemere/set-ctx!","root-ctx-val","ret__5781__auto__","taoensso.telemere/with-ctx","&form","&env","ctx-val","form","cljs.core/seq","cljs.core.concat","cljs.core/List","cljs.core.apply","cljs.core/vector","taoensso.telemere/with-ctx+","update-map-or-fn","taoensso.telemere/*middleware*","taoensso.telemere/set-middleware!","?root-middleware-fn","taoensso.telemere/with-middleware","?middleware-fn","taoensso.telemere/with-middleware+","cljs.core.assoc","taoensso.encore.signals/default-handler-dispatch-opts","taoensso.telemere/chance","taoensso.telemere/rate-limiter","taoensso.telemere/newline","taoensso.telemere/comp-middleware","taoensso.telemere/default-handler-dispatch-opts","taoensso.telemere/msg-splice","taoensso.telemere/msg-skip","taoensso.telemere/clean-signal-fn","taoensso.telemere/format-signal-fn","taoensso.telemere/pr-signal-fn","taoensso.telemere/error-signal?","taoensso.encore/chance","taoensso.encore/rate-limiter","taoensso.encore/newline","taoensso.encore/comp-middleware","taoensso.telemere.impl/msg-splice","taoensso.telemere.impl/msg-skip","taoensso.telemere.utils/clean-signal-fn","taoensso.telemere.utils/format-signal-fn","taoensso.telemere.utils/pr-signal-fn","taoensso.telemere.utils/error-signal?","taoensso.telemere/help:signal-creators","taoensso.telemere/help:signal-options","taoensso.telemere/help:signal-content","taoensso.telemere/help:environmental-config","taoensso.telemere/*uid-fn*","taoensso.telemere.utils/parse-uid-fn","taoensso.telemere.impl/uid-kind","taoensso.telemere/dispatch-signal!","signal","temp__5823__auto__","wrapped-signal","taoensso.telemere.impl/wrap-signal","taoensso.telemere.impl/dispatch-signal!","taoensso.telemere/handler:console","taoensso.telemere/handler:console-raw","taoensso.telemere.consoles/handler:console","taoensso.telemere.consoles/handler:console-raw","js/taoensso","js/taoensso.telemere","js/taoensso.telemere.__on-init","taoensso.telemere/__on-init","taoensso.encore.signals/*default-handler-error-fn*","p__63062","map__63063","cljs.core/--destructure-map","error","m","__run-fn-form","__kind","__ns","__id","__level","sf","__inst","js/Date","__thread","__root0","taoensso.telemere.impl/*trace-root*","__otel-context1","__uid","__root1","__run-result","signal__42410__auto__","cljs.core/Delay","signal__42401__auto__","taoensso.telemere.impl/Signal","taoensso.telemere.impl/*trace-parent*","temp__5821__auto__","sig-middleware__42402__auto__","taoensso.telemere.impl/WrappedSignal","cljs.core.dissoc","taoensso.encore.signals/*default-handler-backp-fn*","data"],"sourcesContent":["(ns taoensso.telemere\n  \"Structured telemetry for Clojure/Script applications.\n\n  See the GitHub page (esp. Wiki) for info on motivation and design:\n    <https://www.taoensso.com/telemere>\"\n\n  {:author \"Peter Taoussanis (@ptaoussanis)\"}\n  (:refer-clojure :exclude [binding newline])\n  (:require\n   [taoensso.encore         :as enc :refer [binding have have?]]\n   [taoensso.encore.signals :as sigs]\n   [taoensso.telemere.impl  :as impl]\n   [taoensso.telemere.utils :as utils]\n   #?(:default [taoensso.telemere.consoles :as consoles])\n   #?(:clj     [taoensso.telemere.streams  :as streams])\n   #?(:clj     [taoensso.telemere.files    :as files]))\n\n  #?(:cljs\n     (:require-macros\n      [taoensso.telemere :refer\n       [with-signal with-signals\n        signal! event! log! trace! spy! catch->error!\n\n        ;; Via `sigs/def-api`\n        without-filters with-kind-filter with-ns-filter with-id-filter\n        with-min-level with-handler with-handler+\n        with-ctx with-ctx+ with-middleware with-middleware+]])))\n\n(comment\n  (remove-ns (symbol (str *ns*)))\n  (:api (enc/interns-overview)))\n\n(enc/assert-min-encore-version [3 132 0])\n\n;;;; Shared signal API\n\n(sigs/def-api\n  {:sf-arity 4\n   :ct-sig-filter   impl/ct-sig-filter\n   :*rt-sig-filter* impl/*rt-sig-filter*\n   :*sig-handlers*  impl/*sig-handlers*\n   :lib-dispatch-opts\n   (assoc sigs/default-handler-dispatch-opts\n     :convey-bindings? false ; Handled manually\n     )})\n\n;;;; Aliases\n\n(enc/defaliases\n  ;; Encore\n  #?(:clj enc/set-var-root!)\n  #?(:clj enc/update-var-root!)\n  #?(:clj enc/get-env)\n  #?(:clj enc/call-on-shutdown!)\n  enc/chance\n  enc/rate-limiter\n  enc/newline\n  enc/comp-middleware\n  sigs/default-handler-dispatch-opts\n\n  ;; Impl\n  impl/msg-splice\n  impl/msg-skip\n  #?(:clj impl/with-signal)\n  #?(:clj impl/with-signals)\n  #?(:clj impl/signal!)\n  #?(:clj impl/signal-allowed?)\n\n  ;; Utils\n  utils/clean-signal-fn\n  utils/format-signal-fn\n  utils/pr-signal-fn\n  utils/error-signal?)\n\n;;;; Help\n\n(do\n  (impl/defhelp help:signal-creators      :signal-creators)\n  (impl/defhelp help:signal-options       :signal-options)\n  (impl/defhelp help:signal-content       :signal-content)\n  (impl/defhelp help:environmental-config :environmental-config))\n\n;;;; Unique ids\n\n(def ^:dynamic *uid-fn*\n  \"Experimental, subject to change. Feedback welcome!\n  (fn [root?]) used to generate signal `:uid` values (unique instance ids)\n  when tracing.\n\n  Relevant only when `otel-tracing?` is false.\n  If `otel-tracing?` is true, uids are instead generated by `*otel-tracer*`.\n\n  `root?` argument is true iff signal is a top-level trace (i.e. form being\n  traced is unnested = has no parent form). Root-level uids typically need\n  more entropy and so are usually longer (e.g. 32 vs 16 hex chars).\n\n  Override default by setting one of the following:\n          JVM property: `taoensso.telemere/uid-fn`\n          Env variable: `TAOENSSO_TELEMERE_UID_FN`\n    Classpath resource: `taoensso.telemere/uid-fn`\n\n    Possible (compile-time) values include:\n      `:uuid`          - UUID string (Cljs) or `java.util.UUID` (Clj)\n      `:uuid-str`      - UUID string       (36/36 chars)\n      `:nano/secure`   - nano-style string (21/10 chars) w/ strong RNG\n      `:nano/insecure` - nano-style string (21/10 chars) w/ fast   RNG (default)\n      `:hex/insecure`  - hex-style  string (32/16 chars) w/ strong RNG\n      `:hex/secure`    - hex-style  string (32/16 chars) w/ fast   RNG\"\n\n  (utils/parse-uid-fn impl/uid-kind))\n\n(comment (enc/qb 1e6 (*uid-fn* true) (*uid-fn* false))) ; [79.4 63.53]\n\n;;;; OpenTelemetry\n\n#?(:clj\n   (def otel-tracing?\n     \"Experimental, subject to change. Feedback welcome!\n\n     Should Telemere's tracing signal creators (`trace!`, `spy!`, etc.)\n     interop with OpenTelemetry Java [1]? This will affect relevant\n     Telemere macro expansions.\n\n     Defaults to `true` iff OpenTelemetry Java is present when this\n     namespace is evaluated/compiled.\n\n     If `false`:\n       1. Telemere's   OpenTelemetry handler will NOT emit to `SpanExporter`s.\n       2. Telemere and OpenTelemetry will NOT recognize each other's spans.\n\n     If `true`:\n       1. Telemere's   OpenTelemetry handler WILL emit to `SpanExporter`s.\n       2. Telemere and OpenTelemetry WILL recognize each other's spans.\n\n     Override default by setting one of the following to \\\"true\\\" or \\\"false\\\":\n             JVM property: `taoensso.telemere.otel-tracing`\n             Env variable: `TAOENSSO_TELEMERE_otel-tracing`\n       Classpath resource: `taoensso.telemere.otel-tracing`\n\n     See also: `otel-default-providers_`, `*otel-tracer*`,\n       `taoensso.telemere.open-telemere/handler:open-telemetry`.\n\n     [1] Ref. <https://github.com/open-telemetry/opentelemetry-java>\"\n     impl/enabled:otel-tracing?))\n\n#?(:clj\n   (def otel-default-providers_\n     \"Experimental, subject to change. Feedback welcome!\n\n     When OpenTelemetry Java API [1] is present, value will be a delayed map\n     with keys:\n       :logger-provider     - default `io.opentelemetry.api.logs.LoggerProvider`\n       :tracer-provider     - default `io.opentelemetry.api.trace.TracerProvider`\n       :via                 - \u2208 #{:sdk-extension-autoconfigure :global}\n       :auto-configured-sdk - `io.opentelemetry.sdk.OpenTelemetrySdk` or nil\n\n     Uses `AutoConfiguredOpenTelemetrySdk` when possible, or\n     `GlobalOpenTelemetry` otherwise.\n\n     See the relevant OpenTelemetry Java docs for details.\n\n     [1] Ref. <https://github.com/open-telemetry/opentelemetry-java>\"\n     (enc/compile-when impl/present:otel?\n       (delay\n         (or\n           ;; Via SDK autoconfiguration extension (when available)\n           (enc/compile-when\n             io.opentelemetry.sdk.autoconfigure.AutoConfiguredOpenTelemetrySdk\n             (enc/catching :common\n               (let [builder (io.opentelemetry.sdk.autoconfigure.AutoConfiguredOpenTelemetrySdk/builder)\n                     sdk    (.getOpenTelemetrySdk (.build builder))]\n                 {:logger-provider (.getLogsBridge     sdk)\n                  :tracer-provider (.getTracerProvider sdk)\n                  :via :sdk-extension-autoconfigure\n                  :auto-configured-sdk sdk})))\n\n           ;; Via Global (generally not recommended)\n           (let [g (io.opentelemetry.api.GlobalOpenTelemetry/get)]\n             {:logger-provider (.getLogsBridge     g)\n              :tracer-provider (.getTracerProvider g)\n              :via :global}))))))\n\n#?(:clj\n   (def ^:dynamic *otel-tracer*\n     \"Experimental, subject to change. Feedback welcome!\n\n     OpenTelemetry `Tracer` to use for Telemere's tracing signal creators\n     (`trace!`, `span!`, etc.), \u2208 #{nil io.opentelemetry.api.trace.Tracer Delay}.\n\n     Defaults to the provider in `otel-default-providers_`.\n     See also `otel-tracing?`.\"\n     (enc/compile-when impl/enabled:otel-tracing?\n       (delay\n         (when-let [^io.opentelemetry.api.trace.TracerProvider p\n                    (get (force otel-default-providers_) :tracer-provider)]\n           (do #_impl/viable-tracer (.get p \"Telemere\")))))))\n\n(comment (enc/qb 1e6 (force *otel-tracer*))) ; 51.23\n\n;;;; Signal creators\n;; - event!           [id   ] [id   opts/level] ; id     + ?level => allowed? ; Sole signal with descending main arg!\n;; - log!             [msg  ] [opts/level  msg] ; msg    + ?level => allowed?\n;; - error!           [error] [opts/id   error] ; error  + ?id    => given error\n;; - trace!           [form ] [opts/id    form] ; run    + ?id    => run result (value or throw)\n;; - spy!             [form ] [opts/level form] ; run    + ?level => run result (value or throw)\n;; - catch->error!    [form ] [opts/id    form] ; run    + ?id    => run value or ?return\n;; - signal!          [opts ]                   ;                 => allowed? / run result (value or throw)\n;; - uncaught->error! [opts/id]                 ;          ?id    => nil\n\n#?(:clj\n   (defmacro event!\n     \"[id] [id level-or-opts] => allowed?\"\n     {:doc      (impl/signal-docstring :event!)\n      :arglists (impl/signal-arglists  :event!)}\n     [& args]\n     (let [opts\n           (impl/signal-opts `event! (enc/get-source &form &env)\n             {:kind :event, :level :info} :id :level :dsc args)]\n       `(impl/signal! ~opts))))\n\n(comment (with-signal (event! ::my-id :info)))\n\n#?(:clj\n   (defmacro log!\n     \"[msg] [level-or-opts msg] => allowed?\"\n     {:doc      (impl/signal-docstring :log!)\n      :arglists (impl/signal-arglists  :log!)}\n     [& args]\n     (let [opts\n           (impl/signal-opts `log! (enc/get-source &form &env)\n             {:kind :log, :level :info} :msg :level :asc args)]\n       `(impl/signal! ~opts))))\n\n(comment (with-signal (log! :info \"My msg\")))\n\n#?(:clj\n   (defmacro error!\n     \"[error] [error id-or-opts] => error\"\n     {:doc      (impl/signal-docstring :error!)\n      :arglists (impl/signal-arglists  :error!)}\n     [& args]\n     (let [opts\n           (impl/signal-opts `error! (enc/get-source &form &env)\n             {:kind :error, :level :error} :error :id :asc args)\n           error-form (get opts :error)]\n\n       `(let [~'__error ~error-form]\n          (impl/signal! ~(assoc opts :error '__error))\n          ~'__error ; Unconditional!\n          ))))\n\n(comment (with-signal (throw (error! ::my-id (ex-info \"MyEx\" {})))))\n\n#?(:clj\n   (defmacro catch->error!\n     \"[form] [id-or-opts form] => run value or ?catch-val\"\n     {:doc      (impl/signal-docstring :catch-to-error!)\n      :arglists (impl/signal-arglists  :catch->error!)}\n     [& args]\n     (let [opts\n           (impl/signal-opts `catch->error! (enc/get-source &form &env)\n             {:kind :error, :level :error} ::__form :id :asc args)\n\n           rethrow? (if (contains? opts :catch-val) false (get opts :rethrow? true))\n           catch-val    (get       opts :catch-val)\n           catch-sym    (get       opts :catch-sym '__caught-error) ; Undocumented\n           form         (get       opts ::__form)\n           opts         (dissoc    opts ::__form :catch-val :catch-sym :rethrow?)]\n\n       `(enc/try* ~form\n          (catch :all ~catch-sym\n            (impl/signal! ~(assoc opts :error catch-sym))\n            (if ~rethrow? (throw ~catch-sym) ~catch-val))))))\n\n(comment\n  (with-signal (catch->error! ::my-id (/ 1 0)))\n  (with-signal (catch->error! {                  :msg [\"Error:\" __caught-error]} (/ 1 0)))\n  (with-signal (catch->error! {:catch-sym my-err :msg [\"Error:\" my-err]}         (/ 1 0))))\n\n#?(:clj\n   (defmacro trace!\n     \"[form] [id-or-opts form] => run result (value or throw)\"\n     {:doc      (impl/signal-docstring :trace!)\n      :arglists (impl/signal-arglists  :trace!)}\n     [& args]\n     (let [opts\n           (impl/signal-opts `trace! (enc/get-source &form &env)\n             {:kind :trace, :level :info, :msg `impl/default-trace-msg}\n             :run :id :asc args)\n\n           ;; :catch->error <id-or-opts> currently undocumented\n           [opts catch-opts] (impl/signal-catch-opts opts)]\n\n       (if catch-opts\n         `(catch->error! ~catch-opts (impl/signal! ~opts))\n         (do                        `(impl/signal! ~opts))))))\n\n(comment\n  (with-signal (trace! ::my-id (+ 1 2)))\n  (let [[_ [s1 s2]]\n        (with-signals\n          (trace! {:id :id1, :catch->error :id2}\n            (throw (ex-info \"Ex1\" {}))))]\n    [s2]))\n\n#?(:clj\n   (defmacro spy!\n     \"[form] [level-or-opts form] => run result (value or throw)\"\n     {:doc      (impl/signal-docstring :spy!)\n      :arglists (impl/signal-arglists  :spy!)}\n     [& args]\n     (let [opts\n           (impl/signal-opts `spy! (enc/get-source &form &env)\n             {:kind :spy, :level :info, :msg `impl/default-trace-msg}\n             :run :level :asc args)\n\n           ;; :catch->error <id-or-opts> currently undocumented\n           [opts catch-opts] (impl/signal-catch-opts opts)]\n\n       (if catch-opts\n         `(catch->error! ~catch-opts (impl/signal! ~opts))\n         (do                        `(impl/signal! ~opts))))))\n\n(comment (with-signal :force (spy! :info (+ 1 2))))\n\n#?(:clj\n   (defmacro uncaught->error!\n     \"Uses `uncaught->handler!` so that `error!` will be called for\n     uncaught JVM errors.\n\n     See `uncaught->handler!` and `error!` for details.\"\n     {:arglists (impl/signal-arglists :uncaught->error!)}\n     [& args]\n     (let [msg-form [\"Uncaught Throwable on thread:\" `(.getName ~(with-meta '__thread-arg {:tag 'java.lang.Thread}))]\n           opts\n           (impl/signal-opts `uncaught->error! (enc/get-source &form &env)\n             {:kind :error, :level :error, :msg msg-form}\n             :error :id :dsc (into ['__throwable-arg] args))]\n\n       `(uncaught->handler!\n          (fn [~'__thread-arg ~'__throwable-arg]\n            (impl/signal! ~opts))))))\n\n(comment\n  (macroexpand '(uncaught->error! ::uncaught))\n  (do\n    (uncaught->error! ::uncaught)\n    (enc/threaded :user (/ 1 0))))\n\n#?(:clj\n   (defn uncaught->handler!\n     \"Sets JVM's global `DefaultUncaughtExceptionHandler` to given\n       (fn handler [`<java.lang.Thread>` `<java.lang.Throwable>`]).\n\n     See also `uncaught->error!`.\"\n     [handler]\n     (Thread/setDefaultUncaughtExceptionHandler\n       (when handler ; falsey to remove\n         (reify   Thread$UncaughtExceptionHandler\n           (uncaughtException [_ thread throwable]\n             (handler            thread throwable)))))\n     nil))\n\n;;;;\n\n(defn dispatch-signal!\n  \"Dispatches given signal to registered handlers, supports `with-signal/s`.\n  Normally called automatically (internally) by signal creators, this util\n  is provided publicly since it's also handy for manually re/dispatching\n  custom/modified signals, etc.:\n\n    (let [original-signal (with-signal :trap (event! ::my-id1))\n          modified-signal (assoc original-signal :id ::my-id2)]\n      (dispatch-signal! modified-signal))\"\n\n  [signal]\n  (when-let [wrapped-signal (impl/wrap-signal signal)]\n    (impl/dispatch-signal! wrapped-signal)))\n\n(comment (dispatch-signal! (assoc (with-signal :trap (log! \"hello\")) :level :warn)))\n\n\n;;;; Interop\n\n#?(:clj\n   (enc/defaliases\n     impl/check-interop\n     streams/with-out->telemere\n     streams/with-err->telemere\n     streams/with-streams->telemere\n     streams/streams->telemere!\n     streams/streams->reset!))\n\n(comment (check-interop))\n\n;;;; Handlers\n\n(enc/defaliases\n  #?(:default consoles/handler:console)\n  #?(:cljs    consoles/handler:console-raw)\n  #?(:clj        files/handler:file))\n\n;;;; Init\n\n(impl/on-init\n\n  (enc/set-var-root! sigs/*default-handler-error-fn*\n    (fn [{:keys [error] :as m}]\n      (impl/signal!\n        {:kind     :error\n         :level    :error\n         :error     error\n         :location {:ns \"taoensso.encore.signals\"}\n         :id            :taoensso.encore.signals/handler-error\n         :msg      \"Error executing wrapped handler fn\"\n         :data     (dissoc m :error)})))\n\n  (enc/set-var-root! sigs/*default-handler-backp-fn*\n    (fn [data]\n      (impl/signal!\n        {:kind     :event\n         :level    :warn\n         :location {:ns \"taoensso.encore.signals\"}\n         :id            :taoensso.encore.signals/handler-back-pressure\n         :msg      \"Back pressure on wrapped handler fn\"\n         :data     data})))\n\n  (add-handler! :default/console (handler:console))\n\n  #?(:clj (enc/catching (require '[taoensso.telemere.tools-logging])))  ;    TL->Telemere\n  #?(:clj (enc/catching (require '[taoensso.telemere.slf4j])))          ; SLF4J->Telemere\n  #?(:clj (enc/catching (require '[taoensso.telemere.open-telemetry]))) ; Telemere->OTel\n  )\n\n;;;; Flow benchmarks\n\n(comment\n  {:last-updated    \"2024-08-15\"\n   :system          \"2020 Macbook Pro M1, 16 GB memory\"\n   :clojure-version \"1.12.0-rc1\"\n   :java-version    \"OpenJDK 22\"}\n\n  [(binding [impl/*sig-handlers* nil]\n     (enc/qb 1e6 ; [9.31 16.76 264.12 350.43]\n       (signal! {:level :info, :run nil, :elide? true }) ; 9\n       (signal! {:level :info, :run nil, :allow? false}) ; 17\n       (signal! {:level :info, :run nil, :allow? true }) ; 264\n       (signal! {:level :info, :run nil               }) ; 350\n       ))\n\n   (binding [impl/*sig-handlers* nil]\n     (enc/qb 1e6 ; [8.34 15.78 999.27 444.08 1078.83]\n       (signal! {:level :info, :run \"run\", :elide? true }) ; 8\n       (signal! {:level :info, :run \"run\", :allow? false}) ; 16\n       (signal! {:level :info, :run \"run\", :allow? true }) ; 1000\n       (signal! {:level :info, :run \"run\", :trace? false}) ; 444\n       (signal! {:level :info, :run \"run\"               }) ; 1079\n       ))\n\n   ;; For README \"performance\" table\n   (binding [impl/*sig-handlers* nil]\n     (enc/qb [8 1e6] ; [9.34 347.7 447.71 1086.65]\n       (signal! {:level :info, :elide? true             }) ; 9\n       (signal! {:level :info                           }) ; 348\n       (signal! {:level :info, :run \"run\", :trace? false}) ; 448\n       (signal! {:level :info, :run \"run\"               }) ; 1087\n       ))\n\n   ;; Full bench to handled signals\n   ;;   Sync           => 4240.6846 (~4.2m/sec)\n   ;;   Async dropping => 2421.9176 (~2.4m/sec)\n   (let [runtime-msecs 5000\n         n-procs (.availableProcessors (Runtime/getRuntime))\n         fp (enc/future-pool n-procs)\n         c  (java.util.concurrent.atomic.AtomicLong. 0)\n         p  (promise)]\n\n     (with-handler ::bench (fn [_] (.incrementAndGet c))\n       {:async nil} ; Sync\n       #_{:async {:mode :dropping, :n-threads n-procs}}\n       (let [t (enc/after-timeout runtime-msecs (deliver p (.get c)))]\n         (dotimes [_ n-procs]\n           (fp (fn [] (dotimes [_ 6e6] (signal! {:level :info})))))\n\n         (/ (double @p) (double runtime-msecs)))))])\n\n;;;;\n\n(comment\n  (with-handler :hid1 (handler:console) {} (log! \"Message\"))\n\n  (let [sig\n        (with-signal\n          (event! ::ev-id\n            {:data  {:a :A :b :b}\n             :error\n             (ex-info \"Ex2\" {:b :B}\n               (ex-info \"Ex1\" {:a :A}))}))]\n\n    (do      (let [hf (handler:file)]        (hf sig) (hf)))\n    (do      (let [hf (handler:console)]     (hf sig) (hf)))\n    #?(:cljs (let [hf (handler:console-raw)] (hf sig) (hf)))))\n\n(comment (let [[_ [s1 s2]] (with-signals (trace! ::id1 (trace! ::id2 \"form2\")))] s1))\n"],"x_google_ignoreList":[0]}