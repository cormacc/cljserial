{"version":3,"sources":["cljserial/app.cljs"],"mappings":";AAcA,GAAA,QAAAA,sCAAAC,0CAAAC;AAAA;AAAA,AAAA,AAASC,mBAAG,wBAAA,xBAACC;;AAOb,kEAAA,lEAACC,2IAAgC,CAACC,4EAAAA,8EAAAA;AAGlC,oEAAA,pEAACC;AAED,AAAA;AAAA,AAAA,IAAAC,gBAAA;IAAAC,SAAA;IAAAC,OAAA;IAAAC,OAAA;IAAAC,UAAA;AAAA,AAAA,oBAAA,iBAAAC,KAAAC;AAAA,AAAA,oBAAAD;AAAA,QAAAA,mCAAAA,iCAAAJ,OAAAC,KAAAC,KAAAC,WAAAC,cAAAJ,OAAAC,KAAAC,KAAAC;;AAAA;;;AAAA,IAAAG,SAAA,KAAAC;IAAAC,WAAA;IAAAC,UAAAC;IAAAC,kBAAA;IAAAC,QAAA;IAAAC,UAAAJ;IAAAK,eAAA;IAAAC,wBAAA,KAAAC,gBAAA;AAAA,AAAA;AAAA,IAAAC,wBAAA,KAAAC,8BAAA,IAAAZ,OAAAM,MAAA,2CAAA,gDAAA,gBAAA,oDAAA,GAAA,yDAAA,EAAA,sDAAA,sEAAAX,KAAA,GAAA,EAAA,8DAAA,KAAAD,OAAAE,KAAAC,QAAAgB,kCAAAC,gDAAAP,QAAA,KAAA,KAAA,uBAAA,KAAA,KAAA,KAAA,KAAA,KAAA,KAAA,KAAA;AAAA,AAAA,IAAAQ,qBAAAC;AAAA,AAAA,oBAAAD;AAAA,IAAAE,gCAAAF;AAAA,AAAA,QAAAE,8DAAAA,4DAAAN,yBAAAM,yCAAAN;;AAAA,AAAAA;;GAAA;AAAA,AAAA,AAAAO,6CAAA,KAAAC,qCAAAzB,OAAAC,KAAAC,KAAAC,QAAAY;;AAAA,oBAAAD;AAAA,QAAAA,6CAAAA,2CAAAC,yBAAAD,wBAAAC;;AAAA;;;AAAA;;;AAIA,2BAAA,3BAAMW,8DAAYC;AAAlB,AACE,OAACC,qBAAS,wBAAA,xBAACjC,oCAAuC,AAACkC,wBAAc,AAACC,iCAAeC,sBAAYJ;;AAI/F,qBAAA,rBAAuBK;AAAvB,AAGE,AAACC,iCAAgBC;;AAIjB,8BAAA,WAAAC,zCAACC;AAAD,AAAsB,0CAAA,mFAAAD,tHAACE;;;AAGvB,AAACC,2BAAYC;;AAIb,iHAAA,2EAAA,3LAACC,yDAAAA,8FAAAA,/BAA0BC,2EAAAA;;gDAGvB,AAACC,hDACD,mFAAA,WAAAC,9FAACC;AAAD,AAAS,wCAAA,KAAA,mFAAA,mFAAA,6DAAA,+DAAAD,xUAACT;;;AAEd,oDAAA,WAAAW,/DAACC,+BAAcf;AAAf,AAA2B,wCAAA,KAAA,mFAAA,mFAAA,6DAAA,sDAAAc,/TAACX;;;AAG5B,OAACa,4BAAarB","names":["js/cljserial","js/cljserial.app","js/cljserial.app.el","cljserial.app/el","js/document.getElementById","taoensso.telemere.add_handler_BANG_","taoensso.telemere/handler:console-raw","taoensso.telemere.set_min_level_BANG_","__run-fn-form","__kind","__ns","__id","__level","sf","taoensso.telemere.impl/*rt-sig-filter*","__inst","js/Date","__thread","__root0","taoensso.telemere.impl/*trace-root*","__otel-context1","__uid","__root1","__run-result","signal__47502__auto__","cljs.core/Delay","signal__47493__auto__","taoensso.telemere.impl/Signal","taoensso.telemere/*ctx*","taoensso.telemere.impl/*trace-parent*","temp__5821__auto__","taoensso.telemere/*middleware*","sig-middleware__47494__auto__","taoensso.telemere.impl/dispatch-signal!","taoensso.telemere.impl/WrappedSignal","cljserial.app/render-app","state","replicant.dom/render","cljserial.layout/render","stack.utils.router/=>links","cljserial.routes/all","cljserial.app/main","replicant.dom/set-dispatch!","cljserial.dispatch/handle-events","p1__62872#","stack.core/set-dispatch!","cljserial.dispatch/execute-actions","cljserial.model/init!","cljserial.routes/default","gadget.inspector/inspect","cljserial.model/!state","stack.utils.filestore/init+","p1__62873#","promesa.core.then","p1__62874#","stack.utils.router/start!","cljserial.model/watch!"],"sourcesContent":["(ns cljserial.app\n  (:require\n   [taoensso.telemere :as t]\n   [gadget.inspector :as inspector]\n   [replicant.dom :as r]\n   [promesa.core :as p]\n   [stack.core :as stack]\n   [stack.utils.router :as router]\n   [stack.utils.filestore :as filestore]\n   [cljserial.model :as model]\n   [cljserial.dispatch :as dispatch]\n   [cljserial.routes :as routes]\n   [cljserial.layout :as layout]))\n\n(defonce el (js/document.getElementById \"app-root\"))\n\n;; -- Logging ----------------------------------------------------------\n;; ... with telemere\n;;     See https://github.com/taoensso/telemere\n;; 1. Replace default console text handler with console-raw (for use with cljs-devtools / structured data)\n;; TODO: add a custom preamble function\n(t/add-handler! :default/console (t/handler:console-raw))\n;; (t/add-handler! :default/console (tu/handler:console-bling))\n\n(t/set-min-level! :debug)\n\n(t/log! \"Logging initialised!\")\n\n\n\n(defn render-app [state]\n  (r/render (js/document.getElementById \"app-root\") (layout/render (router/=>links routes/all) state)))\n\n;; Startup\n\n(defn ^:dev/after-load main []\n\n  ;;Wire our event-handler in to replicant\n  (r/set-dispatch! dispatch/handle-events)\n\n  ;;Set our generic dispatch function to use replicant dispatcher, minus the dom event interpolation\n  ;;This takes a single action rather than a vector of... for re-frame interop\n  (stack/set-dispatch! #(dispatch/execute-actions [%]))\n\n  ;;Initialise the app db\n  (model/init! routes/default)\n\n  ;;Wire in gadget inspector (dev data browser)\n  ;; See https://github.com/cjohansen/gadget-inspector\n  (inspector/inspect \"model\" model/!state)\n\n  ;;Reload our local filestore index\n  (-> (filestore/init+)\n      (p/then #(dispatch/handle-events nil [[:view/assoc :filestore %]])))\n\n  (router/start! routes/all #(dispatch/handle-events nil [[:view/assoc :route %]]))\n\n  ;; Wire in our renderer\n  (model/watch! render-app)\n\n;;;-----\n  )\n"]}