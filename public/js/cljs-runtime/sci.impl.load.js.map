{"version":3,"sources":["sci/impl/load.cljc"],"mappings":";AAQA,iCAAA,jCAAMA,0EAAkBC,eAAeC,cAAcC,mBAAaC,WAAWC;AAA7E,AACE,IAAMC,WAAS,AAAA,sFAASL;IAClBI,WAAK,wBAAA,oBAAA,1BAAMA,MAAK,AAACE,cAAIF;IACrBC,eAAS,AAACE,+CAAO,cAAAC,HAAKG;AAAL,AAAA,IAAAF,aAAAD;QAAA,AAAAE,4CAAAD,WAAA,IAAA,/DAASG;QAAT,AAAAF,4CAAAD,WAAA,IAAA,/DAAWI;AAAX,AACE,oBAAI,iBAAAC,oBAAK,cAAAC,bAASH;AAAd,AAAA,GAAAE;AAAA,IAAAA,wBAAiB,CAACZ,mDAAAA,sDAAAA,LAAaU,mCAAAA;AAA/B,AAAA,oBAAAE;AACK,SAAI,AAACE,cAAIZ,eACL,AAACa,0BAAUb,SAAKQ;;AAFzBE;;;AAAAA;;;AAGF,OAACI,8CAAMP,GAAG,CAACR,2CAAAA,8CAAAA,LAAWS,2BAAAA,IAAGC;;AACzBF;;GACJN,SACAJ;AATvB,AAUE,oEAAA,7DAACiB,8CAAMlB,uEAAuBK;;AAG/B,8BAAA,9BAAMc,oEAAeC,IAAIC,KAAKC,IAAIC,IAAIC;AAAtC,AACE,IAAMC,OAAK,AAAA,mFAAOJ;IACZG,cAAQ,kBAAIC,MACF,AAAClB,+CAAO,WAAKiB,YAAQC;AAAb,AACE,OAACC,YAAeF,YAAQC;GAAOD,QAAQ,WAAA,XAAQC,iBACzDD;IACVG,QAAM,AAACC,+CAAO,AAACC,gBAAM,6CAAKP,KAAI,wBAAA,IAAA,VAAMG,MACJ,sDAAWA;IAC3CL,gDAAQA,nBACA,uBAAA,mFAAA,yEAAA,nLAACU,6KAAuBH,sEAAcH,tQACtC,mRAAA,mFAAA,tWAACM,yaAAuBH,cAAOH;IACvCJ,UAAI,iBAAAW,qBAAe,AAAA,+EAAKV;AAApB,AAAA,oBAAAU;AAAA,YAAAA,RAASC;AAAT,AACE,kCAAA,mFAAA,sEAAA,pLAACF,mBAASV,6JAAiBG,gEAAaS,cAAOL;;AAC/CP;;;IACNA,UAAI,iBAAAW,qBAAgB,AAAA,qFAAQV;AAAxB,AAAA,oBAAAU;AAAA,aAAAA,TAASE;AAAT,AACE,IAAMC,SAAO,AAAA,uFAASb;AAAtB,AACE,OAACd,+CAAO,WAAKa,QAAIe;AAAT,AACE,IAAMC,UAAQ,AAACR,+CAAO,kDAAA,LAAKN,UAAS,4CAAKa;IACnCE,aAAW,AAACX,YAAeF,YAAQ,4CAAKW;IACxCA,YAAM,AAACG,4CAAIJ,OAAOC,MAAMA;AAF9B,gEAGMf,nBACA,2BAAA,mFAAA,sEAAA,pLAACU,gLAAsBP,gEAAaY,kBAAOC,rRAC3C,8RAAA,mFAAA,2EAAA,5bAACN,obAAuBM,wEAAgBC,thBACxC,kiBAAA,mFAAA,9mBAACP,irBAAuBM,gBAASC;GACzCjB,QAAIa;;AACdb;;;AAxBZ,AAyBEA;;AAGJ,8BAAA,9BAAMmB,oEAAUjB;AAAhB,AACE,0FAAA,nFAACkB,mDAAUlB,IAAI,qBAAA,rBAACmB;;AAErB,2CAAA,8FAAAC,zIAAMM,8FACHC,KAAK7B,IAAI8B,WAAWjD,cAAckD;AADrC,AAAA,IAAAR,aAAAD;IAAAC,iBAAA,AAAAC,4BAAAD;WAAAA,PAE2EtB;IAF3EwB,KAAA,AAAAP,4CAAAK,eAAA;IAAAR,QAAA,AAAAG,4CAAAK,eAAA;IAAAT,SAAA,AAAAI,4CAAAK,eAAA;IAAAG,UAAA,AAAAR,4CAAAK,eAAA;IAAAvC,OAAA,AAAAkC,4CAAAK,eAAA;IAAAI,MAAA,AAAAT,4CAAAK,eAAA;AAAA,AAGE,IAAAS,mBAEI,gCAAA,9BAAM,OAASD,uBACb,iBAAAE,aAAsB,AAACd,4BAASY;mBAAhC,AAAAzC,4CAAA2C,WAAA,IAAA,1EAAOF;WAAP,AAAAzC,4CAAA2C,WAAA,IAAA,lEAAgB5B;AAAhB,AACE,IAAAM,qBAAiB,AAACO,4CAAI,AAAA,yFAAUlB,KAAK+B;AAArC,AAAA,oBAAApB;AAAA,cAAAA,VAASP;AAAT,AACE,OAACL,4BAAcC,IAAI,mDAAA,nDAACF,8CAAMG,0DAAWI,MAAM0B,aAASD,WAAW1B;;AAC/DJ;;KAJN;AAFJ,AAAA,oBAAAgC;AAAAA;;AAOC,IAAMpD,iBAAe,mDAAA,mFAAA,tIAACsD,+CAAOlC,yJAAiB8B;IACxClD,qBAAe,kBAAI6C,IAAG,kCAAA,mFAAA,rHAACf,mBAAS9B,6JAAyB6C,WAAIM,UAC1CnD;IACnBG,aAAW,kBAAI+B,QAAO,WAAKqB;AAAL,AAAU,IAAAH,uBAAI,CAAClB,uCAAAA,4CAAAA,PAAOqB,yBAAAA;AAAZ,AAAA,oBAAAH;AAAAA;;AAAiBG;;GAClCC;IACftD,qBAAa,kBAAI4C,SACF,iBAAMW,WAAS,AAACnD,cAAIwC;AAApB,AACE,kBAAKS;AAAL,AACE,UAAK,AAACtC,0BAAUwC,SAASF;;KAC7B,qBAAA,rBAACG;IAChB1D,qBACA,kBAAMmC,OACA,kBAAM,iBAAAiB,uBAAI,AAAAO,mCAAA,kDAAoBxB;AAAxB,AAAA,GAAAiB;AAAAA;;AACIL;;0GADV,pGAEM,8FAAA,9FAAChD,+BAAiBC,mBAAeC,cAAcC,mBAAaC,mBAC5D,AAACyD,4BAAYzB,QACb,iBAAM9B,WAAS,AAAA,sFAASL;IAClBK,eAAS,AAACE,+CAAO,WAAKI,GAAG4C;AAAR,AACE,oBAAI,AAACrD,mBAAaqD;AAChB,OAACrC,8CAAMP,GAAG,CAACR,2CAAAA,gDAAAA,PAAWoD,6BAAAA,MACf,iBAAAxB,qBAAgB,AAACgC,eAAK9D,cAAcsD;AAApC,AAAA,oBAAAxB;AAAA,IAAA8B,aAAA9B;SAAA,AAAArB,4CAAAmD,WAAA,IAAA,hEAAUC;QAAV,AAAApD,4CAAAmD,WAAA,IAAA,/DAAahD;AAAb,AACEA;;AACA,MAAO,KAA6BmD,MACxB,kDAAA,LAAKT;;;;AAC1B5C;;GACJN,SACA8B;AAVvB,AAWE,wEAAA,jEAACjB,8CAAMlB,2EAAuBK;KAftC,AAgBY,kBAAO,KAA6B2D,MACxB;GAlB9B,2HAAA,zGAmBMjB,KAAI,AAAChD,+BAAiBC,mBAAeC,cAAcC,mBAAaC,WAAWC,MACrEJ;;IACZoB,UAAI,uBAAA,mFAAA,1GAACU,mBAASV,yJAAiB8B,mBAAYlD;AAhCjD,AAiCE,IAAAiE,2BAAqB,iBAAAE,WAAQlE;IAARkE,eAAA,EAAA,CAAAA,YAAA,OAAA,KAAA,AAAA,gFAAAA;IAAAA,eAAA,EAAA,CAAAA,gBAAA,OAAA,KAAA,eAAAA,fAA2BC;AAA3B,AAAA,GAAA,CAAAD,gBAAA;AAAA;;AAAA,OAAA,gHAAAA;;;AAArB,AAAA,oBAAAF;AAAA,AAAA,sBAAAA,lBAAWC;AAAX,AACE,IAAAG,iBAAA;AAAA,AAAA,+FAAAA,6CAAAA,3IAACH,gDAAAA,gEAAAA;;AADH;;AAEA9C;;;AAEL,+BAAA,/BAAMkD,sEAAgBlD,IAAIE;AAA1B,AACE,AAACiD,mDAAMnD,IAAI,WAAKA;AAAL,AACE,IAAMoD,cAAY,AAAA,kGAAcpD;AAAhC,AACE,GAAI,AAACH,0BAAUuD,YAAYlD;AACzBF;;AACA,AACE,IAAMqD,wBAAgB,uDAAA,AAAA,vDAACnB,+CAAOlC;AAA9B,AAIK,mDAAA,AAAAsD,nDAACH,mEAAOE,uBAAgBE,eAAKrD;;AAC9B,8DAAA,vDAACsD,+CAAOxD,4EACA,WAAKoD;AAAL,AACE,GAAI,oBAAA,nBAAMA;AAAV,sDACIlD;;AACF,OAACuD,6CAAKL,gBAAYlD;;;;;;AAfvD;;AAkBA,uCAAA,vCAAMwD,sFACHC,IAAIzD,IAAID;AADX,AAEE,IAAM2D,YAAK,AAAA,kFAAMD;UAAjB,AAAAL,NACMtD,sBAAK4D;IACLzD,MAAI,AAAC0D;IACL3D,UAAI,AAACgB,4CAAI,AAAA,+FAAalB,KAAKE,IAAIA;IACpB4D,gBAAQ,OAAS5D;AAJlC,AAKE,IAAA8B,mBACO,iBAAA,fAAM8B,eACJ,iBAAAC,aAAiB,AAAC5C,4BAASjB;cAA3B,AAAAZ,4CAAAyE,WAAA,IAAA,rEAAO7D;WAAP,AAAAZ,4CAAAyE,WAAA,IAAA,lEAAW1D;AAAX,AACE,IAAAwC,qBAAmB,AAAC3B,4CAAI,AAAA,yFAAUlB,KAAKE;AAAvC,AAAA,oBAAA2C;AAAA,AAAA,cAAAA,VAAWzC;AAAX,AACE,AAAC+C,mDAAMS,UAAK,WAAK5D;AAAL,AACE,OAACD,4BAAcC,QAAI,mDAAA,nDAACF,8CAAMG,0DAAWI,MAAMH,QAAIC,IAAIC;;;AAFnE;;AAAA;;KAFJ;AADP,AAAA,oBAAA4B;AAAAA;;AAOI,IAAArB,qBAAkB,AAAA,yFAAWV;AAA7B,AAAA,oBAAAU;AAAA,eAAAA,XAASqD;AAAT,AACE,OAACC,sBAAOL,UAAK,qDAAA,aAAA,2CAAA,7GAAChC,yCAA2B+B,IAAI3D,IAAIG,SAAQD,oGAAS8D;;AAClE,IAAAE,aAAoCjE;IAApCiE,iBAAA,AAAA1C,4BAAA0C;IAAAC,SAAA,AAAAjD,4CAAAgD,eAAA;IAAAE,aAAA,AAAAlD,4CAAAgD,eAAA;IACMG,aAAW,gDAAA,hDAACnD,4CAAIlB;IAChBsE,eAAQ,iBAAAtC,uBAAImC;AAAJ,AAAA,oBAAAnC;AAAAA;;AAAA,IAAAA,uBAAWoC;AAAX,AAAA,oBAAApC;AAAAA;;AAAsB,OAAA,8FAAa2B;;;;AAFjD,AAGE,IAAAhD,+BAAuB,gCAAA,KAAA,nBAAU2D,mBAAQ,AAACpD,4CAAImD,WAAWnE;AAAzD,AAAA,oBAAAS;AAAA,0BAAAA,tBAAS9B;AAAT,AACE,IAAM0F,gBAAQ,AAAA,yFAAUZ;AAAxB,AACE,oBAAI,iBAAAjE,oBAAK6E;AAAL,AAAA,oBAAA7E;AAAA,SACK,GAAK,AAACG,0BAAU,AAAA,kGAAcG,KAAKE,gBACnC,AAACsE,yBACkB,AAAUD,sBAAQrE;;AAH1CR;;;AAIF,AAAC+E,uEACA,iBAAMC,iBAAe,CAAA,0DAAA,TAAUxE;IACzBqE,cAAQ,AAACd,6CAAKc,cAAQrE;IACtBqE,cAAQ,gDAAA,hDAACI,gGAASzE,QAAIwE,iBAAgBH;AAF5C,AAGE,QAAA,2BAAgC,kDAAA,lDAACK,uDAAcL;KACjDrE;;AACD,AAAC+D,sBAAOL,UAAK,AAAChC,yCAA2B+B,IAAI3D,IAAIG,IAAItB,oBAAcqB,QAAID;;;AAC3E,IAAAU,+BAAiB,AAAA,0FAAUX;AAA3B,AAAA,oBAAAW;AAAA,oBAAAA,hBAASkE;AAAT,AACE,oBAAA,AAAAvB,hBAAMwB,gCAASC;AAAf,AACE,IAAApE,+BACS,iBAAAyE,WAAA,2CAAA,uEAAA,kEAAA,uDAAA,yDAAA,sFAAA,hRAAqBlF,kEACFA,2DACJyD,wDACC1D,qDACF,AAACoF,uBAAcP,uEACX,iBAAA9C,uBAAImC;AAAJ,AAAA,oBAAAnC;AAAAA;;AAAWoC;;;AAL7B,AAAA,kGAAAgB,qCAAAA,/HAACP,8CAAAA,wDAAAA;;AADV,AAAA,oBAAAlE;AAAA,IAAAqE,mBAAArE;IAAAqE,uBAAA,AAAAxD,4BAAAwD;iBAAA,AAAA9D,4CAAA8D,qBAAA,9EAAiBC;mBAAjB,AAAA/D,4CAAA8D,qBAAA,hFAAsBE;oBAAtB,AAAAhE,4CAAA8D,qBAAA,jFAA6BG;AAA7B,AAOE,AAGE,IAAMxB,2JAAQA,9CACA,kDAAA,6DAAA,/GAAC7D,9CACD,iMAAA,jMAACA,iQAAkBsE,hTACnB,4TAAA,5TAACZ,uXAAgB,WAAKe;AAAL,AACE,GAAI,YAAA,XAAMA;AAAV,0FACGrE;;AACD,OAACuD,6CAAKc,QAAQrE;;;AANjD,AAOE,oBAAMgF;AAAN,AACE,IAAA,AAAK,AAAA,AAAAK,mCAAA,gDACGR,0BAAiBD,cACjBW,4BAAmBR;;AAFtB,IAAA,AAAA,AAGE,IAAAS,qBAAA,AAAApC,gBAAEqC;AAAF,AAAA,CAAAD,mDAAAA,+EAAAA,9BAAqB/B,4DAAAA,9CAAIuB,4DAAAA;UAH3B,AAAA,AAAAM;iBAAL,GAAA,CAAAF,kBAIoC1C;AAJpC,cAAA0C,VAI8CM;AAJ9C,AAKO,qFAAA,rFAACzC,0DAAMS,UAAKiC,mFAAmBC,mEAAO5F;;AACtC,MAAO0F;;AANd,AAAA,MAAAN;;;;AADF;;AAQF,oBAAUH;AAAV;AAAA,AACE,AAAChC,mDAAMS,UAAK,WAAK5D;AAAL,AACE,IAAMqE,iBAAW,oDAAA,pDAACnD,4CAAIlB;IAChBnB,gBAAc,AAACqC,4CAAImD,eAAWnE;AADpC,AAEE,OAAC0B,yCAA2B+B,IAAI3D,QAAIG,IACRtB,cACAqB,QAAID;;;;AACpD,IAAA+B,6BAAI,gCAAA,dAAMsC,cACJ,iBAAAzB,qBAAyB,AAAC3B,4CAAImD,WAAWnE;AAAzC,AAAA,oBAAA2C;AAAA,AAAA,oBAAAA,hBAAWhE;AAAX,AACE,OAACoF,sBAAOL,UAAK,AAAChC,yCAA2B+B,IAAI3D,IAAIG,IAAItB,cAAcqB,QAAID;;AADzE;;KADF;AAAJ,AAAA,oBAAA+B;AAAAA;AAGI,MAAO,KAA6BY,MACxB,CAAA,kFAAA,TAAkC1C;;;;AACtD,MAAO,KAA6B0C,MAExB,CAAA,iFAAA,TAAiC1C;;;;AAExC,GAAU4D;AAAV;AAAA,AACE,AAACZ,6BAAeU,UAAK1D;;;AA5DlC;;;;AA+DV,+BAAA,/BAAM6F,sEAAWpC,IAAIqC,OAAO9F,IAAI+F;AAAhC,AACE,oBAAM,iBAAAvG,oBAAKsG;AAAL,AAAA,oBAAAtG;AAAY,2CAAA,nCAAM,4BAAA,5BAAU,AAACwG,eAAKhG;;AAAlCR;;;AAAN,AAEE,AAAC+E,uEAA0B,CAAA,uCAAA,wFAAA,5GAAwB,AAACyB,eAAKhG,qFACzB8F,+EACL9F;;AAJ7B;;AAKA,IAAMA,UAAI,kBAAI8F,QAAO,AAACxF,+CAAO,qDAAA,RAAKwF,wDAAU9F,gBAAMA;IAC5CD,OAAK,AAACkG,8CAAMC,mBAASH;AAD3B,AAEE,OAACvC,qCAAuBC,IAAIzD,QAAID;;AAQjC,AAAA,yBAAA,iCAAAoG,1DAAMM;AAAN,AAAA,IAAAL,qBAAA;AAAA,AAAA,IAAAC,0BAAA,AAAA;AAAA,AAAA,IAAAC,wBAAA;;AAAA,AAAA,GAAA,CAAAA,wBAAAD;AAAA,AAAA,AAAAD,wBAAA,CAAA,UAAAE;;AAAA,eAAA,CAAAA,wBAAA;;;;AAAA;;;;AAAA,IAAAC,uBAAA,EAAA,CAAA,MAAA,AAAAH,4BAAA,AAAA,KAAAI,qBAAA,AAAAJ,yBAAA,KAAA,IAAA,OAAA;AAAA,AAAA,OAAAK,4DAAA,CAAA,UAAA,MAAA,CAAA,UAAA,MAAA,CAAA,UAAA,MAAAF;;;AAAA,AAAA,CAAA,8DAAA,9DAAME,yEAAUhD,IAAIqC,OAAO9F,IAAM+F;AAAjC,AACE,OAACF,6BAAUpC,IAAIqC,OAAO9F,IAAI+F;;;AAD5B,CAAA,iDAAA,jDAAMU;;AAAN;AAAA,CAAA,2CAAA,WAAAC,tDAAMD;AAAN,AAAA,IAAAE,WAAA,AAAAC,gBAAAF;IAAAA,eAAA,AAAAG,eAAAH;IAAAI,WAAA,AAAAF,gBAAAF;IAAAA,eAAA,AAAAG,eAAAH;IAAAK,WAAA,AAAAH,gBAAAF;IAAAA,eAAA,AAAAG,eAAAH;AAAA,AAAA,IAAAM,qBAAA;AAAA,AAAA,OAAAA,wDAAAL,SAAAG,SAAAC,SAAAL;;;AAAA,AAGH;;;0BAAA,1BAAOO,4DAEJC,EAAEC;AAFL,AAGE,GAAI,cAAA1H,bAASyH;AACX,OAACE,eAAKF,EAAEC;;AACR,OAACE,+CAAOH,EAAEC;;;AAEd;;;+BAAA,/BAAOG,sEAEJJ;AAFH,AAGE,SAAI,cAAAzH,bAASyH,oCACT,EAAK,AAACK,wBAAQL,QACT,EACC,wBAAA,vBAAM,AAACM,iBAAON,iBACd,gCAAAO,/BAAU,AAACD,iBAAON;;AAE9B;;;;0BAAA,1BAAOQ,4DAGJjE,IAAIkE,GAAGC;AAHV,AAIE,IAAMC,aAAM,AAACT,eAAKO,GAAGC;IACfE,QAAM,AAACC,+CAAOC,yBAASH;IACvB9H,OAAK,AAACkI,mDAAWH,MAAM,+CAAA,/CAACI;IACxBL,iBAAM,AAACE,+CAAO,AAACI,qBAAWH,0BAAUH;AAH1C,AAKE,sBAAA,iFAAA,yDAAA,sDAAA,gEAAA,gEAAA,6DAAA,qEAAA,pdAAMO;IACAC,oBAAY,AAACC,cAAI,AAACC,+CAAOH,gBAAUN;AADzC,AAEE,GAAMO;AAAN,AACE,AAAC9D,uEAA0B,4DAAA,5DAAC0B,8CAAMuC,iDACA,kDAAA,lDAACC,sDAAaJ,oBAErBT;;AAJ7B;;AAMF,GAAU,AAACU,cAAIT;AAAf;AAAA,AACE,uEAAA,vEAACtD,mGAC0BqD;;;AAC7B,IAAAc,aAAA,AAAAJ,cAAYT;IAAZc,eAAA;IAAAC,eAAA;IAAAC,WAAA;;AAAA,AAAA,GAAA,AAAA,CAAAA,WAAAD;AAAA,UAAA,AAAAD,mDAAAE,zDAAQM;AAAR,AAAA,AACE,GAAI,AAAC7B,6BAAS6B;AACZ,yEAAA,zEAAClD,8CAAMQ,uBAAShD,SAAQ,AAACwD,wBAAUkC,IAAIpJ;;AACvC,IAAAqJ,mBAAuBD;IAAvBE,mBAAA,AAAAf,cAAAc;IAAAE,qBAAA,AAAA1C,gBAAAyC;IAAAA,uBAAA,AAAAxC,eAAAwC;mBAAAC,fAAOxD;2BAAPuD,vBAAgBxB;AAAhB,AACE,GAAM,iBAAA,hBAAM/B;AAAZ,AACE,uEAAA,vEAACvB,8FAC0BqD;;AAF7B;;AAGA,IAAA8B,mBAAA,AAAApB,cAAYT;IAAZ8B,qBAAA;IAAAC,qBAAA;IAAAC,iBAAA;;AAAA,AAAA,GAAA,AAAA,CAAAA,iBAAAD;AAAA,oBAAA,AAAAD,yDAAAE,zEAAQV;AAAR,AAAA,AACE,AAAClD,8CAAMQ,uBAAShD,IAAIqC,aAAO,AAACmB,wBAAUkC,cAAIpJ;;AAD5C;AAAA,eAAA2J;eAAAC;eAAAC;eAAA,CAAAC,iBAAA;;;;;;;AAAA,IAAAlH,2BAAA,AAAA2F,cAAAoB;AAAA,AAAA,GAAA/G;AAAA,AAAA,IAAA+G,uBAAA/G;AAAA,AAAA,GAAA,AAAAmG,6BAAAY;AAAA,IAAAX,wBAAA,AAAAC,sBAAAU;AAAA,AAAA,eAAA,AAAAT,qBAAAS;eAAAX;eAAA,AAAAG,gBAAAH;eAAA;;;;;;;AAAA,oBAAA,AAAAnC,gBAAA8C,hCAAQP;AAAR,AAAA,AACE,AAAClD,8CAAMQ,uBAAShD,IAAIqC,aAAO,AAACmB,wBAAUkC,cAAIpJ;;AAD5C;AAAA,eAAA,AAAA8G,eAAA6C;eAAA;eAAA;eAAA;;;;;;;;AAAA;;;;;;AAPN;AAAA,eAAAhB;eAAAC;eAAAC;eAAA,CAAAC,WAAA;;;;;;;AAAA,IAAAlG,qBAAA,AAAA2F,cAAAI;AAAA,AAAA,GAAA/F;AAAA,AAAA,IAAA+F,iBAAA/F;AAAA,AAAA,GAAA,AAAAmG,6BAAAJ;AAAA,IAAAK,kBAAA,AAAAC,sBAAAN;AAAA,AAAA,eAAA,AAAAO,qBAAAP;eAAAK;eAAA,AAAAG,gBAAAH;eAAA;;;;;;;AAAA,UAAA,AAAAnC,gBAAA8B,tBAAQS;AAAR,AAAA,AACE,GAAI,AAAC7B,6BAAS6B;AACZ,yEAAA,zEAAClD,8CAAMQ,uBAAShD,SAAQ,AAACwD,wBAAUkC,IAAIpJ;;AACvC,IAAAwJ,mBAAuBJ;IAAvBK,mBAAA,AAAAlB,cAAAiB;IAAAE,qBAAA,AAAA7C,gBAAA4C;IAAAA,uBAAA,AAAA3C,eAAA2C;mBAAAC,fAAO3D;2BAAP0D,vBAAgB3B;AAAhB,AACE,GAAM,iBAAA,hBAAM/B;AAAZ,AACE,uEAAA,vEAACvB,8FAC0BqD;;AAF7B;;AAGA,IAAAkC,mBAAA,AAAAxB,cAAYT;IAAZkC,qBAAA;IAAAC,qBAAA;IAAAC,iBAAA;;AAAA,AAAA,GAAA,AAAA,CAAAA,iBAAAD;AAAA,oBAAA,AAAAD,yDAAAE,zEAAQd;AAAR,AAAA,AACE,AAAClD,8CAAMQ,uBAAShD,IAAIqC,aAAO,AAACmB,wBAAUkC,cAAIpJ;;AAD5C;AAAA,eAAA+J;eAAAC;eAAAC;eAAA,CAAAC,iBAAA;;;;;;;AAAA,IAAAtH,+BAAA,AAAA2F,cAAAwB;AAAA,AAAA,GAAAnH;AAAA,AAAA,IAAAmH,uBAAAnH;AAAA,AAAA,GAAA,AAAAmG,6BAAAgB;AAAA,IAAAf,wBAAA,AAAAC,sBAAAc;AAAA,AAAA,eAAA,AAAAb,qBAAAa;eAAAf;eAAA,AAAAG,gBAAAH;eAAA;;;;;;;AAAA,oBAAA,AAAAnC,gBAAAkD,hCAAQX;AAAR,AAAA,AACE,AAAClD,8CAAMQ,uBAAShD,IAAIqC,aAAO,AAACmB,wBAAUkC,cAAIpJ;;AAD5C;AAAA,eAAA,AAAA8G,eAAAiD;eAAA;eAAA;eAAA;;;;;;;;AAAA;;;;;;AAPN;AAAA,eAAA,AAAAjD,eAAA6B;eAAA;eAAA;eAAA;;;;;;;;AAAA;;;;;;AAUJ,AAAA,6BAAA,qCAAAvC,lEAAM+D;AAAN,AAAA,IAAA9D,qBAAA;AAAA,AAAA,IAAAC,0BAAA,AAAA;AAAA,AAAA,IAAAC,wBAAA;;AAAA,AAAA,GAAA,CAAAA,wBAAAD;AAAA,AAAA,AAAAD,wBAAA,CAAA,UAAAE;;AAAA,eAAA,CAAAA,wBAAA;;;;AAAA;;;;AAAA,IAAAC,uBAAA,EAAA,CAAA,MAAA,AAAAH,4BAAA,AAAA,KAAAI,qBAAA,AAAAJ,yBAAA,KAAA,IAAA,OAAA;AAAA,AAAA,OAAA8D,gEAAA,CAAA,UAAA,MAAA3D;;;AAAA,AAAA,CAAA,kEAAA,lEAAM2D,6EACHzG,IAAMmE;AADT,AAEE,mCAAA,5BAACF,wBAAUjE,+DAAamE;;;AAF1B,CAAA,qDAAA,rDAAMsC;;AAAN;AAAA,CAAA,+CAAA,WAAAC,1DAAMD;AAAN,AAAA,IAAAE,WAAA,AAAAxD,gBAAAuD;IAAAA,eAAA,AAAAtD,eAAAsD;AAAA,AAAA,IAAAnD,qBAAA;AAAA,AAAA,OAAAA,wDAAAoD,SAAAD;;;AAAA,AAIA,AAACE,uBAAQC,kCAAyBJ;AAElC,AAAA,yBAAA,iCAAA/D,1DAAMoE;AAAN,AAAA,IAAAnE,qBAAA;AAAA,AAAA,IAAAC,0BAAA,AAAA;AAAA,AAAA,IAAAC,wBAAA;;AAAA,AAAA,GAAA,CAAAA,wBAAAD;AAAA,AAAA,AAAAD,wBAAA,CAAA,UAAAE;;AAAA,eAAA,CAAAA,wBAAA;;;;AAAA;;;;AAAA,IAAAC,uBAAA,EAAA,CAAA,MAAA,AAAAH,4BAAA,AAAA,KAAAI,qBAAA,AAAAJ,yBAAA,KAAA,IAAA,OAAA;AAAA,AAAA,OAAAmE,4DAAA,CAAA,UAAA,MAAAhE;;;AAAA,AAAA,CAAA,8DAAA,9DAAMgE,yEACH9G,IAAMmE;AADT,AAEE,mCAAA,5BAACF,wBAAUjE,wDAASmE;;;AAFtB,CAAA,iDAAA,jDAAM2C;;AAAN;AAAA,CAAA,2CAAA,WAAAC,tDAAMD;AAAN,AAAA,IAAAE,WAAA,AAAA7D,gBAAA4D;IAAAA,eAAA,AAAA3D,eAAA2D;AAAA,AAAA,IAAAxD,qBAAA;AAAA,AAAA,OAAAA,wDAAAyD,SAAAD;;;AAAA,AAIA,AAACH,uBAAQK,8BAAqBH;AAE9B,mCAAA,nCAAMI,8EAAoBlH,IAAImH;AAA9B,AACE,aAAA,AAAA,TAAMC;AAAN,AACE,IAAOD,YAAMA;;AAAb,AACE,oBAAMA;AAAN,AACE,IAAAE,aAAYF;QAAZ,AAAAxL,4CAAA0L,WAAA,IAAA,/DAAOxL;QAAP,AAAAF,4CAAA0L,WAAA,IAAA,/DAASvL;AAAT,AACE,IAAAwL,iBAAMzL;IAANyL,qBAAA,EAAA,CAAAA,0BAAAtD,oBAAA,AAAAsD,mBAAA;AAAA,AAAA,QAAAA;KAAA;AAEE,AAAC9H,mDAAM,AAAA,kFAAMQ,KACN;kBAAK3D;AAAL,AACE,IAAMG,MAAI,AAAC0D;AAAX,AACE,6DAAA,mFAAA,sEAAA,8DAAA,7QAACqH,kDAAUlL,yJAAiBG,2DAAW4K,2EAC5B,4DAAA,5DAACI,6CAAKC,kDAAU3L;;;;;KANxC;AAQE,AAAC0D,mDAAM,AAAA,kFAAMQ,KACN;kBAAK3D;AAAL,AACE,IAAMG,MAAI,AAAC0D;IACLwH,WAAS,mDAAA,mFAAA,tIAACnJ,+CAAOlC,yJAAiB+K;IAClCO,aAAW,AAACC,sBAAYF,SAAS5L;AAFvC,AAIE,6DAAA,mFAAA,zIAACyL,kDAAUlL,yJAAiBG,YACjBqL,gBAAMF;;;;;KAf9B;AAiBE,AAACnI,mDAAM,AAAA,kFAAMQ,KACN;kBAAK3D;AAAL,AACE,IAAMG,MAAI,AAAC0D;IACLQ,aAAW,AAAA,gGAAarE;IACxBpB,iBAAe,AAACsC,4CAAImD,WAAWlE;IAC/BkL,WAAS,mDAAA,mFAAA,tIAACnJ,+CAAOlC,yJAAiB+K;IAClCnM,qBACA,AAACO,+CAAO;sBAAAsM,JAAKE;AAAL,AAAA,IAAAD,aAAAD;oBAAA,AAAAnM,4CAAAoM,WAAA,IAAA,3EAAUE;eAAV,AAAAtM,4CAAAoM,WAAA,IAAA,tEAAwBG;AAAxB,4EACMF,nBACA,uBAAA,mFAAA,1GAACjL,kKAAkBmL,iBAAU,AAAC3K,4CAAImK,SAASO,jSAC3C,iTAAA,mFAAA,8DAAA,3bAACV,obAAkBH,2EAAiB,4DAAA,5DAACI,6CAAK5H,kDAAUqI;;CAC1DhN,eACAa;AAVd,AAWE,8BAAA,mFAAA,1GAACiB,mBAASV,yJAAiBG,YAAKvB;;;;;;AA9B7C,MAAA,KAAAgE,MAAA,CAAA,mEAAAqI;;;;AA+BA,eAAO,AAACa,gBAAMhB;;;;AAjClB;;;;;AAmCN,iCAAA,jCAAMiB,0EAAa/L,IAAI+K,OAAOiB;AAA9B,AACE,IAAM7L,MAAI,AAAC0D;IACLQ,aAAW,AAAA,gGAAarE;IACxBT,KAAG,iBAAAyC,mBAAI,AAACd,4CAAImD,WAAW0G;AAApB,AAAA,oBAAA/I;AAAAA;;AACI,MAAO,KAA6BY,MACxB,CAAA,6DAAsBmI;;;IACzCkB,KAAG,AAAC9F,8CAAMC,mBAAS4F;IACnBE,cAAY,AAACjE,+CAAOkE,wBAAQ,AAACC,eAAK7M;IAClCuB,SAAO,iBAAAkB,mBAAI,AAAA,uFAASiK;AAAb,AAAA,oBAAAjK;AAAAA;;AAAA;;;IACPN,UAAQ,AAACxC,cAAI,AAAA,0FAAU+M;IACvBI,QAAM,EAAI,6CAAA,7CAACC,+FAAO,AAAA,qFAAQL,MAClBC,YACA,iBAAAlK,mBAAI,AAAA,qFAAQiK;AAAZ,AAAA,oBAAAjK;AAAAA;;AAAA,IAAAA,uBAAgB,AAAA,mFAAOiK;AAAvB,AAAA,oBAAAjK;AAAAA;;AAA2BkK;;;;IACnCK,IAAE,kBAAM,iBAAA7M,oBAAK2M;AAAL,AAAA,oBAAA3M;AAAW,UAAK,AAAC8C,4BAAY6J;;AAA7B3M;;MAAN,mGAAA,nGACE,kBAAO,WAAA,NAA6BkD;IAExChE,iBAAe,AAACsC,4CAAImD,WAAWlE;IAC/BlB,WAAS,AAAA,sFAASL;IAClBK,eAAS,AAACE,+CAAO,WAAKF,aAASkD;AAAd,AACE,GAAA,AAAAvC,cAAQ,CAAC8B,wCAAAA,6CAAAA,PAAQS,0BAAAA;AACf,IAAM1C,IAAE,AAACyB,4CAAI3B,GAAG4C;AAAhB,AACE,oBAAU1C;AAAV;AAAA,AACE,MAAO,KACcmD,MAET,AAEE,kDAAA,LAAKT;;;;AACrB,OAACrC,8CAAMb,aAAS,iBAAA+C,mBAAI,CAAClB,uCAAAA,4CAAAA,PAAOqB,yBAAAA;AAAZ,AAAA,oBAAAH;AAAAA;;AAAiBG;;KAAK1C;;AACxCR;;GACJA,SACAoN;IACjBzN,qBAAe,6DAAA,7DAACkB,8CAAMlB,uEAAuBK;IAC7CoF,iBAAW,AAACvE,8CAAMuE,WAAWlE,IAAIvB;IACjCoB,UAAI,kDAAA,lDAACF,8CAAME,sEAAgBqE;AAjCjC,AAkCErE;;AAEJ,AAAA;;;;;2BAAA,mCAAAqG,9DAAMmG;AAAN,AAAA,IAAAlG,qBAAA;AAAA,AAAA,IAAAC,0BAAA,AAAA;AAAA,AAAA,IAAAC,wBAAA;;AAAA,AAAA,GAAA,CAAAA,wBAAAD;AAAA,AAAA,AAAAD,wBAAA,CAAA,UAAAE;;AAAA,eAAA,CAAAA,wBAAA;;;;AAAA;;;;AAAA,IAAAC,uBAAA,EAAA,CAAA,MAAA,AAAAH,4BAAA,AAAA,KAAAI,qBAAA,AAAAJ,yBAAA,KAAA,IAAA,OAAA;AAAA,AAAA,OAAAkG,8DAAA,CAAA,UAAA,MAAA,CAAA,UAAA,MAAA/F;;;AAAA,AAAA,CAAA,gEAAA,hEAAM+F,2EAIH7I,IAAIoH,OAASiB;AAJhB,AAKE,GAAI,6CAAA,AAAA,7CAACM,sHAAgBvB;AACnB,AAACF,iCAAmBlH,IAAIqI;;AACxB,AAAC7I,mDAAM,AAAA,kFAAMQ,KAAKoI,+BAAYhB,OAAOiB;;;AAPzC;;;AAAA,CAAA,mDAAA,nDAAMQ;;AAAN;AAAA,CAAA,6CAAA,WAAAC,xDAAMD;AAAN,AAAA,IAAAE,WAAA,AAAA5F,gBAAA2F;IAAAA,eAAA,AAAA1F,eAAA0F;IAAAE,WAAA,AAAA7F,gBAAA2F;IAAAA,eAAA,AAAA1F,eAAA0F;AAAA,AAAA,IAAAvF,qBAAA;AAAA,AAAA,OAAAA,wDAAAwF,SAAAC,SAAAF;;;AAAA,AAUA,AAAClC,uBAAQqC,gCAAuBJ","names":["sci.impl.load/handle-refer-all","the-current-ns","the-loaded-ns","include-sym?","rename-sym","only","referred","cljs.core/set","cljs.core.reduce","p__72923","vec__72924","cljs.core.nth","ns","k","v","and__5000__auto__","cljs.core/Symbol","cljs.core/not","cljs.core/contains?","cljs.core.assoc","sci.impl.load/handle-js-lib","env","opts","lib","cnn","the-lib","path","js/Reflect.get","clazz","cljs.core.symbol","cljs.core/munge","cljs.core/assoc-in","temp__5821__auto__","alias","refers","rename","refer","sub-sym","the-sublib","cljs.core.get","sci.impl.load/lib+path","clojure.string.split","cljs.core/re-pattern","p__72986","map__72987","cljs.core/--destructure-map","as","exclude","use","sci.impl.load/handle-require-libspec-env","_ctx","current-ns","lib-name","or__5002__auto__","vec__73031","cljs.core.get_in","sym","cljs.core/identity","excludes","cljs.core/constantly","cljs.core/keyword-identical?","cljs.core/sequential?","vec__73090","_k","cljs.core/find","js/Error","temp__5823__auto__","on-loaded","G__73094","cljs.core/meta","G__73108","sci.impl.load/add-loaded-lib","cljs.core.swap_BANG_","loaded-libs","loaded-libs-var","cljs.core/deref","cljs.core/conj","cljs.core.update","cljs.core.conj","sci.impl.load/handle-require-libspec","ctx","env*","sci.impl.utils/current-ns-name","js-lib?","vec__73157","as-alias","cljs.core/reset!","map__73175","reload","reload-all","namespaces","reload*","loading","cljs.core/nat-int?","sci.impl.utils.throw_error_with_location","lib-emphasized","cljs.core.replace","clojure.string.join","load-fn","curr-ns","sci.impl.utils/current-ns","map__73216","file","source","handled","G__73215","sci.impl.types/getName","e73235","sci.impl.vars/push-thread-bindings","sci.impl.vars/pop-thread-bindings","sci.impl.utils/current-file","fexpr__73241","sci.impl.utils/eval-string*","e","cljs.core/update","cljs.core/dissoc","sci.impl.load/load-lib*","prefix","options","cljs.core/name","cljs.core.apply","cljs.core/hash-map","var_args","args__5732__auto__","len__5726__auto__","i__5727__auto__","argseq__5733__auto__","cljs.core/IndexedSeq","sci.impl.load/load-lib","seq73269","G__73270","cljs.core/first","cljs.core/next","G__73271","G__73272","self__5711__auto__","sci.impl.load/prependss","x","coll","cljs.core/cons","cljs.core.concat","sci.impl.load/libspec?","cljs.core/vector?","cljs.core/second","cljs.core/Keyword","sci.impl.load/load-libs","kw","args","args*","flags","cljs.core.filter","cljs.core/keyword?","cljs.core.interleave","cljs.core.repeat","cljs.core/complement","supported","unsupported","cljs.core/seq","cljs.core.remove","cljs.core/str","cljs.core.interpose","seq__73323","chunk__73324","count__73325","i__73326","cljs.core/chunked-seq?","c__5525__auto__","cljs.core/chunk-first","cljs.core/chunk-rest","cljs.core/count","arg","vec__73367","seq__73368","first__73369","vec__73390","seq__73391","first__73392","seq__73370","chunk__73371","count__73372","i__73373","seq__73393","chunk__73394","count__73395","i__73396","sci.impl.load/eval-require","seq73422","G__73423","cljs.core/vreset!","sci.impl.utils/eval-require-state","sci.impl.load/eval-use","seq73448","G__73450","sci.impl.utils/eval-use-state","sci.impl.load/eval-refer-clojure","exprs","ns-sym","vec__73467","G__73471","cljs.core.update_in","cljs.core.fnil","cljs.core/into","other-ns","other-vars","cljs.core/select-keys","cljs.core/merge","p__73491","vec__73492","acc","original-name","new-name","cljs.core/nnext","sci.impl.load/eval-refer*","filters","fs","public-keys","cljs.core/symbol?","cljs.core/keys","to-do","cljs.core._EQ_","_","sci.impl.load/eval-refer","seq73542","G__73543","G__73544","sci.impl.utils/eval-refer-state"],"sourcesContent":["(ns sci.impl.load\n  {:no-doc true}\n  (:require\n   [clojure.string :as str]\n   [sci.impl.types :as types]\n   [sci.impl.utils :as utils :refer [kw-identical? throw-error-with-location]]\n   [sci.impl.vars :as vars]))\n\n(defn handle-refer-all [the-current-ns the-loaded-ns include-sym? rename-sym only]\n  (let [referred (:refers the-current-ns)\n        only (when only (set only))\n        referred (reduce (fn [ns [k v]]\n                           (if (and (symbol? k) (include-sym? k)\n                                    (or (not only)\n                                        (contains? only k)))\n                             (assoc ns (rename-sym k) v)\n                             ns))\n                         referred\n                         the-loaded-ns)]\n    (assoc the-current-ns :refers referred)))\n\n#?(:cljs\n   (defn handle-js-lib [env opts lib cnn the-lib]\n     (let [path (:path opts)\n           the-lib (if path\n                     (reduce (fn [the-lib path]\n                               (js/Reflect.get the-lib path)) the-lib (.split path \".\"))\n                     the-lib)\n           clazz (symbol (munge (str lib (when path\n                                           (str \"$\")) path)))\n           env (-> env\n                   (assoc-in [:class->opts clazz :class] the-lib)\n                   (assoc-in [:raw-classes clazz] the-lib))\n           env (if-let [alias (:as opts)]\n                 (assoc-in env [:namespaces cnn :imports alias] clazz)\n                 env)\n           env (if-let [refers (:refer opts)]\n                 (let [rename (:rename opts)]\n                   (reduce (fn [env refer]\n                             (let [sub-sym (symbol (str lib \"$$\" (str refer)))\n                                   the-sublib (js/Reflect.get the-lib (str refer))\n                                   refer (get rename refer refer)]\n                               (-> env\n                                   (assoc-in [:namespaces cnn :imports refer] sub-sym)\n                                   (assoc-in [:class->opts sub-sym :class] the-sublib)\n                                   (assoc-in [:raw-classes sub-sym] the-sublib))))\n                           env refers))\n                 env)]\n       env)))\n\n#?(:cljs\n   (defn lib+path [lib]\n     (str/split lib (re-pattern \"\\\\$\") 2)))\n\n(defn handle-require-libspec-env\n  [_ctx env current-ns the-loaded-ns lib-name\n   {:keys [:as :refer :rename :exclude :only :use] :as #?(:clj _opts :cljs opts)}]\n  (or\n   #?(:cljs\n      (when (string? lib-name)\n        (let [[lib-name path] (lib+path lib-name)]\n          (if-let [the-lib (get (:js-libs env) lib-name)]\n            (handle-js-lib env (assoc opts :path path) lib-name current-ns the-lib)\n            env))))\n   (let [the-current-ns (get-in env [:namespaces current-ns]) ;; = ns-data?\n         the-current-ns (if as (assoc-in the-current-ns [:aliases as] lib-name)\n                            the-current-ns)\n         rename-sym (if rename (fn [sym] (or (rename sym) sym))\n                        identity)\n         include-sym? (if exclude\n                        (let [excludes (set exclude)]\n                          (fn [sym]\n                            (not (contains? excludes sym))))\n                        (constantly true))\n         the-current-ns\n         (cond refer\n               (cond (or (kw-identical? :all refer)\n                         use)\n                     (handle-refer-all the-current-ns the-loaded-ns include-sym? rename-sym nil)\n                     (sequential? refer)\n                     (let [referred (:refers the-current-ns)\n                           referred (reduce (fn [ns sym]\n                                              (if (include-sym? sym)\n                                                (assoc ns (rename-sym sym)\n                                                       (if-let [[_k v] (find the-loaded-ns sym)]\n                                                         v\n                                                         (throw (new #?(:clj Exception :cljs js/Error)\n                                                                     (str sym \" does not exist\")))))\n                                                ns))\n                                            referred\n                                            refer)]\n                       (assoc the-current-ns :refers referred))\n                     :else (throw (new #?(:clj Exception :cljs js/Error)\n                                       (str \":refer value must be a sequential collection of symbols\"))))\n               use (handle-refer-all the-current-ns the-loaded-ns include-sym? rename-sym only)\n               :else the-current-ns)\n         env (assoc-in env [:namespaces current-ns] the-current-ns)]\n     (when-let [on-loaded (some-> the-loaded-ns :obj meta :sci.impl/required-fn)]\n       (on-loaded {}))\n     env)))\n\n(defn add-loaded-lib [env lib]\n  (swap! env (fn [env]\n               (let [loaded-libs (:loaded-libs env)]\n                 (if (contains? loaded-libs lib)\n                   env\n                   (do\n                     (let [loaded-libs-var (get-in env '[:namespaces clojure.core *loaded-libs*])]\n                       #?(:clj\n                          (dosync (alter @loaded-libs-var conj lib))\n                          :cljs\n                          (swap! @loaded-libs-var conj lib)))\n                     (-> (update env :loaded-libs\n                                 (fn [loaded-libs]\n                                   (if (nil? loaded-libs)\n                                     #{lib}\n                                     (conj loaded-libs lib))))))))))\n  nil)\n\n(defn handle-require-libspec\n  [ctx lib opts]\n  (let [env* (:env ctx)\n        env @env*\n        cnn (utils/current-ns-name)\n        lib (get (:ns-aliases env) lib lib)\n        #?@(:cljs [js-lib? (string? lib)])]\n    (or #?(:cljs\n           (when js-lib?\n             (let [[lib path] (lib+path lib)]\n               (when-let [the-lib (get (:js-libs env) lib)]\n                 (swap! env* (fn [env]\n                               (handle-js-lib env (assoc opts :path path) lib cnn the-lib)))\n                 {}))))\n        (if-let [as-alias (:as-alias opts)]\n          (reset! env* (handle-require-libspec-env ctx env cnn nil lib {:as as-alias}))\n          (let [{:keys [:reload :reload-all]} opts\n                namespaces (get env :namespaces)\n                reload* (or reload reload-all (:reload-all ctx))]\n            (if-let [the-loaded-ns (when-not reload* (get namespaces lib))]\n              (let [loading (:loading ctx)]\n                (if (and loading\n                         (not (contains? (:loaded-libs env) lib))\n                         (nat-int? #?(:clj (.indexOf ^clojure.lang.PersistentVector loading lib)\n                                      :cljs (.indexOf loading lib))))\n                  (throw-error-with-location\n                   (let [lib-emphasized (str \"[ \" lib \" ]\")\n                         loading (conj loading lib)\n                         loading (replace {lib lib-emphasized} loading)]\n                     (str \"Cyclic load dependency: \" (str/join \"->\" loading)))\n                   lib)\n                  (reset! env* (handle-require-libspec-env ctx env cnn the-loaded-ns lib opts))))\n              (if-let [load-fn (:load-fn env)]\n                (let [curr-ns @utils/current-ns]\n                  (if-let [{:keys [file source handled]}\n                           (load-fn {:namespace lib ;; old name\n                                     :libname lib\n                                     :ctx ctx\n                                     :opts opts\n                                     :ns (types/getName curr-ns)\n                                     :reload (or reload reload-all)})]\n                    (do\n                      ;; (.println System/err \"source\")\n                      ;; (.println System/err source)\n                      (let [ctx (-> ctx\n                                    (assoc :bindings {})\n                                    (assoc :reload-all reload-all)\n                                    (update :loading (fn [loading]\n                                                       (if (nil? loading)\n                                                         [lib]\n                                                         (conj loading lib)))))]\n                        (when source\n                          (try (vars/with-bindings\n                                 {utils/current-ns curr-ns\n                                  utils/current-file file}\n                                 (@utils/eval-string* ctx source))\n                               (catch #?(:clj Exception :cljs js/Error) e\n                                 (swap! env* update :namespaces dissoc lib)\n                                 (throw e)))))\n                      (when-not handled\n                        (swap! env* (fn [env]\n                                      (let [namespaces (get env :namespaces)\n                                            the-loaded-ns (get namespaces lib)]\n                                        (handle-require-libspec-env ctx env cnn\n                                                                    the-loaded-ns\n                                                                    lib opts))))))\n                    (or (when reload*\n                          (when-let [the-loaded-ns (get namespaces lib)]\n                            (reset! env* (handle-require-libspec-env ctx env cnn the-loaded-ns lib opts))))\n                        (throw (new #?(:clj Exception :cljs js/Error)\n                                    (str \"Could not find namespace: \" lib \".\"))))))\n                (throw (new #?(:clj Exception :cljs js/Error)\n\n                            (str \"Could not find namespace \" lib \".\")))))\n            #?(:clj (add-loaded-lib env* lib)\n               :cljs (when-not js-lib?\n                       (add-loaded-lib env* lib)))\n            nil)))))\n\n(defn load-lib* [ctx prefix lib options]\n  (when (and prefix (pos? (.indexOf (name lib) #?(:clj (int \\.)\n                                                  :cljs \\.))))\n    (throw-error-with-location (str \"Found lib name '\" (name lib) \"' containing period with prefix '\"\n                                    prefix \"'.  lib names inside prefix lists must not contain periods\")\n                               lib))\n  (let [lib (if prefix (symbol (str prefix \\. lib)) lib)\n        opts (apply hash-map options)]\n    (handle-require-libspec ctx lib opts)))\n\n#?(:clj\n   (let [load-lock (Object.)]\n     (defn load-lib [ctx prefix lib & options]\n       (locking load-lock\n         (load-lib* ctx prefix lib options))))\n   :cljs\n   (defn load-lib [ctx prefix lib & options]\n     (load-lib* ctx prefix lib options)))\n\n(defn- prependss\n  \"Prepends a symbol or a seq to coll\"\n  [x coll]\n  (if (symbol? x)\n    (cons x coll)\n    (concat x coll)))\n\n(defn- libspec?\n  \"Returns true if x is a libspec\"\n  [x]\n  (or (symbol? x)\n      (and (vector? x)\n           (or\n            (nil? (second x))\n            (keyword? (second x))))))\n\n(defn- load-libs\n  \"Loads libs, evaling libspecs, prefix lists, and flags for\n  forwarding to load-lib\"\n  [ctx kw args]\n  (let [args* (cons kw args)\n        flags (filter keyword? args*)\n        opts (interleave flags (repeat true))\n        args* (filter (complement keyword?) args*)]\n    ;; check for unsupported options\n    (let [supported #{:as :reload :reload-all :require :use :verbose :refer}\n          unsupported (seq (remove supported flags))]\n      (when unsupported\n        (throw-error-with-location (apply str \"Unsupported option(s) supplied: \"\n                                          (interpose \\, unsupported))\n                                   ;; best effort location\n                                   args)))\n    ;; check a load target was specified\n    (when-not (seq args*)\n      (throw-error-with-location \"Nothing specified to load\"\n                                 args))\n    (doseq [arg args*]\n      (if (libspec? arg)\n        (apply load-lib ctx nil (prependss arg opts))\n        (let [[prefix & args*] arg]\n          (when (nil? prefix)\n            (throw-error-with-location \"prefix cannot be nil\"\n                                       args))\n          (doseq [arg args*]\n            (apply load-lib ctx prefix (prependss arg opts))))))))\n\n(defn eval-require\n  [ctx & args]\n  (load-libs ctx :require args))\n\n(vreset! utils/eval-require-state eval-require)\n\n(defn eval-use\n  [ctx & args]\n  (load-libs ctx :use args))\n\n(vreset! utils/eval-use-state eval-use)\n\n(defn eval-refer-clojure [ctx exprs]\n  (let [ns-sym 'clojure.core]\n    (loop [exprs exprs]\n      (when exprs\n        (let [[k v] exprs]\n          (case k\n            :exclude\n            (swap! (:env ctx)\n                   (fn [env]\n                     (let [cnn (utils/current-ns-name)]\n                       (update-in env [:namespaces cnn :refer ns-sym :exclude]\n                                  (fnil into #{}) v))))\n            :only\n            (swap! (:env ctx)\n                   (fn [env]\n                     (let [cnn (utils/current-ns-name)\n                           other-ns (get-in env [:namespaces ns-sym])\n                           other-vars (select-keys other-ns v)]\n                       ;; TODO: this is wrong, don't merge these vars into the current namespace\n                       (update-in env [:namespaces cnn]\n                                  merge other-vars))))\n            :rename\n            (swap! (:env ctx)\n                   (fn [env]\n                     (let [cnn (utils/current-ns-name)\n                           namespaces (:namespaces env)\n                           the-current-ns (get namespaces cnn)\n                           other-ns (get-in env [:namespaces ns-sym])\n                           the-current-ns\n                           (reduce (fn [acc [original-name new-name]]\n                                     (-> acc\n                                         (assoc-in [:refers new-name] (get other-ns original-name))\n                                         (update-in [:refer ns-sym :exclude] (fnil conj #{}) original-name)))\n                                   the-current-ns\n                                   v)]\n                       (assoc-in env [:namespaces cnn] the-current-ns)))))\n          (recur (nnext exprs)))))))\n\n(defn eval-refer* [env ns-sym filters]\n  (let [cnn (utils/current-ns-name)\n        namespaces (:namespaces env)\n        ns (or (get namespaces ns-sym)\n               (throw (new #?(:clj Exception :cljs js/Error)\n                           (str \"No namespace: \" ns-sym))))\n        fs (apply hash-map filters)\n        public-keys (filter symbol? (keys ns))\n        rename (or (:rename fs) {})\n        exclude (set (:exclude fs))\n        to-do (if (= :all (:refer fs))\n                public-keys\n                (or (:refer fs) (:only fs) public-keys))\n        _ (when (and to-do (not (sequential? to-do)))\n            (throw (new #?(:clj Exception :cljs js/Error)\n                        \":only/:refer value must be a sequential collection of symbols\")))\n        the-current-ns (get namespaces cnn)\n        referred (:refers the-current-ns)\n        referred (reduce (fn [referred sym]\n                           (if-not (exclude sym)\n                             (let [v (get ns sym)]\n                               (when-not v\n                                 (throw (new #?(:clj java.lang.IllegalAccessError\n                                                :cljs js/Error)\n                                             ;; TODO: handle private vars\n                                             (if false ;; (get (ns-interns ns) sym)\n                                               (str sym \" is not public\")\n                                               (str sym \" does not exist\")))))\n                               (assoc referred (or (rename sym) sym) v))\n                             referred))\n                         referred\n                         to-do)\n        the-current-ns (assoc the-current-ns :refers referred)\n        namespaces (assoc namespaces cnn the-current-ns)\n        env (assoc env :namespaces namespaces)]\n    env))\n\n(defn eval-refer\n  \"The function equivalent of :refer is handled differently than what we\n  did before (this is more like what Clojure itself does.) For\n  referring clojure.core we still use the old code.\"\n  [ctx ns-sym & filters]\n  (if (= 'clojure.core ns-sym)\n    (eval-refer-clojure ctx filters)\n    (swap! (:env ctx) eval-refer* ns-sym filters))\n  nil)\n\n(vreset! utils/eval-refer-state eval-refer)\n"],"x_google_ignoreList":[0]}