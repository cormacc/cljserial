{"version":3,"sources":["rewrite_clj/node/seq.cljc"],"mappings":"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","names":["this__5300__auto__","k__5301__auto__","this__5302__auto__","k65918","else__5303__auto__","G__65944","cljs.core/Keyword","tag","format-string","wrap-length","seq-fn","children","cljs.core.get","__extmap","this__5320__auto__","f__5321__auto__","init__5322__auto__","cljs.core.reduce","ret__5323__auto__","p__65960","vec__65964","k__5324__auto__","cljs.core.nth","v__5325__auto__","this__5315__auto__","writer__5316__auto__","opts__5317__auto__","pr-pair__5318__auto__","keyval__5319__auto__","cljs.core/pr-sequential-writer","cljs.core.concat","cljs.core/PersistentVector","G__65917","cljs.core/RecordIter","cljs.core/-iterator","cljs.core/nil-iter","this__5298__auto__","__meta","this__5295__auto__","__hash","this__5304__auto__","cljs.core/count","this__5296__auto__","h__5111__auto__","coll__5297__auto__","cljs.core/hash-unordered-coll","this65919","other65920","cljs.core._EQ_","cljs.core/PROTOCOL_SENTINEL","this__5310__auto__","k__5311__auto__","cljs.core/contains?","cljs.core.dissoc","cljs.core/-with-meta","cljs.core.into","cljs.core/not-empty","this__5307__auto__","G__66008","this__5308__auto__","k__5309__auto__","pred__66015","cljs.core/keyword-identical?","expr__66016","cljs.core.assoc","this__5313__auto__","cljs.core/seq","cljs.core/MapEntry","this__5299__auto__","this__5305__auto__","entry__5306__auto__","cljs.core/vector?","cljs.core/-nth","cljs.core/-conj","rewrite-clj.node.seq/SeqNode","this__5346__auto__","cljs.core/List","writer__5347__auto__","cljs.core/-write","G__65921","extmap__5342__auto__","G__66049","cljs.core/record?","rewrite-clj.node.seq/->SeqNode","rewrite-clj.node.seq/map->SeqNode","_node","opts","G__65993","rewrite_clj.node.protocols.sexprs","rewrite-clj.node.protocols/sum-lengths","rewrite-clj.node.protocols/concat-strings","rewrite_clj.interop.simple_format","node","children'","rewrite-clj.node.protocols/make-printable!","p1__66057#","list-node-seq-fn","cljs.core.apply","cljs.core/list","rewrite-clj.node.seq/list-node","rewrite-clj.node.seq/vector-node","cljs.core/vec","rewrite-clj.node.seq/set-node","cljs.core/set","p1__66062#","map-seq-fn","cljs.core/hash-map","rewrite-clj.node.seq/map-node"],"sourcesContent":["(ns ^:no-doc rewrite-clj.node.seq\n  (:require [rewrite-clj.interop :as interop]\n            [rewrite-clj.node.protocols :as node]))\n\n#?(:clj (set! *warn-on-reflection* true))\n\n;; ## Nodes\n\n(defrecord SeqNode [tag\n                    format-string\n                    wrap-length\n                    seq-fn\n                    children]\n  node/Node\n  (tag [_node] tag)\n  (node-type [_node] :seq)\n  (printable-only? [_node] false)\n  (sexpr* [_node opts]\n    (seq-fn (node/sexprs children opts)))\n  (length [_node]\n    (+ wrap-length (node/sum-lengths children)))\n  (string [_node]\n    (->> (node/concat-strings children)\n         (interop/simple-format format-string)))\n\n  node/InnerNode\n  (inner? [_node] true)\n  (children [_node] children)\n  (replace-children [node children']\n    (assoc node :children children'))\n  (leader-length [_node]\n    (dec wrap-length))\n\n  Object\n  (toString [node]\n    (node/string node)))\n\n(node/make-printable! SeqNode)\n\n;; ## Constructors\n\n(let [;; re-use seq-fn for all instances so equals works\n      list-node-seq-fn #(apply list %)]\n  (defn list-node\n    \"Create a node representing a list with `children`.\n\n   ```Clojure\n   (require '[rewrite-clj.node :as n])\n\n   (-> (n/list-node [(n/token-node 1)\n                     (n/spaces 1)\n                     (n/token-node 2)\n                     (n/spaces 1)\n                     (n/token-node 3)])\n       n/string)\n   ;; => \\\"(1 2 3)\\\"\n   ```\"\n    [children]\n    (->SeqNode :list \"(%s)\" 2 list-node-seq-fn children)))\n\n(defn vector-node\n  \"Create a node representing a vector with `children`.\n\n   ```Clojure\n   (require '[rewrite-clj.node :as n])\n\n   (-> (n/vector-node [(n/token-node 1)\n                       (n/spaces 1)\n                       (n/token-node 2)\n                       (n/spaces 1)\n                       (n/token-node 3)])\n       n/string)\n   ;; => \\\"[1 2 3]\\\"\n   ```\"\n  [children]\n  (->SeqNode :vector \"[%s]\" 2 vec children))\n\n(defn set-node\n  \"Create a node representing a set with `children`.\n\n   ```Clojure\n   (require '[rewrite-clj.node :as n])\n\n   (-> (n/set-node [(n/token-node 1)\n                    (n/spaces 1)\n                    (n/token-node 2)\n                    (n/spaces 1)\n                    (n/token-node 3)])\n       n/string)\n   ;; => \\\"#{1 2 3}\\\"\n   ```\n\n   Note that rewrite-clj allows the, technically illegal, set with duplicate values:\n   ```Clojure\n   (-> (n/set-node [(n/token-node 1)\n                    (n/spaces 1)\n                    (n/token-node 1)])\n       (n/string))\n   ;; => \\\"#{1 1}\\\"\n   ```\n\n   See [docs on sets with duplicate values](/doc/01-user-guide.adoc#sets-with-duplicate-values).\"\n  [children]\n  (->SeqNode :set \"#{%s}\" 3 set children))\n\n(let [;; re-use seq-fn for all instances for equality\n      map-seq-fn #(apply hash-map %)]\n  (defn map-node\n    \"Create a node representing a map with `children`.\n   ```Clojure\n   (require '[rewrite-clj.node :as n])\n\n   (-> (n/map-node [(n/keyword-node :a)\n                    (n/spaces 1)\n                    (n/token-node 1)\n                    (n/spaces 1)\n                    (n/keyword-node :b)\n                    (n/spaces 1)\n                    (n/token-node 2)])\n       (n/string))\n   ;; => \\\"{:a 1 :b 2}\\\"\n   ```\n\n   Note that rewrite-clj allows the, technically illegal, unbalanced map:\n   ```Clojure\n   (-> (n/map-node [(n/keyword-node :a)])\n       (n/string))\n   ;; => \\\"{:a}\\\"\n   ```\n   See [docs on unbalanced maps](/doc/01-user-guide.adoc#unbalanced-maps).\n\n   Rewrite-clj also allows the, also technically illegal, map with duplicate keys:\n   ```Clojure\n   (-> (n/map-node [(n/keyword-node :a)\n                    (n/spaces 1)\n                    (n/token-node 1)\n                    (n/spaces 1)\n                    (n/keyword-node :a)\n                    (n/spaces 1)\n                    (n/token-node 2)])\n       (n/string))\n   ;; => \\\"{:a 1 :a 2}\\\"\n   ```\n   See [docs on maps with duplicate keys](/doc/01-user-guide.adoc#maps-with-duplicate-keys).\"\n    [children]\n    (->SeqNode :map \"{%s}\" 2 map-seq-fn children)))\n"],"x_google_ignoreList":[0]}