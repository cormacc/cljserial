{"version":3,"sources":["cljserial/utils/webbluetooth.cljs"],"mappings":"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","names":["cljserial.utils.webbluetooth/NORDIC-UART-SERVICE","cljserial.utils.webbluetooth/SILICON-LABS-SPP","cljserial.utils.webbluetooth/NEUROMOD-SPS","cljserial.utils.webbluetooth/SUPPORTED-SERVICES","cljserial.utils.webbluetooth/ALL-DEV-OPTIONS","cljserial.utils.webbluetooth/DEFAULT_OPTIONS","cljserial.utils.webbluetooth/DEVICE-FILTERS","cljserial.utils.webbluetooth/ServiceUuid","cljserial.utils.webbluetooth/SerialRxCharUuid","cljserial.utils.webbluetooth/SerialTxCharUuid","cljserial.utils.webbluetooth/describe-device-filter","pf","cuerdas.core.format","cljserial.utils.webbluetooth/get-webbluetooth-entrypoint","js/navigator","cljserial.utils.webbluetooth/is-supported?","cljserial.utils.webbluetooth/request-device+","filter-options","js/goog.debug.LOGGING_ENABLED","lambdaisland.glogi.log","cljs.core/identity","cljs.core/clj->js","cljserial.utils.webbluetooth/describe-device","device","var_args","args__5775__auto__","len__5769__auto__","i__5770__auto__","argseq__5776__auto__","cljs.core/IndexedSeq","cljserial.utils.webbluetooth/await-device","p__55330","map__55331","cljs.core/--destructure-map","cljs.core.get","seq55322","self__5755__auto__","cljs.core/seq","on-success","on-failure","c__33560__auto__","cljs.core.async.chan","cljs.core.async.impl.dispatch/run","f__33561__auto__","switch__33463__auto__","state_55336","state_val_55337","inst_55332","promesa.protocols/-promise","inst_55333","___43690__auto__","promesa.protocols/-mcat","___43658__auto__","inst_55334","cljs.core.async.impl.ioc-helpers/return-chan","statearr-55345","state-machine__33464__auto__","ret-value__33465__auto__","result__33466__auto__","cljs.core/keyword-identical?","ex__33467__auto__","e55350","statearr-55352","statearr-55354","cljs.core/first","state__33562__auto__","statearr-55356","cljs.core.async.impl.ioc-helpers/USER-START-IDX","cljs.core.async.impl.ioc-helpers/run-state-machine-wrapped","cljserial.utils.webbluetooth/device-gatt-connect+","cljserial.utils.webbluetooth/await-device-gatt-connect","p__55362","map__55363","seq55359","state_55372","state_val_55373","inst_55364","inst_55366","inst_55368","inst_55369","inst_55370","statearr-55377","e55382","statearr-55384","statearr-55386","statearr-55392","promesa.core.then","gatt","promesa.core.catch$","e","cljserial.utils.webbluetooth/gatt-get-service+","cljserial.utils.webbluetooth/await-gatt-get-service","p__55416","map__55417","seq55410","state_55428","state_val_55429","inst_55421","inst_55423","inst_55424","inst_55425","inst_55426","statearr-55444","e55447","statearr-55448","statearr-55451","statearr-55453","service","cljserial.utils.webbluetooth/service-get-characteristic+","char-uuid","cljserial.utils.webbluetooth/await-service-get-tx-characteristic","p__55473","map__55477","seq55461","state_55484","state_val_55485","inst_55478","inst_55479","inst_55480","inst_55481","inst_55482","statearr-55497","e55498","statearr-55499","statearr-55500","statearr-55504","characteristic","cljserial.utils.webbluetooth/await-service-get-rx-characteristic","p__55511","map__55512","seq55506","state_55522","state_val_55523","inst_55513","inst_55514","inst_55515","inst_55518","inst_55519","statearr-55553","e55556","statearr-55557","statearr-55558","statearr-55569","cljserial.utils.webbluetooth/service-write-value-without-response","tx-char","value","cljserial.utils.webbluetooth/forget-device","p__55626","map__55627","seq55606","state_55633","state_val_55634","inst_55628","inst_55629","inst_55630","inst_55631","statearr-55645","e55646","statearr-55647","statearr-55648","statearr-55653"],"sourcesContent":["(ns cljserial.utils.webbluetooth\n  \"Utilities and Malli schema relating to the Web Bluetooth API.\n\n  See the following references:\n  - https://developer.mozilla.org/en-US/docs/Web/API/Bluetooth\n  - https://github.com/WebBluetoothCG/web-bluetooth\n  - https://webbluetoothcg.github.io/web-bluetooth/\n  N.B. the WebBluetoothCG docs have more detail, but the Mozilla docs are more readable in many cases\n\n  Valid identifiers etc. are made available by the SIG in YAML format in a public GIT repo here:\n  https://bitbucket.org/bluetooth-SIG/public/src/main/assigned_numbers/\n  Could potentially read this at build or run time and integrate here....\n  \"\n  (:require\n   [cuerdas.core :as str]\n   [cljs.core.async :as async]\n   [malli.core :as m]\n   [promesa.core :as p]\n   [lambdaisland.glogi :as log]))\n\n;; Nordic UART Service definition\n;; This is a custom service (no standardized serial port service is provided by the Bluetooth standard over GATT)\n;; https://developer.nordicsemi.com/nRF_Connect_SDK/doc/latest/nrf/libraries/bluetooth_services/services/nus.html\n;; The notification arrives when 40 bytes of data are available (Nordic implementation)\n(def ^:const NORDIC-UART-SERVICE {:uuid \"6e400001-b5a3-f393-e0a9-e50e24dcca9e\"  ;; Vendor specific\n                                  :desc \"Nordic UART Service\"\n                                  :advt true\n                                  :name \"Nordic_UART_Service\"  ;; This should be a regex to match the advertising string\n                                  :chars {:rx {:uuid \"6e400003-b5a3-f393-e0a9-e50e24dcca9e\"\n                                               :desc \"RX Characteristic\"\n                                               :write true\n                                               :write-no-response true}\n                                          :tx {:uuid \"6e400002-b5a3-f393-e0a9-e50e24dcca9e\"\n                                               :desc \"TX Characteristic\"\n                                               :read true\n                                               :rotify true}}})\n\n;; Silicon Labs Serial Port Profile definition\n;; This is a custom service (no standardized serial port service is provided by the Bluetooth standard over GATT)\n;; This service uses the same characteristic for rx and tx operations\n(def ^:const SILICON-LABS-SPP {:uuid \"4880c12c-fdcb-4077-8920-a450d7f9b907\"\n                               :desc \"Silicon Labs SPP Service\"\n                               :advt true\n                               :name \"SPP Service\"  ;; This should be a regex to match the advertising string\n                               :chars {:rx {:uuid \"fec26ec4-6d71-4442-9f81-55bc21d658d6\"\n                                            :desc \"SPP Data\"\n                                            :write-no-response true}\n                                       :tx {:uuid \"fec26ec4-6d71-4442-9f81-55bc21d658d6\"\n                                            :desc \"SPP Data\"\n                                            :read true\n                                            :rotify true}}})\n\n;; Neuromod Serial Port Service definition\n;; This is a custom service (no standardized serial port service is provided by the Bluetooth standard over GATT)\n;; TBD UUID\n(def ^:const NEUROMOD-SPS {:uuid \"TBD SERVICE UUID\"\n                           :desc \"Nordic UART Service\"\n                           :advt true\n                           :name \"Lenire Controller\"  ;; This should be a regex to match the advertising string\n                           :chars {:rx {:uuid \"TDB RX CHAR UUID\"\n                                        :desc \"RX Characteristic\"\n                                        :write true\n                                        :write-without-response true}\n                                   :tx {:uuid \"TDB TX CHAR UUID\"\n                                        :desc \"TX Characteristic\"\n                                        :read true\n                                        :rotify true}}})\n\n;; List of supported services\n(def ^:const SUPPORTED-SERVICES [(:uuid NORDIC-UART-SERVICE)])\n                                 ;;(:uuid SILICON-LABS-SPP)  ;; Not supported :-)\n                                 ;;(:uuid NEUROMOD-SPS)])    ;; Not implemented :-D\n\n;; Options to filter devices\n\n;; Show all devices in advertising mode\n;; optionalServices is needed to connect a service\n(def ^:const ALL-DEV-OPTIONS {:acceptAllDevices true :optionalServices SUPPORTED-SERVICES})\n\n;; Nordic UART Service filter\n(def ^:const DEFAULT_OPTIONS {:filters [{:services [(:uuid NORDIC-UART-SERVICE)]}]})\n\n;; Service filter for WebBluetooth requestDevice method\n(def ^:const DEVICE-FILTERS [{:name \"Default (Nordic UART Service)\" :options DEFAULT_OPTIONS}\n                             {:name \"All devices\" :options ALL-DEV-OPTIONS}])\n\n;; Hardcoded service uuids \n(def ServiceUuid (-> NORDIC-UART-SERVICE :uuid))\n(def SerialRxCharUuid (-> NORDIC-UART-SERVICE :chars :rx :uuid))\n(def SerialTxCharUuid (-> NORDIC-UART-SERVICE :chars :tx :uuid))\n\n;; Describe options\n(defn describe-device-filter [pf]\n  (str/format \"%s\" (:name pf)))\n\n;; Serial port over BLE implementation\n\n(defn get-webbluetooth-entrypoint []\n  (.-bluetooth js/navigator))\n\n(defn is-supported? [] (not (nil? (get-webbluetooth-entrypoint))))\n\n(defn- request-device+ [filter-options]\n  (log/info :device/request \"Requesting device\")\n  (log/info :device/request filter-options)\n  (log/info :device/request (if is-supported? (str \"Web Bluetooth supported\") (str \"Web Bluetooth supported\")))\n  (.requestDevice (get-webbluetooth-entrypoint) (clj->js filter-options)))\n\n(defn describe-device [device]\n  ;; Return only the name for now\n  (.-name ^js device))\n\n(defn await-device [& {:keys [filter-options on-success on-failure] :or {filter-options nil}}]\n  (async/go (p/let [device (request-device+ filter-options)]\n              (if device (on-success device) (on-failure))\n              (log/info :device/acquired (str \"Got device \" (describe-device device))))))\n\n(defn- device-gatt-connect+ [device]\n  (log/info :device/connect-attempt (describe-device device))\n  (.connect (.-gatt ^js device)))\n\n(defn await-device-gatt-connect [& {:keys [device on-success on-failure]}]\n  (async/go (-> (device-gatt-connect+ device)\n                (p/then (fn [gatt]\n                          (log/info :device/connect-success gatt)\n                          (on-success gatt)))\n                (p/catch (fn [e]\n                           (log/error :device/connect-failure e)\n                           (on-failure)\n                           nil)))))\n\n(defn- gatt-get-service+ [gatt]\n  (log/info :device/get-service (str gatt))  ;; todo describe-service\n  (.getPrimaryService ^js gatt ServiceUuid))\n\n(defn await-gatt-get-service [& {:keys [gatt on-success on-failure]}]\n  (async/go (-> (gatt-get-service+ gatt)\n                (p/then (fn [service]\n                          (log/info :device/get-service service)\n                          (on-success service)))\n                (p/catch (fn [e]\n                           (log/error :device/get-service-failure e)\n                           (on-failure)\n                           nil)))))\n\n(defn- service-get-characteristic+ [service char-uuid]\n  (log/info :device/get-characteristic char-uuid)\n  (.getCharacteristic ^js service (clj->js char-uuid)))\n\n(defn await-service-get-tx-characteristic [& {:keys [service on-success on-failure]}]\n  (async/go (-> (service-get-characteristic+ service SerialTxCharUuid)\n                (p/then (fn [characteristic]\n                          (log/info :device/get-characteristic characteristic)\n                          (on-success characteristic)))\n                (p/catch (fn [e]\n                           (log/error :device/get-characteristic-failure e)\n                           (on-failure)\n                           nil)))))\n\n(defn await-service-get-rx-characteristic [& {:keys [service on-success on-failure]}]\n  (async/go (-> (service-get-characteristic+ service SerialRxCharUuid)\n                (p/then (fn [characteristic]\n                          (log/info :device/get-characteristic characteristic)\n                          (on-success characteristic)))\n                (p/catch (fn [e]\n                           (log/error :device/get-characteristic-failure e)\n                           (on-failure)\n                           nil)))))\n\n(defn service-write-value-without-response [tx-char value]\n  (log/info :device/write value)\n  (.writeValueWithoutResponse ^js tx-char value))\n\n(defn forget-device\n  \"Close and 'forget' the connected device (i.e. relinquish the access permissions).\n  See https://developer.mozilla.org/en-US/docs/Web/API/BluetoothDevice\"\n  [& {:keys [device on-success on-failure]}]\n  (async/go (-> (.forget ^js device)\n               ;; The promise resolves to nil\n                (p/then on-success)\n                (p/catch (fn [e]\n                           (log/error :device/forget-failure e)\n                           (on-failure e))))))\n\n;; ;;TODO Add flag for graceful exit?\n;; ;;     Currently when we forget/disconnect, there's an error in the console\n;; ;;     Harmless, but noisy/inelegant\n;; (defn go-read-as [{:keys [port byte-stream-transformer handler]}]\n;;   (async/go\n;;     (let [reader (-> (.-readable port)\n;;                      (byte-stream-transformer)\n;;                      (.getReader))]\n;;       (try\n;;         (loop [response (<p! (.read reader))]\n;;           (when response\n;;               ;; N.B. converted javascript hashmap keys are strings rather than keywords...\n;;               ;; N.B. 'done' flag is a mechanism to allow aborting a read via reader.cancel()\n;;               ;;      ... though we're not respecting that here (yet)\n;;             (let [{:strs [value _done]} (js->clj response)\n;;                     ;;if we want to work with binary data later, this will convert bytearr to string\n;;                     ;;bytes-as-str (apply str (map char (vec value)))\n;;                   ]\n;;               (handler value)))\n;;           (recur (<p! (.read reader))))\n;;         (catch js/Error e\n;;           (log/error :port/read-failure e))\n;;         (finally\n;;           (log/debug :port/release-read-lock port)\n;;           (.releaseLock reader))))))\n\n\n;; (defn as-byte-readable [readable]\n;;   ;;This one's an NOP\n;;   readable)\n\n;; (defn as-text-readable [readable]\n;;   (.pipeThrough readable (js/TextDecoderStream.)))\n\n;; (defn go-read-text [port handler]\n;;   (go-read-as {:port port\n;;                :handler handler\n;;                :byte-stream-transformer as-text-readable}))\n\n;; (defn go-read-bytes [port handler]\n;;   (go-read-as {:port port\n;;                :handler handler\n;;                :byte-stream-transformer as-byte-readable}))\n\n;; (defn get-read-channel [port]\n;;   (let [byte-channel (async/chan)\n;;         byte-handler (fn [new-bytes] (async/>! byte-channel new-bytes))]\n;;     (go-read-bytes port byte-handler)\n;;     ; return the channel\n;;     byte-channel))\n\n;; (defn write [port command]\n;;   (let [writer (.getWriter (.-writable port))\n;;         encoder (js/TextEncoder.)]\n;;     (log/debug :port/tx-line command)\n;;     (.write writer (.encode encoder command))\n;;     (.releaseLock writer)))\n"]}