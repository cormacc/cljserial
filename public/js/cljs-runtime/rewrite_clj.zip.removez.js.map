{"version":3,"sources":["rewrite_clj/zip/removez.cljc"],"mappings":"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","names":["rewrite-clj.zip.removez/node-depth","zloc","cljs.core/iterate","rewrite-clj.custom-zipper.core/up","cljs.core.take_while","cljs.core/identity","cljs.core/count","rewrite-clj.zip.removez/has-trailing-linebreak-at-eoi?","and__5000__auto__","cljs.core._EQ_","cljs.core/not","rewrite-clj.zip.move/right","rewrite-clj.custom-zipper.core/right","cljs.core/some","rewrite-clj.zip.whitespace/linebreak?","var_args","G__66455","rewrite-clj.zip.removez/left-ws-trim","js/Error","rewrite_clj.zip.removez.left_ws_trim","rewrite-clj.zip.whitespace/whitespace?","p?","rewrite-clj.zip.move/rightmost?","rewrite-clj.zip.move/leftmost?","rewrite-clj.custom-zipper.utils/remove-left-while","G__66459","rewrite-clj.zip.removez/right-ws-trim","rewrite_clj.zip.removez.right_ws_trim","rewrite-clj.custom-zipper.utils/remove-right-while","rewrite-clj.zip.removez/right-ws-trim-keep-trailing-linebreak","right-trimmed","rewrite_clj.zip.whitespace.insert_newline_right","rewrite-clj.zip.removez/remove-with-trim","left-ws-trim-fn","right-ws-trim-fn","rewrite-clj.custom-zipper.core/remove","G__66471","rewrite_clj.zip.whitespace.skip_whitespace","rewrite-clj.custom-zipper.core/prev","%","rewrite-clj.zip.removez/remove","rewrite-clj.zip.removez/remove-preserve-newline","p1__66477#","ws-pred-fn","p1__66478#","p1__66479#"],"sourcesContent":["(ns ^:no-doc rewrite-clj.zip.removez\n  (:refer-clojure :exclude [remove])\n  (:require [rewrite-clj.custom-zipper.core :as zraw]\n            [rewrite-clj.custom-zipper.utils :as u]\n            [rewrite-clj.zip.move :as m]\n            [rewrite-clj.zip.whitespace :as ws]))\n\n#?(:clj (set! *warn-on-reflection* true))\n\n(defn- node-depth\n  \"Return current node location depth in `zloc`, top is 0.\"\n  [zloc]\n  (->> (iterate zraw/up zloc)\n       (take-while identity)\n       count\n       dec))\n\n(defn- has-trailing-linebreak-at-eoi?\n  \"Returns true when current node is last node in zipper and trailing whitespace contains\n  at least 1 newline.\"\n  [zloc]\n  (and (= 1 (node-depth zloc))\n       (not (m/right zloc))\n       (->> (iterate zraw/right zloc)\n            (take-while identity)\n            (some ws/linebreak?))))\n\n(defn- left-ws-trim\n  ([zloc]\n   (left-ws-trim zloc ws/whitespace?))\n  ([zloc p?]\n   (if (or (m/rightmost? zloc)\n           (m/leftmost? zloc))\n     (u/remove-left-while zloc p?)\n     zloc)))\n\n(defn- right-ws-trim\n  ([zloc]\n   (right-ws-trim zloc ws/whitespace?))\n  ([zloc p?]\n   (u/remove-right-while zloc p?)))\n\n(defn- right-ws-trim-keep-trailing-linebreak [zloc]\n  (let [right-trimmed (right-ws-trim zloc)]\n    (if (has-trailing-linebreak-at-eoi? zloc)\n      (ws/insert-newline-right right-trimmed)\n      right-trimmed)))\n\n(defn- remove-with-trim\n  [zloc left-ws-trim-fn right-ws-trim-fn]\n  (->> zloc\n       left-ws-trim-fn\n       right-ws-trim-fn\n       zraw/remove\n       (ws/skip-whitespace zraw/prev)))\n\n(defn remove\n  \"Return `zloc` with current node removed. Returned zipper location\n   is moved to the first non-whitespace node preceding removed node in a depth-first walk.\n   Removes whitespace appropriately.\n\n  - `[1 |2  3]    => [|1 3]`\n  - `[1 |2]       => [|1]`\n  - `[|1 2]       => |[2]`\n  - `[|1]         => |[]`\n  - `[  |1  ]     => |[]`\n  - `[1 [2 3] |4] => [1 [2 |3]]`\n  - `[|1 [2 3] 4] => |[[2 3] 4]`\n\n   If the removed node is a rightmost sibling, both leading and trailing whitespace\n   is removed, otherwise only trailing whitespace is removed.\n\n   The result is that a following element (no matter whether it is on the same line\n   or not) will end up at same positon (line/column) as the removed one.\n   If a comment lies betwen the original node and the neighbour this will not hold true.\n\n   If the removed node is at end of input and is trailed by 1 or more newlines,\n   a single trailing newline will be preserved.\n\n   Use [[remove*]] to remove node without removing any surrounding whitespace.\"\n  [zloc]\n  {:pre [zloc]\n   :post [%]}\n  (remove-with-trim zloc\n                    left-ws-trim\n                    right-ws-trim-keep-trailing-linebreak))\n\n(defn remove-preserve-newline\n  \"Same as [[remove]] but preserves newlines.\n   Specifically: will trim all whitespace - or whitespace up to first linebreak if present.\"\n  [zloc]\n  {:pre [zloc]\n   :post [%]}\n  (let [ws-pred-fn #(and (ws/whitespace? %) (not (ws/linebreak? %)))]\n    (remove-with-trim zloc\n                      #(left-ws-trim % ws-pred-fn)\n                      #(right-ws-trim % ws-pred-fn))))\n"],"x_google_ignoreList":[0]}