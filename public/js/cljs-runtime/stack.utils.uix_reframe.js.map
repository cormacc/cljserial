{"version":3,"sources":["stack/utils/uix_reframe.cljs"],"mappings":"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","names":["stack.utils.uix-reframe/cleanup-ref","ref","temp__5823__auto__","temp-ref","cljs.core/remove-watch","watching","p1__88639#","stack.utils.uix-reframe/use-batched-subscribe","uix.hooks.alpha/use-callback","uix.core/jsfy-deps","listener","listeners","or__5002__auto__","cljs.core.atom","cljs.core.swap_BANG_","cljs.core/conj","cljs.core/disj","cljs.core/deref","cljs.core/empty?","stack.utils.uix-reframe/use-sync-external-store","subscribe","get-snapshot","js/module$node_modules$use_sync_external_store$with_selector.useSyncExternalStoreWithSelector","cljs.core/identity","cljs.core/=","stack.utils.uix-reframe/run-reaction","key","rat","on-change","_","js/module$node_modules$scheduler$index.unstable_scheduleCallback","js/module$node_modules$scheduler$index.unstable_ImmediatePriority","seq__88698","cljs.core/seq","chunk__88699","count__88700","i__88701","cljs.core/chunked-seq?","c__5525__auto__","cljs.core/chunk-first","cljs.core/chunk-rest","cljs.core/count","cljs.core/first","cljs.core/next","reagent.ratom/run-in-reaction","cljs.core/-deref","stack.utils.uix-reframe/use-reaction","reaction","reagent.impl.component/*current-component*","stack.utils.uix-reframe/use-subscribe","query","sub","*ratom-context*-orig-val__88722","*ratom-context*-temp-val__88723","reagent.ratom/*ratom-context*","re_frame.core.subscribe"],"sourcesContent":["(ns stack.utils.uix-reframe\n  (:require [\"use-sync-external-store/with-selector\" :as sync]\n            [re-frame.core :as rf]\n            [reagent.impl.component :as impl.component]\n            [reagent.ratom :as ratom]\n            [reagent.core :as r]\n            [scheduler]\n            [react]\n            [uix.core :as uix :refer [defui $]]\n            [uix.dom]))\n\n\n(defn- cleanup-ref [ref]\n  (when-let [^ratom/Reaction temp-ref (aget ref \"__rat\")]\n    (remove-watch ref temp-ref)\n    (when-let [watching (.-watching temp-ref)]\n      (set! (.-watching temp-ref)\n            (.filter watching #(not (identical? ref %)))))))\n\n(defn- use-batched-subscribe\n  \"Takes an atom-like ref type and returns a function\n  that adds change listeners to the ref\"\n  [^js ref]\n  (uix/use-callback\n   (fn [listener]\n     ;; Adding an atom holding a set of listeners on a ref\n     (let [listeners (or (.-react-listeners ref) (atom #{}))]\n       (set! (.-react-listeners ref) listeners)\n       (swap! listeners conj listener))\n     (fn []\n       (let [listeners (.-react-listeners ref)]\n         (swap! listeners disj listener)\n         ;; When the last listener was removed,\n         ;; remove batched updates listener from the ref\n         (when (empty? @listeners)\n           (cleanup-ref ref)\n           (set! (.-react-listeners ref) nil)))))\n   [ref]))\n\n(defn- use-sync-external-store [subscribe get-snapshot]\n  (sync/useSyncExternalStoreWithSelector\n   subscribe\n   get-snapshot\n   nil ;; getServerSnapshot, only needed for SSR\n   identity ;; selector, not using, just returning the value itself\n   =)) ;; value equality check\n\n(defn- run-reaction [^js ref]\n  (let [key \"__rat\"\n        ^js rat (aget ref key)\n        on-change (fn [_]\n                    ;; When the ref is updated, schedule all listeners in a batch\n                    (when-let [listeners (.-react-listeners ref)]\n                      (scheduler/unstable_scheduleCallback scheduler/unstable_ImmediatePriority\n                                                           #(doseq [listener @listeners]\n                                                              (listener)))))]\n    (if (nil? rat)\n      (ratom/run-in-reaction\n       #(-deref ref) ref key on-change {:no-cache true})\n      (._run rat false))))\n\n;; Public API\n\n(defn use-reaction\n  \"Takes Reagent's Reaction,\n  subscribes UI component to changes in the reaction\n  and returns current state value of the reaction\"\n  [reaction]\n  (if impl.component/*current-component*\n    ;; in case when the reaction runs in Reagent component\n    ;; just deref it and let Reagent handle everything\n    @reaction\n    ;; otherwise manage subscription via hooks\n    (let [subscribe (use-batched-subscribe reaction)\n          get-snapshot (uix/use-callback #(run-reaction reaction) [reaction])]\n      (use-sync-external-store subscribe get-snapshot))))\n\n(defn use-subscribe\n  \"Takes re-frame subscription query e.g. [:current-document/title],\n  creates an instance of the subscription,\n  subscribes UI component to changes in the subscription\n  and returns current state value of the subscription\"\n  [query]\n  (let [sub (binding [ratom/*ratom-context* #js {}]\n              (rf/subscribe query))\n        ;; using an empty atom when re-frame subscription is not registered\n        ;; re-frame will still print the error in console\n        ref (or sub (atom nil))]\n    (use-reaction ref)))\n"]}