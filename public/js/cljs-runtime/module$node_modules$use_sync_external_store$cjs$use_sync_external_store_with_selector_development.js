shadow$provide.module$node_modules$use_sync_external_store$cjs$use_sync_external_store_with_selector_development = function(global, require, module, exports) {
  (function() {
    function is(x, y) {
      return x === y && (0 !== x || 1 / x === 1 / y) || x !== x && y !== y;
    }
    "undefined" !== typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ && "function" === typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStart && __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStart(Error());
    var React = require("module$node_modules$react$index"), objectIs = "function" === typeof Object.is ? Object.is : is, useSyncExternalStore = React.useSyncExternalStore, useRef = React.useRef, useEffect = React.useEffect, useMemo = React.useMemo, useDebugValue = React.useDebugValue;
    exports.useSyncExternalStoreWithSelector = function(subscribe, getSnapshot, getServerSnapshot, selector, isEqual) {
      var instRef = useRef(null);
      if (null === instRef.current) {
        var inst = {hasValue:!1, value:null};
        instRef.current = inst;
      } else {
        inst = instRef.current;
      }
      instRef = useMemo(function() {
        var hasMemo = !1, memoizedSnapshot, memoizedSelection, memoizedSelector = function(nextSnapshot) {
          if (!hasMemo) {
            hasMemo = !0;
            memoizedSnapshot = nextSnapshot;
            nextSnapshot = selector(nextSnapshot);
            if (void 0 !== isEqual && inst.hasValue) {
              var currentSelection = inst.value;
              if (isEqual(currentSelection, nextSnapshot)) {
                return memoizedSelection = currentSelection;
              }
            }
            return memoizedSelection = nextSnapshot;
          }
          currentSelection = memoizedSelection;
          if (objectIs(memoizedSnapshot, nextSnapshot)) {
            return currentSelection;
          }
          var nextSelection = selector(nextSnapshot);
          if (void 0 !== isEqual && isEqual(currentSelection, nextSelection)) {
            return currentSelection;
          }
          memoizedSnapshot = nextSnapshot;
          return memoizedSelection = nextSelection;
        }, maybeGetServerSnapshot = void 0 === getServerSnapshot ? null : getServerSnapshot;
        return [function() {
          return memoizedSelector(getSnapshot());
        }, null === maybeGetServerSnapshot ? void 0 : function() {
          return memoizedSelector(maybeGetServerSnapshot());
        }];
      }, [getSnapshot, getServerSnapshot, selector, isEqual]);
      var value = useSyncExternalStore(subscribe, instRef[0], instRef[1]);
      useEffect(function() {
        inst.hasValue = !0;
        inst.value = value;
      }, [value]);
      useDebugValue(value);
      return value;
    };
    "undefined" !== typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ && "function" === typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStop && __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStop(Error());
  })();
};

//# sourceMappingURL=module$node_modules$use_sync_external_store$cjs$use_sync_external_store_with_selector_development.js.map
