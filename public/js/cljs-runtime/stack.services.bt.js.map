{"version":3,"sources":["stack/services/bt.cljs"],"mappings":"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","names":["stack.services.bt/device-request-callback","options","_e","p1__97790#","stack.apis.webbluetooth.await_device","G__97797","stack.utils.dbfx/dispatch","G__97798","stack.services.bt/device-connect-callback","device","p1__97802#","stack.apis.webbluetooth.await_device_gatt_connect","G__97806","G__97809","stack.services.bt/gatt-get-service-callback","gatt","p1__97812#","stack.apis.webbluetooth.await_gatt_get_service","G__97816","G__97823","stack.services.bt/service-get-tx-char-callback","service","p1__97829#","stack.apis.webbluetooth.await_service_get_tx_characteristic","G__97835","G__97837","stack.services.bt/service-get-rx-char-callback","p1__97847#","stack.apis.webbluetooth.await_service_get_rx_characteristic","G__97851","G__97853","stack.services.bt/serial-event-interceptors","G__97858","stack.utils.dbfx/path","stack.utils.dbfx/inject-cofx","p__97864","map__97865","cljs.core/--destructure-map","cljs.core.get","stack.services.bt/append-event","events","timestamp","event-type","bytes","cljs.core.assoc","G__97869","G__97870","G__97871","stack.utils.dbfx/reg-event-fx","p__97878","p__97879","map__97883","vec__97884","cljs.core.nth","db","_","G__97898","G__97899","G__97900","p__97905","p__97906","map__97908","vec__97909","_event_id","__run-fn-form","__kind","__ns","__id","__level","sf","taoensso.telemere.impl/*rt-sig-filter*","__inst","js/Date","__thread","__root0","taoensso.telemere.impl/*trace-root*","__otel-context1","__uid","__root1","__run-result","signal__42410__auto__","cljs.core/Delay","signal__42401__auto__","taoensso.telemere.impl/Signal","taoensso.telemere/*ctx*","taoensso.telemere.impl/*trace-parent*","temp__5821__auto__","taoensso.telemere/*middleware*","sig-middleware__42402__auto__","taoensso.telemere.impl/dispatch-signal!","taoensso.telemere.impl/WrappedSignal","prev-event","cljs.core/last","cljs.core/vals","ongoing","cljs.core._EQ_","ts","data","G__97951","G__97952","stack.utils.dbfx/reg-sub","G__97957","G__97958","G__97959","G__97960","bt-serial-state","stack.services.bt/extract-rx-payload","response","cljs.core/first","stack.services.bt/default-context","stack.apis.webbluetooth/DEFAULT_OPTIONS","stack.services.bt/controller","G__98018","statecharts.core/machine","ctx","e","G__98050","stack.apis.webbluetooth/is-supported?","rx-char","decoder","js/TextDecoder","G__98111","text","tx-char","encoder","js/TextEncoder","stack.apis.webbluetooth/service-write-value-without-response","stack.apis.webbluetooth.forget_device","G__98147","G__98159","statecharts.core/assign","G__98172","event","G__98180","G__98186","G__98193","G__98197","G__98207","G__98232","stack.services.bt/init","stack.utils.hsm/register"],"sourcesContent":["(ns stack.services.bt\n  (:require\n   [taoensso.telemere :as t]\n   [statecharts.core :as hsm]\n   [stack.utils.dbfx :as dbfx :refer [reg-event-fx inject-cofx reg-sub]]\n   [stack.utils.hsm :as hsm-dbfx]\n   [stack.apis.webbluetooth :as weble]))\n\n(defn device-request-callback [options _e]\n  (weble/await-device\n   :filter-options options\n   :on-success #(dbfx/dispatch [:bt-has-device %1])\n   :on-failure #(dbfx/dispatch [:bt-no-device])))\n\n(defn device-connect-callback [device]\n  (weble/await-device-gatt-connect\n   :device device\n   :on-success #(dbfx/dispatch [:bt-has-gatt %1])\n   :on-failure #(dbfx/dispatch [:bt-no-gatt])))\n\n(defn gatt-get-service-callback [gatt]\n  (weble/await-gatt-get-service\n   :gatt gatt\n   :on-success #(dbfx/dispatch [:bt-has-service %1])\n   :on-failure #(dbfx/dispatch [:bt-no-service])))\n\n(defn service-get-tx-char-callback [service]\n  (weble/await-service-get-tx-characteristic\n   :service service\n   :on-success #(dbfx/dispatch [:bt-has-tx-char %1])\n   :on-failure #(dbfx/dispatch [:bt-no-tx-char])))\n\n(defn service-get-rx-char-callback [service]\n  (weble/await-service-get-rx-characteristic\n   :service service\n   :on-success #(dbfx/dispatch [:bt-has-rx-char %1])\n   :on-failure #(dbfx/dispatch [:bt-no-rx-char])))\n\n;; == Schema =====================================================================\n;; -- see stack.utils.term\n\n;; ============================================================================\n;; re-fx events and subscriptions\n\n;; TODO: Inject the db path during initialisation instead maybe?\n\n;; Define a standard set of interceptors for all serial port events\n(def serial-event-interceptors\n  ;; \"path\" interceptor: Update specified subsection of db rather than entire db\n  [(dbfx/path [:bt-serial-term :events])\n   ;; Provide event timestamp as coeffect so our event handlers can be pure functions\n   (inject-cofx :timestamp)])\n\n(defn append-event [events {:keys [timestamp event-type bytes]}]\n  (assoc events timestamp {:timestamp timestamp\n                           :event-type event-type\n                           :event-data {:byte-encoding :text\n                                        :bytes bytes}}))\n\n;; Clients transmit a :serial-tx event containg commands/data to be transmitted\n;; This logs it to the app database, then generates an internal :webbluetooth-tx event\n;; that triggers the statemachine to transmit data via the port\n;;\n;; N.B. this may need adaptation to allow for coexistence with a webserial\n;; connection.... TBD\n(reg-event-fx\n :bt-serial-tx\n serial-event-interceptors\n (fn [{:keys [db timestamp]} [_ bytes]]\n   ;;DB effect: Append entry to the serial event database\n   {:db (append-event db {:timestamp timestamp\n                          :event-type :tx\n                          :bytes bytes})\n    ;;Coeffect - pass the request on to the statemachine to transmit\n    :fx [[:dispatch [:bt-tx bytes]]]}))\n\n(reg-event-fx\n :bt-serial-rx\n serial-event-interceptors\n (fn [{:keys [db timestamp]} [_event_id bytes]]\n   ;;Append to an ongoing rx event...\n   ;;As long data streams can be read over multiple rx events, if the previous recorded\n   ;;comms event is rx, we assume this is an ongoing event and consolidate.\n   ;;\n   ;;N.B. This does NOT do any command terminator parsing -- that's a higher level concern\n   ;;     to be dealt with by any subscribers to :weble-rx\n   (t/event! ::<-bytes {:level :debug :data bytes})\n   (let [prev-event (last (vals db))\n         ongoing (and (some? prev-event) (= (:event-type prev-event prev-event) :rx))\n         ts (if ongoing (:timestamp prev-event) timestamp)\n         data (if ongoing (str (:bytes (:event-data prev-event)) bytes) bytes)]\n     ;;DB effect: Append entry to the serial event database\n     {:db (append-event db {:timestamp ts\n                            :event-type :rx\n                            :bytes data})\n      ;;Coeffect: Notify any downstream listeners (e.g. CD handlers) that new rx data has been added to the DB\n      :fx [[:dispatch [:weble-rx nil]]]})))\n\n(reg-sub\n :bt-serial-data\n (fn [db _]\n   (:bt-serial-term db))) ;;\n\n(reg-sub\n :bt-serial-events\n :<- [:bt-serial-data]\n (fn [bt-serial-state _]\n   (:events bt-serial-state))) ;;\n\n;; JS: event.target.value\n;; (defn- extract-rx-payload\n;;   [response]\n;;   (.-value (.-target ^js (first (:data response)))))\n\n;; (defn- extract-rx-payload\n;;   [response]\n;;   (.. (first (:data response)) -target -value))\n\n;; (defn- extract-rx-payload\n;;   [response]\n;;   (.. (-> response :data first) -target -value))\n\n(defn- extract-rx-payload\n  [response]\n  (-> response\n      :data\n      first\n      .-target\n      .-value))\n\n\n;; ============================================================================\n;; Controller - a statemachine\n;; See https://lucywang000.github.io/clj-statecharts/\n\n;;Initial context...\n;; TODO Write a Schema?\n;; ... also consider including event store in context here rather than separately in the refx db\n\n(def default-context {:device nil\n                      :gatt nil\n                      :service nil\n                      :tx-char nil\n                      :rx-char nil\n                      :options weble/DEFAULT_OPTIONS\n                      :line-terminator \"\\r\"})\n\n(def controller\n  (hsm/machine\n   {:id :bt-serial\n    :initial :check\n    :context default-context\n    :states\n    {:check {:entry (fn [ctx e]\n                      (t/log! :debug (str \"Check web bluetooth\" ctx e))\n                      (dbfx/dispatch [(if (weble/is-supported?)\n                                        :bt-disconnected\n                                        :bt-unsupported)]))\n             :on {:bt-disconnected [:> :supported :disconnected]\n                  :bt-unsupported :unsupported}}\n     :supported {:initial :disconnected\n                 :on {:bt-disconnected [:> :supported :disconnected]\n                      :bt-disconnect [:> :supported :disconnecting]}\n                 :states\n                 {:connected {:entry (fn [ctx e]\n                                       (let [rx-char (:rx-char ctx)]\n                                         (t/log! :info \"Start Notifications\")\n                                         (.startNotifications ^js rx-char)))\n                              :on {:bt-rx {:actions (fn [ctx e]\n                                                      (t/log! :info (str ctx e))\n                                                      (let [bytes (extract-rx-payload e)\n                                                            decoder (js/TextDecoder. \"utf-8\")]\n                                                        (t/log! :info bytes)\n                                                        (dbfx/dispatch [:bt-serial-rx (.decode ^js decoder bytes)])))}\n                                   :bt-tx {:actions (fn [ctx e]\n                                                      (let [text (first (:data e)) tx-char (:tx-char ctx)\n                                                            encoder (js/TextEncoder. \"utf-8\")]\n                                                        (t/log! :info text)\n                                                        (weble/service-write-value-without-response tx-char (.encode ^js encoder text))))}}}\n                  :disconnecting {:entry (fn [ctx e]\n                                           (let [device (:device ctx)]\n                                             (t/log! :info \"Disconnecting device\")\n                                             (weble/forget-device {:device device\n                                                                   :on-success #(dbfx/dispatch [:bt-disconnected])\n                                                                   :on-failure #(t/log! :error (str \"Failed to forget \" device))})))}\n                  :disconnected {:initial :device-pending\n                                 :entry (hsm/assign\n                                         (fn [ctx e]\n                                           (t/log! :info \"Resetting device assignment\")\n                                               ;;(dbfx/dispatch [:bt-disconnect])\n                                           (assoc ctx\n                                                  :device nil\n                                                  :gatt nil\n                                                  :service nil\n                                                  :tx-char nil\n                                                  :rx-char nil)))\n                                 :on {:bt-connected [:> :supported :connected]}\n                                 :states\n                                 {:device-pending {:entry (fn [ctx e]\n                                                            (t/log! :debug (str \"DEVICE PENDING\" ctx e)))\n                                                   :on {:bt-has-device\n                                                        {:actions (hsm/assign (fn [ctx e]\n                                                                                (let [device (first (:data e))]\n                                                                                  (.addEventListener\n                                                                                   ^js device \"gattserverdisconnected\" (fn [event]\n                                                                                                                         (t/log! :debug (str event))\n                                                                                                                         (dbfx/dispatch [:bt-disconnected device])))\n                                                                                  (assoc ctx :device device))))\n                                                         :target :bluetooth-connecting}\n                                                        :bt-no-device [:> :supported :disconnected]}}\n                                  :bluetooth-connecting {:entry (fn [ctx e]\n                                                                  (t/log! :debug (str \"CONNECTING\" ctx e))\n                                                                  (device-connect-callback (:device ctx)))\n                                                         :on {:bt-has-gatt\n                                                              {:actions (hsm/assign (fn [ctx e]\n                                                                                      (let [gatt (first (:data e))]\n                                                                                        (assoc ctx :gatt gatt))))\n                                                               :target :bluetooth-getting-service}\n                                                              :bt-no-gatt [:> :supported :disconnecting]}}\n                                  :bluetooth-getting-service {:entry (fn [ctx e]\n                                                                       (t/log! :debug (str \"GETTING SERVICE\" ctx e))\n                                                                       (gatt-get-service-callback (:gatt ctx)))\n                                                              :on {:bt-has-service\n                                                                   {:actions (hsm/assign (fn [ctx e]\n                                                                                           (let [service (first (:data e))]\n                                                                                             (assoc ctx :service service))))\n                                                                    :target :bluetooth-getting-tx-char}\n                                                                   :bt-no-service [:> :supported :disconnecting]}}\n                                  :bluetooth-getting-tx-char {:entry (fn [ctx e]\n                                                                       (t/log! :debug (str \"GETTING TX CHARACTERISTIC\" ctx e))\n                                                                       (service-get-tx-char-callback (:service ctx)))\n                                                              :on {:bt-has-tx-char\n                                                                   {:actions (hsm/assign\n                                                                              (fn [ctx e]\n                                                                                (let [tx-char (first (:data e))]\n                                                                                  (assoc ctx :tx-char tx-char))))\n                                                                    :target :bluetooth-getting-rx-char}\n                                                                   :bt-no-tx-char [:> :supported :disconnecting]}}\n                                  :bluetooth-getting-rx-char {:entry (fn [ctx e]\n                                                                       (t/log! :debug (str \"GETTING RX CHARACTERISTIC\" ctx e))\n                                                                       (service-get-rx-char-callback (:service ctx)))\n                                                              :on {:bt-has-rx-char\n                                                                   {:actions (hsm/assign\n                                                                              (fn [ctx e]\n                                                                                (let [rx-char (first (:data e))]\n                                                                                  (t/log! :debug (str \"add event listener\"))\n                                                                                  (.addEventListener\n                                                                                   ^js rx-char \"characteristicvaluechanged\" (fn [event]\n                                                                                                                              (t/log! :debug (str event))\n                                                                                                                              (dbfx/dispatch [:bt-rx event])))\n                                                                                  (assoc ctx :rx-char rx-char))))\n                                                                    :target [:> :supported :connected]}\n                                                                   :bt-no-rx-char [:> :supported :disconnecting]}}}}}}\n     :unsupported {}}}))\n\n(defn init []\n  (hsm-dbfx/register controller))\n"]}