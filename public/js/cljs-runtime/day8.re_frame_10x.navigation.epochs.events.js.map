{"version":3,"sources":["day8/re_frame_10x/navigation/epochs/events.cljs"],"mappings":"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","names":["day8.re-frame-10x.navigation.epochs.events/first-match-id","m","cljs.core/first","day8.re_frame_10x.inlined_deps.re_frame.v1v3v0.re_frame.core.reg_event_fx","day8.re-frame-10x.inlined-deps.re-frame.v1v3v0.re-frame.core/trim-v","p__65927","vec__65928","cljs.core.nth","_","js-dom","p__65937","vec__65938","p__65961","p__65962","map__65970","cljs.core/--destructure-map","cljs.core.get","vec__65971","db","new-traces","temp__5821__auto__","sorted-traces","cljs.core.sort_by","map__65983","number-of-epochs-to-retain","cljs.core.get_in","events-to-ignore","cljs.core/vals","cljs.core.map","cljs.core/set","previous-traces","parse-state","day8.re-frame-10x.tools.metamorphic/initial-parse-state","drop-re-frame","drop-reagent","all-traces","cljs.core.into","day8.re-frame-10x.tools.metamorphic/parse-traces","new-matches","previous-matches","cljs.core.assoc","cljs.core.remove","match","event","day8.re-frame-10x.tools.metamorphic/matched-event","cljs.core/contains?","subscription-info","day8.re-frame-10x.tools.metamorphic/subscription-info","sub-state","day8.re-frame-10x.tools.metamorphic/initial-sub-state","subscription-match-state","day8.re-frame-10x.tools.metamorphic/subscription-match-state","subscription-matches","cljs.core/rest","new-sub-state","cljs.core/last","timing","cljs.core.mapv","epoch-traces","cljs.core.comp","day8.re-frame-10x.tools.coll/id-between-xf","start-of-epoch","event-handler-trace","cljs.core.filter","day8.re-frame-10x.tools.metamorphic/event-handler?","dofx-trace","day8.re-frame-10x.tools.metamorphic/event-dofx?","event-trace","day8.re-frame-10x.tools.metamorphic/event-run?","finish-run","or__5002__auto__","day8.re-frame-10x.tools.metamorphic/finish-run?","day8.re-frame-10x.tools.coll/last-in-vec","day8.re-frame-10x.tools.metamorphic/elapsed-time","sub-match","t","end-of-match?","cljs.core/seq","day8.re-frame-10x.tools.metamorphic/end-of-match?","all-matches","retained-matches","cljs.core/take-last","first-id-to-retain","retained-traces","p1__65949#","cljs.core.drop_while","trace","day8.re-frame-10x.tools.metamorphic/low-level-reagent-trace?","day8.re-frame-10x.tools.metamorphic/low-level-re-frame-trace?","match-ids","select-latest?","and__5000__auto__","cljs.core/empty?","G__65992","fexpr__65991","cljs.core/assoc-in","cljs.core.update","cljs.core/assoc","cljs.core/zipmap","G__65997","day8.re_frame_10x.inlined_deps.re_frame.v1v3v0.re_frame.core.path","p__65998","map__65999","map__66000","selected-epoch-id","new-id","cljs.core.take_while","cljs.core/complement","p__66004","map__66005","map__66006","cljs.core/not","cljs.core.take","p__66013","map__66014","p__66023","p__66024","map__66025","vec__66026","day8.re_frame_10x.inlined_deps.re_frame.v1v3v0.re_frame.core.reg_event_db","epochs","app-db-before","day8.re-frame-10x.tools.metamorphic/app-db-before","cljs.core/reset!","re-frame.db/app-db","temp__5825__auto__","event-to-replay","re-frame.core/dispatch","cljs.core.dissoc","re-frame.trace/reset-tracing!","day8.re-frame-10x.tools.coll/dissoc-in","p__66039","vec__66042","match-id","temp__5827__auto__","new-db","day8.re-frame-10x.tools.metamorphic/app-db-after","p__66058","vec__66059","filter-str"],"sourcesContent":["(ns day8.re-frame-10x.navigation.epochs.events\n  (:require\n   [re-frame.core]\n   [re-frame.db]\n   [re-frame.trace]\n   [day8.re-frame-10x.inlined-deps.re-frame.v1v3v0.re-frame.core :as rf]\n   [day8.re-frame-10x.fx.debounce                                :as debounce]\n   [day8.re-frame-10x.fx.scroll                                  :as scroll]\n   [day8.re-frame-10x.tools.metamorphic                          :as metam]\n   [day8.re-frame-10x.tools.coll                                 :as tools.coll]))\n\n(defn first-match-id\n  [m]\n  (-> m :match-info first :id))\n\n(rf/reg-event-fx\n ::scroll-into-view-debounced\n [rf/trim-v]\n (fn [_ [js-dom]]\n   {:fx [[::debounce/dispatch {:key   ::scroll-into-view\n                               :event [::scroll-into-view js-dom]\n                               :delay 128}]]}))\n\n(rf/reg-event-fx\n ::scroll-into-view\n [rf/trim-v]\n (fn [_ [js-dom]]\n   {:fx [[::scroll/into-view {:js-dom js-dom}]]}))\n\n(rf/reg-event-fx\n ::receive-new-traces\n [rf/trim-v]\n (fn [{:keys [db]} [new-traces]]\n   (if-let [sorted-traces (sort-by :id new-traces)]\n     (let [number-of-epochs-to-retain (get-in db [:settings :number-of-epochs])\n           events-to-ignore           (->> (get-in db [:settings :ignored-events]) vals (map :event-id) set)\n           previous-traces            (get-in db [:traces :all] [])\n           parse-state                (get-in db [:epochs :parse-state] metam/initial-parse-state)\n           {drop-re-frame :re-frame drop-reagent :reagent} (get-in db [:settings :low-level-trace])\n           all-traces                 (into previous-traces sorted-traces)\n           parse-state                (metam/parse-traces parse-state sorted-traces)\n           new-matches                (:partitions parse-state)\n           previous-matches           (get-in db [:epochs :matches] [])\n           parse-state                (assoc parse-state :partitions []) ;; Remove matches we know about\n           new-matches                (remove (fn [match]\n                                                (let [event (get-in (metam/matched-event match) [:tags :event])]\n                                                  (contains? events-to-ignore (first event)))) new-matches)\n            ;; subscription-info is calculated separately from subscription-match-state because they serve different purposes:\n            ;; - subscription-info collects all the data that we know about the subscription itself, like its layer, inputs and other\n            ;;   things that are defined as part of the reg-sub.\n            ;; - subscription-match-state collects all the data that we know about the state of specific instances of subscriptions\n            ;;   like its reagent id, when it was created, run, disposed, what values it returned, e.t.c.\n           subscription-info          (metam/subscription-info (get-in db [:epochs :subscription-info] {}) sorted-traces (get-in db [:app-db :reagent-id]))\n           sub-state                  (get-in db [:epochs :sub-state] metam/initial-sub-state)\n           subscription-match-state   (metam/subscription-match-state sub-state all-traces new-matches)\n           subscription-matches       (rest subscription-match-state)\n\n           new-sub-state              (last subscription-match-state)\n           timing                     (mapv (fn [match]\n                                              (let [epoch-traces        (into []\n                                                                              (comp\n                                                                               (tools.coll/id-between-xf (:id (first match)) (:id (last match))))\n                                                                              all-traces)\n                                                     ;; TODO: handle case when there are no epoch-traces\n                                                    start-of-epoch      (nth epoch-traces 0)\n                                                     ;; TODO: optimise trace searching\n                                                    event-handler-trace (first (filter metam/event-handler? epoch-traces))\n                                                    dofx-trace          (first (filter metam/event-dofx? epoch-traces))\n                                                    event-trace         (first (filter metam/event-run? epoch-traces))\n                                                    finish-run          (or (first (filter metam/finish-run? epoch-traces))\n                                                                            (tools.coll/last-in-vec epoch-traces))]\n                                                {:re-frame/event-run-time     (metam/elapsed-time start-of-epoch finish-run)\n                                                 :re-frame/event-time         (:duration event-trace)\n                                                 :re-frame/event-handler-time (:duration event-handler-trace)\n                                                 :re-frame/event-dofx-time    (:duration dofx-trace)}))\n                                            new-matches)\n\n           new-matches                (map (fn [match sub-match t] {:match-info match\n                                                                    :sub-state  sub-match\n                                                                    :timing     t})\n                                           new-matches subscription-matches timing)\n            ;; If there are new matches found, a match must have terminated.\n            ;; However in cases where we reset the db in a replay, we won't get an event match.\n            ;; We short circuit here to avoid iterating over the traces when it's unnecessary.\n           end-of-match?                 (or (seq new-matches)\n                                             (filter metam/end-of-match? sorted-traces))\n           all-matches                (into previous-matches new-matches)\n           retained-matches           (into [] (take-last number-of-epochs-to-retain all-matches))\n           first-id-to-retain         (first-match-id (first retained-matches))\n           retained-traces            (into [] (comp (drop-while #(< (:id %) first-id-to-retain))\n                                                     (remove (fn [trace]\n                                                               (or (when drop-reagent (metam/low-level-reagent-trace? trace))\n                                                                   (when drop-re-frame (metam/low-level-re-frame-trace? trace)))))) all-traces)\n           match-ids (mapv first-match-id retained-matches)\n            ;; Select the latest event when it arrives, unless the user has selected an older one.\n           select-latest? (and (seq new-matches)\n                               (or (empty? previous-matches)\n                                   (-> db :epochs :selected-epoch-id #{(first-match-id (last previous-matches))})))]\n       {:db       (-> db\n                      (assoc-in [:traces :all] retained-traces)\n                      (update :epochs assoc\n                              :matches retained-matches\n                              :match-ids match-ids\n                              :matches-by-id (zipmap match-ids retained-matches)\n                              :parse-state parse-state\n                              :sub-state new-sub-state\n                              :subscription-info subscription-info)\n                      (cond-> select-latest? (assoc-in [:epochs :selected-epoch-id] (last match-ids))))\n        :dispatch (when end-of-match? [::quiescent])})\n      ;; Else\n     {:db db})))\n\n(rf/reg-event-fx\n ::previous\n [(rf/path [:epochs])]\n (fn [{{:keys [match-ids selected-epoch-id] :as db} :db} _]\n   (let [new-id (->> match-ids (take-while (complement #{selected-epoch-id})) last)]\n     {:db       (assoc db :selected-epoch-id new-id)\n      :dispatch [::reset-current-epoch-app-db new-id]})))\n\n(rf/reg-event-fx\n ::next\n [(rf/path [:epochs])]\n (fn [{{:keys [match-ids selected-epoch-id] :as db} :db} _]\n   (let [new-id (if-not selected-epoch-id\n                  (tools.coll/last-in-vec match-ids)\n                  (->> match-ids (drop-while (complement #{selected-epoch-id})) (take 2) last))]\n     {:db       (assoc db :selected-epoch-id new-id)\n      :dispatch [::reset-current-epoch-app-db new-id]})))\n\n(rf/reg-event-fx\n ::most-recent\n [(rf/path [:epochs])]\n (fn [{:keys [db]} _]\n   (let [new-id (tools.coll/last-in-vec (:match-ids db))]\n     {:db       (assoc db :selected-epoch-id new-id)\n      :dispatch [::reset-current-epoch-app-db new-id]})))\n\n(rf/reg-event-fx\n ::load\n [(rf/path [:epochs]) rf/trim-v]\n (fn [{:keys [db]} [new-id]]\n   {:db       (assoc db :selected-epoch-id new-id)\n    :dispatch [::reset-current-epoch-app-db new-id]}))\n\n(rf/reg-event-db\n ::replay\n [(rf/path [:epochs])]\n (fn [epochs _]\n   (let [selected-epoch-id (or (get epochs :selected-epoch-id)\n                               (tools.coll/last-in-vec (get epochs :match-ids)))\n         event-trace      (-> (get-in epochs [:matches-by-id selected-epoch-id :match-info])\n                              (metam/matched-event))\n         app-db-before    (metam/app-db-before event-trace)\n         event            (get-in event-trace [:tags :event])]\n     (reset! re-frame.db/app-db app-db-before)\n      ;; Wait for quiescence\n     (assoc epochs :replay event))))\n\n(rf/reg-event-db\n ::quiescent\n [(rf/path [:epochs])]\n (fn [db _]\n   (if-some [event-to-replay (:replay db)]\n     (do (re-frame.core/dispatch event-to-replay)\n         (dissoc db :replay))\n     db)))\n\n(rf/reg-event-db\n ::reset\n (fn [db]\n   (re-frame.trace/reset-tracing!)\n   (-> db\n       (dissoc :epochs)\n       (tools.coll/dissoc-in [:traces :all]))))\n\n(rf/reg-event-db\n ::reset-current-epoch-app-db\n [rf/trim-v]\n (fn [db [new-id]]\n   (when (get-in db [:settings :app-db-follows-events?])\n     (let [epochs   (:epochs db)\n           match-id (or new-id\n                         ;; new-id may be nil when we call this event from :settings/play\n                        (tools.coll/last-in-vec (get epochs :match-ids)))\n           match    (get-in epochs [:matches-by-id match-id])\n           event    (metam/matched-event (:match-info match))]\n        ;; Don't mess up the users app if there is a problem getting app-db-after.\n       (when-some [new-db (metam/app-db-after event)]\n         (reset! re-frame.db/app-db new-db))))\n   db))\n\n(rf/reg-event-db\n ::set-filter\n [(rf/path [:epochs :filter-str]) rf/trim-v]\n (fn [_ [filter-str]]\n   filter-str))\n"],"x_google_ignoreList":[0]}