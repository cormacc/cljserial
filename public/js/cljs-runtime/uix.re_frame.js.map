{"version":3,"sources":["uix/re_frame.cljs"],"mappings":"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","names":["uix.re-frame/rat-key","uix.re-frame/cleanup-ref","ref","temp__5823__auto__","temp-ref","uix.re-frame/use-batched-subscribe","uix.hooks.alpha/use-callback","uix.hooks.alpha/use-clj-deps","listener","listeners","or__5002__auto__","cljs.core.atom","cljs.core.swap_BANG_","cljs.core/conj","cljs.core/disj","cljs.core/deref","cljs.core/empty?","uix.re-frame/use-sync-external-store","subscribe","get-snapshot","js/module$node_modules$use_sync_external_store$with_selector.useSyncExternalStoreWithSelector","cljs.core/identity","cljs.core/=","uix.re-frame/run-reaction","rat","on-change","_","js/module$node_modules$scheduler$index.unstable_scheduleCallback","js/module$node_modules$scheduler$index.unstable_ImmediatePriority","seq__91697","cljs.core/seq","chunk__91698","count__91699","i__91700","cljs.core/chunked-seq?","c__5525__auto__","cljs.core/chunk-first","cljs.core/chunk-rest","cljs.core/count","cljs.core/first","cljs.core/next","reagent.ratom/run-in-reaction","cljs.core/-deref","uix.re-frame/use-reaction","reaction","reagent.impl.component/*current-component*","uix.re-frame/use-subscribe","query","sub","*ratom-context*-orig-val__91754","*ratom-context*-temp-val__91755","reagent.ratom/*ratom-context*","re_frame.core.subscribe"],"sourcesContent":["(ns uix.re-frame\n  (:require [\"use-sync-external-store/with-selector\" :refer [useSyncExternalStoreWithSelector]]\n            [re-frame.core :as rf]\n            [reagent.impl.component :as impl.component]\n            [reagent.ratom :as ratom]\n            [scheduler]\n            [uix.core :as uix]))\n\n(def ^:private rat-key \"__rat\")\n\n(defn- cleanup-ref [ref]\n  (when-let [^ratom/Reaction temp-ref (aget ref rat-key)]\n    (ratom/dispose! temp-ref)\n    (aset ref rat-key nil)))\n\n(defn- use-batched-subscribe\n  \"Takes an atom-like ref type and returns a function\n  that adds change listeners to the ref\"\n  [^js ref]\n  (uix/use-callback\n    (fn [listener]\n      ;; Adding an atom holding a set of listeners on a ref\n      (let [listeners (or (.-react-listeners ref) (atom #{}))]\n        (set! (.-react-listeners ref) listeners)\n        (swap! listeners conj listener))\n      (fn []\n        (let [listeners (.-react-listeners ref)]\n          (swap! listeners disj listener)\n          ;; When the last listener was removed,\n          ;; remove batched updates listener from the ref\n          (when (empty? @listeners)\n            (cleanup-ref ref)\n            (set! (.-react-listeners ref) nil)))))\n    [ref]))\n\n(defn- use-sync-external-store [subscribe get-snapshot]\n  (useSyncExternalStoreWithSelector\n    subscribe\n    get-snapshot\n    nil ;; getServerSnapshot, only needed for SSR\n    identity ;; selector, not using, just returning the value itself\n    =)) ;; value equality check\n\n(defn- run-reaction [^js ref]\n  (let [^js rat (aget ref rat-key)\n        on-change (fn [_]\n                    ;; When the ref is updated, schedule all listeners in a batch\n                    (when-let [listeners (.-react-listeners ref)]\n                      (scheduler/unstable_scheduleCallback scheduler/unstable_ImmediatePriority\n                                                           #(doseq [listener @listeners]\n                                                              (listener)))))]\n    (if (nil? rat)\n      (ratom/run-in-reaction\n        #(-deref ref) ref rat-key on-change {:no-cache true})\n      (._run rat false))))\n\n;; Public API\n\n(defn use-reaction\n  \"Takes Reagent's Reaction, Track or Cursor type,\n  subscribes UI component to changes in the reaction\n  and returns current state value of the reaction\"\n  [reaction]\n  (if impl.component/*current-component*\n    ;; in case when the reaction runs in Reagent component\n    ;; just deref it and let Reagent handle everything\n    @reaction\n    ;; otherwise manage subscription via hooks\n    (let [subscribe (use-batched-subscribe reaction)\n          get-snapshot (uix/use-callback #(run-reaction reaction) [reaction])]\n      (use-sync-external-store subscribe get-snapshot))))\n\n(defn use-subscribe\n  \"Takes re-frame subscription query e.g. [:current-document/title],\n  creates an instance of the subscription,\n  subscribes UI component to changes in the subscription\n  and returns current state value of the subscription\"\n  [query]\n  (let [sub (binding [ratom/*ratom-context* #js {}]\n              (rf/subscribe query))\n        ;; using an empty atom when re-frame subscription is not registered\n        ;; re-frame will still print the error in console\n        ref (or sub (atom nil))]\n    (use-reaction ref)))\n\n"],"x_google_ignoreList":[0]}