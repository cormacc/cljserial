{"version":3,"sources":["rewrite_clj/zip/findz.cljc"],"mappings":"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","names":["var_args","args__5732__auto__","len__5726__auto__","i__5727__auto__","argseq__5733__auto__","cljs.core/IndexedSeq","rewrite-clj.zip.findz/tag-predicate","p__69326","vec__69327","cljs.core.nth","seq69307","G__69308","cljs.core/first","cljs.core/next","self__5711__auto__","t","additional","p1__69302#","node","and__5000__auto__","cljs.core._EQ_","rewrite-clj.zip.base/tag","rewrite-clj.zip.findz/position-in-range?","zloc","pos","vec__69336","r","c","cljs.core/map?","cljs.core.ex_info","vec__69343","vec__69346","vec__69349","zstart-row","zstart-col","zend-row","zend-col","rewrite-clj.custom-zipper.core/position-span","G__69360","rewrite-clj.zip.findz/find","js/Error","p?","rewrite_clj.zip.findz.find","rewrite-clj.zip.move/right","f","cljs.core/iterate","cljs.core.take_while","cljs.core/identity","cljs.core/complement","rewrite-clj.zip.move/end?","cljs.core.drop_while","G__69376","rewrite-clj.zip.findz/find-last-by-pos","rewrite_clj.zip.findz.find_last_by_pos","cljs.core/constantly","rewrite-clj.custom-zipper.core/next","p1__69373#","cljs.core.filter","cljs.core/last","rewrite-clj.zip.findz/find-depth-first","rewrite-clj.zip.move/next","G__69403","rewrite-clj.zip.findz/find-next","rewrite_clj.zip.findz.find_next","G__69411","rewrite-clj.zip.findz/find-next-depth-first","G__69421","rewrite-clj.zip.findz/find-tag","rewrite_clj.zip.findz.find_tag","p1__69416#","G__69428","rewrite-clj.zip.findz/find-next-tag","rewrite_clj.zip.findz.find_next_tag","rewrite-clj.zip.findz/find-tag-by-pos","p1__69447#","G__69455","rewrite-clj.zip.findz/find-token","rewrite_clj.zip.findz.find_token","rewrite_clj.zip.findz.tag_predicate","G__69480","rewrite-clj.zip.findz/find-next-token","rewrite_clj.zip.findz.find_next_token","G__69516","rewrite-clj.zip.findz/find-value","v","rewrite_clj.zip.findz.find_value","p1__69504#","cljs.core/set?","cljs.core.comp","rewrite-clj.zip.base/sexpr","G__69561","rewrite-clj.zip.findz/find-next-value","rewrite_clj.zip.findz.find_next_value"],"sourcesContent":["(ns ^:no-doc rewrite-clj.zip.findz\n  (:refer-clojure :exclude [find])\n  (:require [rewrite-clj.custom-zipper.core :as zraw]\n            [rewrite-clj.zip.base :as base]\n            [rewrite-clj.zip.move :as m]))\n\n#?(:clj (set! *warn-on-reflection* true))\n\n;; ## Helpers\n\n(defn- tag-predicate\n  [t & [additional]]\n  (if additional\n    (fn [node]\n      (and (= (base/tag node) t)\n           (additional node)))\n    #(= (base/tag %) t)))\n\n(defn- position-in-range? [zloc pos]\n  (let [[r c] (if (map? pos) [(:row pos) (:col pos)] pos)]\n    (when (or (<= r 0) (<= c 0))\n      (throw (ex-info \"zipper row and col positions are ones-based\" {:pos pos})))\n    (let [[[zstart-row zstart-col][zend-row zend-col]] (zraw/position-span zloc)]\n      (and (>= r zstart-row)\n           (<= r zend-row)\n           (if (= r zstart-row) (>= c zstart-col) true)\n           (if (= r zend-row) (< c zend-col) true)))))\n\n;; ## Find Operations\n\n(defn find\n  \"Return `zloc` located to the first node satisfying predicate `p?` else nil.\n   Search starts at the current node and continues via movement function `f`.\n\n   `f` defaults to [[right]]\"\n  ([zloc p?]\n   (find zloc m/right p?))\n  ([zloc f p?]\n   (->> zloc\n        (iterate f)\n        (take-while identity)\n        (take-while (complement m/end?))\n        (drop-while (complement p?))\n        (first))))\n\n(defn find-last-by-pos\n  \"Return `zloc` located to the last node spanning position `pos` that satisfies predicate `p?` else `nil`.\n   Search is depth-first from the current node.\n\n  NOTE: Does not ignore whitespace/comment nodes.\"\n  ([zloc pos] (find-last-by-pos zloc pos (constantly true)))\n  ([zloc pos p?]\n   (->> zloc\n        (iterate zraw/next)\n        (take-while identity)\n        (take-while (complement m/end?))\n        (filter #(and (p? %)\n                      (position-in-range? % pos)))\n        last)))\n\n(defn find-depth-first\n  \"Return `zloc` located to the first node satisfying predicate `p?` else `nil`.\n   Search is depth-first from the current node.\"\n  [zloc p?]\n  (find zloc m/next p?))\n\n(defn find-next\n  \"Return `zloc` located to the next node satisfying predicate `p?` else `nil`.\n   Search starts one movement `f` from the current node and continues via `f`.\n\n   `f` defaults to [[right]]\"\n  ([zloc p?]\n   (find-next zloc m/right p?))\n  ([zloc f p?]\n   (some-> zloc f (find f p?))))\n\n(defn find-next-depth-first\n  \"Return `zloc` located to next node satisfying predicate `p?` else `nil`.\n   Search starts depth-first after the current node.\"\n  [zloc p?]\n  (find-next zloc m/next p?))\n\n(defn find-tag\n  \"Return `zloc` located to the first node with tag `t` else `nil`.\n   Search starts at the current node and continues via movement function `f`.\n\n   `f` defaults to [[right]]\"\n  ([zloc t]\n   (find-tag zloc m/right t))\n  ([zloc f t]\n   (find zloc f #(= (base/tag %) t))))\n\n(defn find-next-tag\n  \"Return `zloc` located to the next node with tag `t` else `nil`.\n  Search starts one movement `f` after the current node and continues via `f`.\n\n   `f` defaults to [[right]]\"\n  ([zloc t]\n   (find-next-tag zloc m/right t))\n  ([zloc f t]\n   (->> (tag-predicate t)\n        (find-next zloc f))))\n\n(defn find-tag-by-pos\n  \"Return `zloc` located to the last node spanning position `pos` with tag `t` else `nil`.\n  Search is depth-first from the current node.\"\n  ([zloc pos t]\n   (find-last-by-pos zloc pos #(= (base/tag %) t))))\n\n(defn find-token\n  \"Return `zloc` located to the the first token node satisfying predicate `p?`.\n  Search starts at the current node and continues via movement function `f`.\n\n   `f` defaults to [[right]]\"\n  ([zloc p?]\n   (find-token zloc m/right p?))\n  ([zloc f p?]\n   (->> (tag-predicate :token p?)\n        (find zloc f))))\n\n(defn find-next-token\n  \"Return `zloc` located to the next token node satisfying predicate `p?` else `nil`.\n  Search starts one movement `f` after the current node and continues via `f`.\n\n   `f` defaults to [[right]]\"\n  ([zloc p?]\n   (find-next-token zloc m/right p?))\n  ([zloc f p?]\n   (find-token (f zloc) f p?)))\n\n(defn find-value\n  \"Return `zloc` located to the first token node that `sexpr`esses to `v` else `nil`.\n   Search starts from the current node and continues via movement function `f`.\n\n   `v` can be a single value or a set. When `v` is a set, matches on any value in set.\n\n   `f` defaults to [[right]] in short form call.\n\n  See docs for [sexpr nuances](/doc/01-user-guide.adoc#sexpr-nuances).\"\n  ([zloc v]\n   (find-value zloc m/right v))\n  ([zloc f v]\n   (let [p? (if (set? v)\n              (comp v base/sexpr)\n              #(= (base/sexpr %) v))]\n     (find-token zloc f p?))))\n\n(defn find-next-value\n  \"Return `zloc` located to the next token node that `sexpr`esses to `v` else `nil`.\n   Search starts one movement `f` from the current location, and continues via `f`.\n\n   `v` can be a single value or a set. When `v` is a set matches on any value in set.\n\n   `f` defaults to [[right]] in short form call.\n\n  See docs for [sexpr nuances](/doc/01-user-guide.adoc#sexpr-nuances).\"\n  ([zloc v]\n   (find-next-value zloc m/right v))\n  ([zloc f v]\n   (find-value (f zloc) f v)))\n"],"x_google_ignoreList":[0]}