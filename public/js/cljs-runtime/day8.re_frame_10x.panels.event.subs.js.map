{"version":3,"sources":["day8/re_frame_10x/panels/event/subs.cljs"],"mappings":"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","names":["day8.re_frame_10x.inlined_deps.re_frame.v1v3v0.re_frame.core.reg_sub","p__83145","map__83146","cljs.core/--destructure-map","cljs.core.get","code","_","traces","cljs.core.keep_indexed","i","trace","temp__5827__auto__","cljs.core.get_in","cljs.core.pr_str","cljs.core.map_indexed","cljs.core.assoc","cljs.core/vec","cljs.core/first","cljs.core/boolean","p__83155","vec__83161","map__83164","cljs.core.nth","execution-order?","unordered-fragments","cljs.core.remove","line","cljs.core/fn?","cljs.core.sort_by","p__83186","map__83187","trace-id","p__83191","map__83196","form","zprint.core/zprint-str","p__83207","map__83208","code-open?","p__83213","map__83216","highlighted-form","var_args","G__83227","day8.re-frame-10x.panels.event.subs/re-seq-idx","js/Error","re","s","day8.re_frame_10x.panels.event.subs.re_seq_idx","offset","matches","match-str","match-vals","match-index","cljs.core/cons","cljs.core/LazySeq","post-idx","x__5087__auto__","y__5088__auto__","cljs.core.subs","day8.re-frame-10x.panels.event.subs/collapse-whitespace-and-index","s'","clojure.string/replace","v","i-s","i-s'","cljs.core._EQ_","cljs.core.conj","cljs.core/count","day8.re-frame-10x.panels.event.subs/find-bounds","form-str","search-str","num-seen","vec__83304","reindex","esc-str","goog.string/regExpEscape","regex","cljs.core/re-pattern","results","and__5000__auto__","cljs.core/seq","vec__83350","vec__83354","result","pre-match","matched-form","index","start","stop","G__83363","clojure.string.index_of","length","end","G__83368","p__83377","vec__83379","p__83393","p__83394","vec__83400","vec__83403","vec__83406","vec__83409","zp","left-bound","char","line-counts","cljs.core.map","cljs.core.comp","cljs.core/inc","clojure.string/split-lines","cljs.core.take","cljs.core.apply","cljs.core/+","p__83417","map__83419","show-all-code?","p__83425","map__83426","repl-msg-state","day8.re-frame-10x.panels.event.subs/canvas","js/document.createElement","context","p__83435","vec__83436","window-width","char-width","Math/ceil"],"sourcesContent":["(ns day8.re-frame-10x.panels.event.subs\n  (:require\n   [zprint.core                                                  :as zp]\n   [clojure.string                                               :as string]\n   [goog.string                                                  :as gstring]\n   [day8.re-frame-10x.inlined-deps.re-frame.v1v3v0.re-frame.core :as rf]\n   [day8.re-frame-10x.panels.settings.subs                              :as settings.subs]\n   [day8.re-frame-10x.panels.traces.subs                                :as traces.subs]))\n\n(rf/reg-sub\n ::root\n (fn [{:keys [code]} _]\n   code))\n\n(rf/reg-sub\n ::code-for-epoch\n :<- [::traces.subs/filtered-by-epoch]\n (fn [traces _]\n   (->> traces\n        (keep-indexed\n         (fn [i trace]\n           (when-some [code (get-in trace [:tags :code])]\n             {:id       i\n              :trace-id (:id trace)\n              :title    (pr-str (:op-type trace))\n              :code     (->> code (map-indexed (fn [i code] (assoc code :id i))) vec) ;; Add index\n              :form     (get-in trace [:tags :form])})))\n        (first)))) ;; Ignore multiple code executions for now\n\n(rf/reg-sub\n ::code-for-epoch-exists?\n :<- [::code-for-epoch]\n (fn [code _]\n   (boolean code)))\n\n(rf/reg-sub\n ::fragments-for-epoch\n :<- [::code-for-epoch]\n :<- [::execution-order?]\n (fn [[{:keys [code]} execution-order?] _]\n   (let [unordered-fragments (remove (fn [line] (fn? (:result line))) code)]\n     (if execution-order?\n       unordered-fragments\n       (sort-by :syntax-order unordered-fragments)))))\n\n(rf/reg-sub\n ::trace-id-for-epoch\n :<- [::code-for-epoch]\n (fn [{:keys [trace-id]} _]\n   trace-id))\n\n(rf/reg-sub\n ::form-for-epoch\n :<- [::code-for-epoch]\n (fn [{:keys [form]} _]\n   form))\n\n(rf/reg-sub\n ::zprint-form-for-epoch\n :<- [::form-for-epoch]\n (fn [form _]\n   (zp/zprint-str form)))\n\n(rf/reg-sub\n ::execution-order?\n :<- [::root]\n (fn [code _]\n   (get code :execution-order? true)))\n\n(rf/reg-sub\n ::code-open?\n :<- [::root]\n (fn [{:keys [code-open?]} _]\n   code-open?))\n\n(rf/reg-sub\n ::highlighted-form\n :<- [::root]\n (fn [{:keys [highlighted-form]} _]\n   highlighted-form))\n\n(defn- re-seq-idx\n  \"Like re-seq but returns matches and indices\"\n  ([re s] (re-seq-idx re s 0))\n  ([re s offset]  ;; copied from re-seq* impl https://github.com/clojure/clojurescript/blob/0efe8fede9e06b8e1aa2fcb3a1c70f66cad6392e/src/main/cljs/cljs/core.cljs#L10014\n   (when-some [matches (.exec re s)]\n     (let [match-str (aget matches 0)\n           match-vals (if (== (.-length matches) 1)\n                        match-str\n                        (vec matches))\n           match-index (.-index matches)]\n       (cons [match-vals, (+ offset match-index)]\n             (lazy-seq\n              (let [post-idx (+ (.-index matches)\n                                (max 1 (.-length match-str)))]\n                (when (<= post-idx (.-length s))\n                  (re-seq-idx re (subs s post-idx) (+ offset post-idx))))))))))\n\n(defn collapse-whitespace-and-index\n  \"given a string argument `s` it will return a vector of two values:\n     - a modified version of `s`, call it s'\n     - a vector of indexes, v\n   s' will be a copy of s in which all consecutive whitespace is collapsed to one whitespace\n   v  will be a vector of index for characters in s' back to the original s\n   For example:\n      (collapse-whitespace-and-index \\\"a b  c\\\")\n   will return\n       [\\\"a b c\\\" [0 1 2 3 5]]     ;; notice that the 4 is not there\n   \"\n  [s]\n  (let [s' (clojure.string/replace s #\"\\s+\" \" \") ;; generate a new string with whitespace replaced\n        v (loop [v []     ;; Build up an index between the string with and without whitespace\n                 i-s 0\n                 i-s' 0]\n            (cond\n              (= (count s') i-s')           (conj v (count s)) ;; we have reached the end of both strings\n              (= (nth s i-s) (nth s' i-s')) (recur (conj v i-s) (inc i-s) (inc i-s')) ;; when we have a match save the index\n              :else                         (recur v (inc i-s) i-s')))]    ;; no match (whitespace) increment the index on the orignal string\n    [s' v]))\n\n(defn find-bounds\n  \"Try and find the bounds of the form we are searching for. Uses some heuristics to\n  try and avoid matching partial forms, e.g. 'default-|weeks| for the form 'weeks.\"\n  [form-str search-str num-seen]\n  (if (nil? search-str)\n    [0 0]  ;; on mouse out etc\n    (let [[form-str reindex]   (collapse-whitespace-and-index form-str) ;; match without whitespace\n          esc-str    (gstring/regExpEscape search-str)\n          regex      (str \"(\\\\s|\\\\(|\\\\[|\\\\{)\" \"(\" esc-str \")(\\\\s|\\\\)|\\\\]|\\\\})\")\n          re         (re-pattern regex)\n          results    (re-seq-idx re form-str)]\n      ;; (js/console.log \"FIND-BOUNDS\" form-str  regex reindex results)\n      (if (and search-str num-seen (seq results) (>= (count results)  num-seen))\n        (let [result                              (nth results (dec num-seen))\n              [[_ pre-match matched-form] index]  result\n              index                               (+ index (count pre-match))\n              start                               (nth reindex index)\n              stop                                (nth reindex (+ index (count matched-form)))]\n          [start stop])\n        ;; If the regex fails, fall back to string index just in case.\n        (let [start  (some->> form-str\n                              (string/index-of (pr-str search-str))\n                              (nth reindex))\n              length (if (some? start)\n                       (count (pr-str search-str))\n                       1)\n              end    (some->> start\n                              (+ length)\n                              (nth reindex))]\n          [start end])))))\n\n(rf/reg-sub\n ::highlighted-form-bounds\n :<- [::highlighted-form]\n :<- [::zprint-form-for-epoch]\n (fn [[highlighted-form form] _]\n   (find-bounds form\n                (:form highlighted-form)\n                (:num-seen highlighted-form))))\n\n(rf/reg-sub\n ::highlighted?\n :<- [::zprint-form-for-epoch]\n :<- [::highlighted-form-bounds]\n (fn [[zp [left-bound _]] [_ [line char]]]\n   (when (pos? left-bound)\n     (let [line (dec line)\n           char (dec char)\n           line-counts (map (comp inc count)\n                            (clojure.string/split-lines zp))]\n       (->> line-counts\n            (take line)\n            (apply +)\n            (+ char)\n            (= left-bound))))))\n\n(rf/reg-sub\n ::show-all-code?\n :<- [::root]\n (fn [{:keys [show-all-code?]} _]\n   show-all-code?))\n\n(rf/reg-sub\n ::repl-msg-state\n :<- [::root]\n (fn [{:keys [repl-msg-state]} _]\n   repl-msg-state))\n\n;; [IJ] TODO: This should not be a subscription:\n(def canvas (js/document.createElement \"canvas\"))\n\n(rf/reg-sub\n ::single-character-width\n (fn [_ _]\n   (let [context (.getContext canvas \"2d\")]\n     (set! (.-font context) \"monospace 1em\")\n     (.-width (.measureText context \"T\")))))\n\n(rf/reg-sub\n ::max-column-width\n :<- [::settings.subs/window-width-rounded 100]\n :<- [::single-character-width]\n  ;; It seems like it would be possible to do something smarter responding to panel sizing,\n  ;; but that introduces a lot of jank, so we just set to maximum possible window width.\n (fn [[window-width char-width] _]\n   (Math/ceil (/ window-width\n                 char-width))))\n"],"x_google_ignoreList":[0]}