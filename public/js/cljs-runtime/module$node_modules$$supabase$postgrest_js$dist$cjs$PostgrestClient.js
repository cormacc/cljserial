shadow$provide.module$node_modules$$supabase$postgrest_js$dist$cjs$PostgrestClient = function(global, require, module, exports) {
  global = this && this.__importDefault || function(mod) {
    return mod && mod.__esModule ? mod : {"default":mod};
  };
  Object.defineProperty(exports, "__esModule", {value:!0});
  const PostgrestQueryBuilder_1 = global(require("module$node_modules$$supabase$postgrest_js$dist$cjs$PostgrestQueryBuilder")), PostgrestFilterBuilder_1 = global(require("module$node_modules$$supabase$postgrest_js$dist$cjs$PostgrestFilterBuilder")), constants_1 = require("module$node_modules$$supabase$postgrest_js$dist$cjs$constants");
  class PostgrestClient {
    constructor(url, {headers = {}, schema, fetch} = {}) {
      this.url = url;
      this.headers = Object.assign(Object.assign({}, constants_1.DEFAULT_HEADERS), headers);
      this.schemaName = schema;
      this.fetch = fetch;
    }
    from(relation) {
      relation = new URL(`${this.url}/${relation}`);
      return new PostgrestQueryBuilder_1.default(relation, {headers:Object.assign({}, this.headers), schema:this.schemaName, fetch:this.fetch});
    }
    schema(schema) {
      return new PostgrestClient(this.url, {headers:this.headers, schema, fetch:this.fetch});
    }
    rpc(fn, args = {}, {head = !1, get = !1, count} = {}) {
      const url = new URL(`${this.url}/rpc/${fn}`);
      let body;
      head || get ? (fn = head ? "HEAD" : "GET", Object.entries(args).filter(([, value]) => void 0 !== value).map(([name, value]) => [name, Array.isArray(value) ? `{${value.join(",")}}` : `${value}`]).forEach(([name, value]) => {
        url.searchParams.append(name, value);
      })) : (fn = "POST", body = args);
      args = Object.assign({}, this.headers);
      count && (args.Prefer = `count=${count}`);
      return new PostgrestFilterBuilder_1.default({method:fn, url, headers:args, schema:this.schemaName, body, fetch:this.fetch, allowEmpty:!1});
    }
  }
  exports.default = PostgrestClient;
};

//# sourceMappingURL=module$node_modules$$supabase$postgrest_js$dist$cjs$PostgrestClient.js.map
