{"version":3,"sources":["statecharts/scheduler.cljc"],"mappings":";AAKA,AAAA;;;;;;;;;;AAAA,AAAA,CAAA,AAAA,4EAAAA,5EAASK;;AAAT,CAAA,AAAA,4FAAA,5FAASA,uGAEIK,EAAEC,IAAIC,MAAMC,MAAMC;;AAF/B,AAAA,YAAA,RAEaJ;AAFb,AAGI,IAAMK,aAAW,0CAAA,1CAACC,6BAAiBP;AAAlB,AAAyB,QAACF,gDAAAA,iEAAAA,nBAASI,8CAAAA,1CAAIC,8CAAAA,xCAAMC,8CAAAA;GAAOC;AAArE,AACE,OAACG,mDAAMT,mBAAYU,gBAAML,MAAME;;;AAJrC,CAAA,AAAA,8FAAA,9FAASV,yGAMMK,EAAES,KAAKC,OAAOP;;AAN7B,AAAA,YAAA,RAMeH;AANf,AAOI,IAAAW,qBAAsB,4CAAA,AAAAC,5CAACC,4DAAKf,oBAAYK;AAAxC,AAAA,oBAAAQ;AAAA,AAAA,iBAAAA,bAAWN;AAAX,AACE,AAACS,+BAAmBf,aAAMM;;AAC1B,OAACE,mDAAMT,mBAAYiB,iBAAOZ;;AAF5B;;;;AAPJ,CAAA,2CAAA,3CAASR;AAAT,AAAA,AAAA;;;AAAA,CAAA,iDAAA,jDAASA;;AAAT,CAAA,oDAAA,pDAASA;;AAAT,CAAA,yDAAA,WAAAJ,mBAAAC,qBAAAC,5GAASE;AAAT,AAAA,OAAAD,iBAAAF,qBAAA;;;AAAA;;;uCAAA,vCAASI,sFAAWC,SAASC,YAAYC;AAAzC,AAAA,YAAAJ,gCAAoBE,SAASC,YAAYC;;;AAAhCJ,AAWT;;;;;;;uCAAA,vCAA6BqB,sFAMzBnB,SAASE;AANb,AAOG,YAAAJ,gCAAYE,SAAS,6CAAA,7CAACoB,iFAASlB;;AAElC,AAAA;;;;;;;;;;AAAA,AAAA,CAAA,AAAA,iFAAAT,jFAAS4B;;AAAT,CAAA,AAAA,iGAAA,jGAASA,4GAEIlB,EAAEC,IAAIC,MAAMC,MAAMC;;AAF/B,AAAA,YAAA,RAEaJ;AAFb,AAGI,IAAMqB,WAAW,AAACC,4BAAgBF,aAAMlB;IAClCG,aAAW,0CAAA,1CAACC,6BAAiBP;AAAlB,AAAyB,iEAAA,1DAACwB,6BAAiBH,aAAMnB,IAAIC,MAAMC;GAAWC;AADvF,AAEE,gGAAA,zFAACG,mDAAMT,mBAAY0B,sGAAUH,SAASlB,cAAOE;;;AALnD,CAAA,AAAA,mGAAA,nGAASa,8GAMMlB,EAAES,KAAKP,MAAMC;;AAN5B,AAAA,YAAA,RAMeH;AANf,AAOI,IAAMqB,WAAW,AAACC,4BAAgBF,aAAMlB;IAClCG,aAAW,+CAAA,AAAAO,oCAAA,nFAACa,+DAAQ3B,uGAAauB,SAASlB;AADhD,AAEE,oBAAME;AAAN,AACE,AAACS,+BAAmBf,aAAMM;;AAC1B,OAACE,0DAAMT,mBAAY4B,iBAAOL,SAASN,mEAAOZ;;AAF5C;;;;AATN,CAAA,gDAAA,hDAASe;AAAT,AAAA,AAAA;;;AAAA,CAAA,sDAAA,tDAASA;;AAAT,CAAA,yDAAA,zDAASA;;AAAT,CAAA,8DAAA,WAAA3B,mBAAAC,qBAAAC,jHAASyB;AAAT,AAAA,OAAAxB,iBAAAF,qBAAA;;;AAAA;;;4CAAA,5CAAS2B,gGAAgBC,MAAMtB,YAAYC;AAA3C,AAAA,YAAAmB,qCAAyBE,MAAMtB,YAAYC;;;AAAlCmB,AAaT;;;;;;;6CAAA,7CAAMS,kGAMFP,MAAMrB;AANV,AAOG,YAAAmB,qCAAiBE,MAAM,6CAAA,7CAACH,iFAASlB","names":["cljs.core/PROTOCOL_SENTINEL","this__5287__auto__","writer__5288__auto__","opt__5289__auto__","cljs.core/-write","statecharts.scheduler/Scheduler","statecharts.scheduler/->Scheduler","dispatch","timeout-ids","clock","_","fsm","state","event","delay","timeout-id","statecharts.clock/setTimeout","cljs.core.swap_BANG_","cljs.core/assoc","_fsm","_state","temp__5823__auto__","cljs.core/deref","cljs.core.get","statecharts.clock/clearTimeout","cljs.core/dissoc","statecharts.scheduler/make-scheduler","cljs.core.atom","statecharts.scheduler/StoreScheduler","statecharts.scheduler/->StoreScheduler","store","state-id","statecharts.store/unique-id","statecharts.store/transition","cljs.core/assoc-in","cljs.core.get_in","cljs.core/update","statecharts.scheduler/make-store-scheduler"],"sourcesContent":["(ns statecharts.scheduler\n  (:require [statecharts.store :as store]\n            [statecharts.delayed :as delayed]\n            [statecharts.clock :as clock]))\n\n(deftype Scheduler [dispatch timeout-ids clock]\n  delayed/IScheduler\n  (schedule [_ fsm state event delay]\n    (let [timeout-id (clock/setTimeout clock #(dispatch fsm state event) delay)]\n      (swap! timeout-ids assoc event timeout-id)))\n\n  (unschedule [_ _fsm _state event]\n    (when-let [timeout-id (get @timeout-ids event)]\n      (clock/clearTimeout clock timeout-id)\n      (swap! timeout-ids dissoc event))))\n\n(defn ^{:deprecated \"0.1.2\"} make-scheduler\n  \"DEPRECATED: Use [[make-store-scheduler]] instead.\n\n  If we are scheduling events, we must be saving them somewhere, implying that we\n  have a store. make-store-scheduler is a neater combination of those\n  responsibilities: transition and save.\"\n  ([dispatch clock]\n   (Scheduler. dispatch (atom {}) clock)))\n\n(deftype StoreScheduler [store timeout-ids clock]\n  delayed/IScheduler\n  (schedule [_ fsm state event delay]\n    (let [state-id   (store/unique-id store state)\n          timeout-id (clock/setTimeout clock #(store/transition store fsm state event nil) delay)]\n      (swap! timeout-ids assoc-in [state-id event] timeout-id)))\n  (unschedule [_ _fsm state event]\n    (let [state-id   (store/unique-id store state)\n          timeout-id (get-in @timeout-ids [state-id event])]\n      (when timeout-id\n        (clock/clearTimeout clock timeout-id)\n        (swap! timeout-ids update state-id dissoc event)))))\n\n(defn make-store-scheduler\n  \"Returns a scheduler that can be used to [[statecharts.delayed/schedule]] events\n  afer some delay. The `store`, which is a `statecharts.store/IStore` contains the\n  current values of the states, and will be updated as those states are\n  transitioned by the scheduled events. The `clock` is part of the delay\n  mechanism.\"\n  ([store clock]\n   (StoreScheduler. store (atom {}) clock)))\n"],"x_google_ignoreList":[0]}