{"version":3,"sources":["replicant/console_logger.cljc"],"mappings":";AAGA,+BAAA,/BAAMA,sEAAKC;AAAX,AAEW,OAACC,YAAeD;;AAE3B,yCAAA,zCAAME,0FAAeF;AAArB,AAEW,OAACG,cAAiBH;;AAE7B,uCAAA,vCAAMI;AAAN,AACW,OAACC;;AAEZ,kCAAA,lCAAMC,4EAAQN;AAAd,AACE,OAACO,wGAAOP;;AAEV,sCAAA,tCAAMQ,oFAAYC;AAAlB,AACE,OAACC,qBACA,WAAKV;AAAL,AACE,GAAI,AAACW,qBAAKX;uFAEH,+CAAA,WAAAY,1DAACC,vFACD,oDAAA,7CAACG;AADD,AAAS,OAAA,6GAAqB,AAACF,eAAK,cAAAF,dAACG;GADrCf;;AAGLA;;GACJS;;AAEH,2CAAA,3CAAMQ,8FAAiBC;AAAvB,AACE,IAAMC,WAAS,AAACX,oCAAWU;IACrBE,MAAI,EAAO,AAACb,wGAAOY;AADzB,AAEE,GAAI,OAAA,NAAGC;AACLD;;AACA,8HAAA,AAAA,vHAACE,6CAAK,AAACC,cAAI,6CAAA,7CAACC,iDAAOJ;;;AAEzB,kCAAA,0CAAAK,5EAAMI;AAAN,AAAA,IAAAH,aAAAD;IAAAC,iBAAA,AAAAC,4BAAAD;YAAA,AAAAE,4CAAAF,eAAA,nEAAsBI;cAAtB,AAAAF,4CAAAF,eAAA,rEAA4BK;aAA5B,AAAAH,4CAAAF,eAAA,pEAAoCP;YAApC,AAAAS,4CAAAF,eAAA,nEAA2CM;YAA3C,AAAAJ,4CAAAF,eAAA,nEAAiDO;WAAjD,AAAAL,4CAAAF,eAAA,lEAAuDQ;AAAvD,AACE,AAAC/B,uCAAc,CAAA,kEAA2B2B;;AAC1C,AAAC9B,6BAAI+B;;AACL,oBAAMC;AAAN,AACE,AAAChC,6BAAI,CAAA,yDAAkBgC;;AADzB;;AAEA,oBAAMC;AAAN,AACE,AAACjC,6BAAI,CAAA,sDAAeiC;;AADtB;;AAEA,oBAAMC;AAAN,AACE,IAAMC,kBAAU,AAAC5B,gCAAO2B;AAAxB,AACE,GAAI,8BAAA,7BAAG,EAAOC;AACZ,AAACnC,6BAAI,CAAA,eAAoBmC;;AACzB,AACE,6BAAA,7BAACnC;;AACD,AAACA,6BAAImC;;;AANb;;AAOA,6BAAA,7BAACnC;;AACD,AAACA,6BAAI,AAACO,gCAAO,AAACW,yCAAgBC;;AAC9B,OAACd","names":["replicant.console-logger/log","x","js/console.log","replicant.console-logger/print-heading","js/console.group","replicant.console-logger/close-group","js/console.groupEnd","replicant.console-logger/pprstr","cljs.core.pr_str","replicant.console-logger/scrub-sexp","sexp","clojure.walk/prewalk","cljs.core/map?","p1__61324#","cljs.core.remove","cljs.core/meta","cljs.core/val","cljs.core.into","replicant.console-logger/abbreviate-sexp","hiccup","scrubbed","len","cljs.core.conj","cljs.core/vec","cljs.core.take","p__61345","map__61346","cljs.core/--destructure-map","cljs.core.get","replicant.console-logger/report","title","message","fname","alias","data","formatted"],"sourcesContent":["(ns ^:no-doc replicant.console-logger\n  (:require [clojure.walk :as walk]))\n\n(defn log [x]\n  #?(:clj (println x)\n     :cljs (js/console.log x)))\n\n(defn print-heading [x]\n  #?(:clj (println x)\n     :cljs (js/console.group x)))\n\n(defn close-group []\n  #?(:cljs (js/console.groupEnd)))\n\n(defn pprstr [x]\n  (pr-str x))\n\n(defn scrub-sexp [sexp]\n  (walk/prewalk\n   (fn [x]\n     (if (map? x)\n       (->> x\n            (remove #(:replicant/internal (meta (val %))))\n            (into {}))\n       x))\n   sexp))\n\n(defn abbreviate-sexp [hiccup]\n  (let [scrubbed (scrub-sexp hiccup)\n        len (count (pr-str scrubbed))]\n    (if (< len 100)\n      scrubbed\n      (conj (vec (take 2 scrubbed)) '...))))\n\n(defn report [{:keys [title message hiccup fname alias data]}]\n  (print-heading (str \"Replicant warning: \" title))\n  (log message)\n  (when fname\n    (log (str \"Function: \" fname)))\n  (when alias\n    (log (str \"Alias: \" alias)))\n  (when data\n    (let [formatted (pprstr data)]\n      (if (< (count formatted) 80)\n        (log (str \"Input data: \" formatted))\n        (do\n          (log \"Input data:\")\n          (log formatted)))))\n  (log \"Offending hiccup: \")\n  (log (pprstr (abbreviate-sexp hiccup)))\n  (close-group))\n"],"x_google_ignoreList":[0]}