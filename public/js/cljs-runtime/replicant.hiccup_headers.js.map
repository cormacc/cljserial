{"version":3,"sources":["replicant/hiccup_headers.cljc"],"mappings":"","names":[],"sourcesContent":["(ns ^:no-doc replicant.hiccup-headers\n  #?(:cljs (:require-macros [replicant.hiccup-headers])))\n\n(defmacro hget [x k]\n  (if (:ns &env)\n    `(aget ~x ~k)\n    `(nth ~x ~k)))\n\n(defmacro tag-name [headers]\n  `(hget ~headers 0))\n\n(defmacro id [headers]\n  `(hget ~headers 1))\n\n(defmacro classes [headers]\n  `(hget ~headers 2))\n\n(defmacro rkey [headers]\n  `(hget ~headers 3))\n\n(defmacro attrs [headers]\n  `(hget ~headers 4))\n\n(defmacro children [headers]\n  `(hget ~headers 5))\n\n(defmacro html-ns [headers]\n  `(hget ~headers 6))\n\n(defmacro sexp [headers]\n  `(hget ~headers 7))\n\n(defmacro text [headers]\n  `(hget ~headers 8))\n\n(defmacro get-key [parsed-tag attrs]\n  `(when-let [k# (:replicant/key ~attrs)]\n     [(hget ~parsed-tag 0) k#]))\n\n(defmacro create [parsed-tag attrs children ns sexp]\n  (if (:ns &env)\n    `(let [pt# ~parsed-tag]\n       (doto pt#\n         (.push (get-key pt# ~attrs))\n         (.push ~attrs)\n         (.push ~children)\n         (.push ~ns)\n         (.push ~sexp)\n         (.push nil)\n         (.push nil)))\n    `(let [pt# ~parsed-tag]\n       (-> pt#\n           (conj (get-key pt# ~attrs))\n           (conj ~attrs)\n           (conj ~children)\n           (conj ~ns)\n           (conj ~sexp)\n           (conj nil)\n           (conj nil)))))\n\n(defmacro create-text-node [text]\n  (if (:ns &env)\n    `(let [text# ~text] (js/Array. nil nil nil nil nil nil nil text# text# nil))\n    `(let [text# ~text] [nil nil nil nil nil nil nil text# text# nil])))\n\n(defmacro update-attrs [headers & args]\n  (if (:ns &env)\n    `(let [headers# ~headers]\n       (aset headers# 4 (~(first args) (aget headers# 4) ~@(rest args)))\n       headers#)\n    `(update ~headers 4 ~@args)))\n\n(defmacro from-alias [alias headers]\n  (if (:ns &env)\n    `(let [hh# ~headers\n           alias# ~alias]\n       (when hh#\n         (doto hh#\n           (aset 3 (or (rkey alias#) (rkey hh#)))\n           (aset 7 (sexp hh#))\n           (aset 9 (sexp alias#)))))\n    `(let [hh# ~headers\n           alias# ~alias]\n       (when hh#\n         (-> hh#\n             (assoc 3 (or (rkey alias#) (rkey hh#)))\n             (assoc 7 (sexp hh#))\n             (assoc 9 (sexp alias#)))))))\n"],"x_google_ignoreList":[0]}