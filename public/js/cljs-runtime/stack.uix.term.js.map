{"version":3,"sources":["stack/uix/term.cljs"],"mappings":"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","names":["props__46991__auto__","props98011","uix.core/glue-args","vec__98019","map__98022","cljs.core.nth","cljs.core/--destructure-map","cljs.core.get","f__46992__auto__","js/goog.DEBUG","temp__5823__auto__","stack.uix.term/cmd-input","f__46909__auto__","*current-component*-orig-val__98045","uix.core/*current-component*","*current-component*-temp-val__98046","cljs.core/map?","js/Error","js/Object.defineProperty","obj98056","js/window","js/window.uix","js/window.uix.dev","sig__46918__auto__","js/window.uix.dev.signature!","js/window.uix.dev.register!","on-add-event","vec__98035","value","set-value!","uix.core/use-state","uix.compiler.aot/>el","uix.compiler.aot/create-uix-input","uix.compiler.attributes.class_names","uix.compiler.attributes/keyword->string","e","G__98044","cljs.core._EQ_","props98069","vec__98076","map__98079","stack.uix.term/term-event","*current-component*-orig-val__98095","*current-component*-temp-val__98096","obj98103","timestamp","event-type","event-data","props","data-indented","clojure.string/replace","uix.compiler.attributes/interpret-attrs","props98106","vec__98112","map__98115","stack.uix.term/term-widget","*current-component*-orig-val__98137","*current-component*-temp-val__98138","obj98144","events","cljs.core.map","p__98131","vec__98132","_timestamp","event","uix.compiler.alpha/component-element","uix.compiler.attributes/interpret-props"],"sourcesContent":["(ns stack.uix.term\n  (:require\n   [malli.core :as m]\n   [clojure.string :as str]\n   [uix.core :as uix :refer [defui $]]\n   [stack.utils.term :as term]))\n\n\n(defui cmd-input [{:keys [on-add-event]}]\n  (let [[value set-value!] (uix/use-state \"\")]\n    ($ :pre {:data-prefix \">\"}\n       ($ :code\n          ($ :input\n             ;;N.B. setting class as string here because of the / in 'w-11/12'\n             {:class \"w-11/12 bg-inherit\"\n              :value value\n              :placeholder \"Enter a command and hit Enter to send\"\n              :on-change (fn [^js e]\n                           (set-value! (.. e -target -value)))\n              :on-key-down (fn [^js e]\n                             (when (= \"Enter\" (.-key e))\n                               (set-value! \"\")\n                               (on-add-event value)))})))))\n\n(defui term-event\n  [{:keys [timestamp event-type event-data] :as props}]\n  {:pre [(m/validate term/Event props)]}\n  ;;FIXME: Ugly indentation hack\n  ;;\n  (let [data-indented (str/replace (:bytes event-data) #\"\\r\\n|\\r|\\n\" \"\\n     \")]\n    ($ :pre {:key timestamp :data-prefix (if (= event-type :tx) \">\" \" \")}  ($ :code data-indented))))\n\n(defui term-widget [{:keys [events on-add-event]}]\n  ($ :.block.w-full\n     ($ :.mockup-code\n        (for [[_timestamp event] events]\n          ($ term-event event))\n        ($ cmd-input {:on-add-event on-add-event}))))\n"]}