shadow$provide.module$node_modules$$supabase$realtime_js$dist$main$lib$constants = function(global, require, module, exports) {
  Object.defineProperty(exports, "__esModule", {value:!0});
  exports.CONNECTION_STATE = exports.TRANSPORTS = exports.CHANNEL_EVENTS = exports.CHANNEL_STATES = exports.SOCKET_STATES = exports.WS_CLOSE_NORMAL = exports.DEFAULT_TIMEOUT = exports.VSN = exports.DEFAULT_HEADERS = void 0;
  global = require("module$node_modules$$supabase$realtime_js$dist$main$lib$version");
  exports.DEFAULT_HEADERS = {"X-Client-Info":`realtime-js/${global.version}`};
  exports.VSN = "1.0.0";
  exports.DEFAULT_TIMEOUT = 10000;
  exports.WS_CLOSE_NORMAL = 1000;
  (function(SOCKET_STATES) {
    SOCKET_STATES[SOCKET_STATES.connecting = 0] = "connecting";
    SOCKET_STATES[SOCKET_STATES.open = 1] = "open";
    SOCKET_STATES[SOCKET_STATES.closing = 2] = "closing";
    SOCKET_STATES[SOCKET_STATES.closed = 3] = "closed";
  })(exports.SOCKET_STATES || (exports.SOCKET_STATES = {}));
  (function(CHANNEL_STATES) {
    CHANNEL_STATES.closed = "closed";
    CHANNEL_STATES.errored = "errored";
    CHANNEL_STATES.joined = "joined";
    CHANNEL_STATES.joining = "joining";
    CHANNEL_STATES.leaving = "leaving";
  })(exports.CHANNEL_STATES || (exports.CHANNEL_STATES = {}));
  (function(CHANNEL_EVENTS) {
    CHANNEL_EVENTS.close = "phx_close";
    CHANNEL_EVENTS.error = "phx_error";
    CHANNEL_EVENTS.join = "phx_join";
    CHANNEL_EVENTS.reply = "phx_reply";
    CHANNEL_EVENTS.leave = "phx_leave";
    CHANNEL_EVENTS.access_token = "access_token";
  })(exports.CHANNEL_EVENTS || (exports.CHANNEL_EVENTS = {}));
  (exports.TRANSPORTS || (exports.TRANSPORTS = {})).websocket = "websocket";
  (function(CONNECTION_STATE) {
    CONNECTION_STATE.Connecting = "connecting";
    CONNECTION_STATE.Open = "open";
    CONNECTION_STATE.Closing = "closing";
    CONNECTION_STATE.Closed = "closed";
  })(exports.CONNECTION_STATE || (exports.CONNECTION_STATE = {}));
};

//# sourceMappingURL=module$node_modules$$supabase$realtime_js$dist$main$lib$constants.js.map
