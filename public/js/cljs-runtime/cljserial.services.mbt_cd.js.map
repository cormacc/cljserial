{"version":3,"sources":["cljserial/services/mbt_cd.cljs"],"mappings":"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","names":["cljserial.services.mbt-cd/CdState","cljserial.schema.version/Version","cljserial.schema.filestore/FileStore","cljserial.services.mbt-cd/initial-state","cljs.core/sorted-map","cljserial.services.mbt-cd/line-terminator","cljserial.services.mbt-cd/response-terminator","js/Error","cljserial.services.mbt-cd/command-complete?","cmd","resp","malli.core.validate","cljserial.utils.term/EventData","clojure.string/ends-with?","cljserial.services.mbt-cd/command-handlers","db","temp__5804__auto__","match","cljs.core/re-find","G__56797","cljserial.utils.dbfx/dispatch","cljs.core.assoc","cljs.core.get","du-match","G__56802","lines","clojure.string/split-lines","file-lines","p1__56794#","cljs.core.filter","clojure.string/includes?","files","cljs.core.into","iter__5523__auto__","s__56805","cljs.core/LazySeq","cljs.core/seq","cljs.core/chunked-seq?","c__5521__auto__","size__5522__auto__","cljs.core/count","b__56807","cljs.core/chunk-buffer","i__56806","cljs.core/-nth","cljs.core/chunk-append","cljs.core/chunk-cons","cljs.core/chunk","iter__56804","cljs.core/chunk-rest","cljs.core/first","cljs.core/cons","cljs.core/rest","f","f-match","cljserial.services.mbt-cd/controller","G__56812","statecharts.core/machine","ctx","e","js/goog.debug.LOGGING_ENABLED","lambdaisland.glogi.log","cljs.core/identity","G__56813","G__56814","cljserial.services.mbt-cd/init","cljserial.services.command-parser/set-exchange-tokeniser","cljserial.services.command-parser/set-handlers","cljserial.utils.hsm/register","G__56815","G__56816","cljserial.utils.dbfx/reg-sub","_query-vector","cljs.core.get_in","cljs.core/chunk-first"],"sourcesContent":["(ns cljserial.services.mbt-cd\n  (:require\n   [clojure.string :as str]\n   [malli.core :as m]\n   [lambdaisland.glogi :as log]\n   [statecharts.core :as hsm]\n   [cljserial.utils.dbfx :as dbfx :refer [reg-sub]]\n   [cljserial.utils.hsm :as hsm-dbfx]\n   [cljserial.utils.term :as term]\n   [cljserial.schema.version :refer [Version]]\n   [cljserial.schema.filestore :refer [FileStore]]\n   [cljserial.services.command-parser :as commands]))\n\n\n;;---------------------------------------------------------------------------------------\n;; Schema\n\n\n(def CdState\n  [:map\n   [:serial :int]\n   [:hardware-revision :int]\n   [:firmware-revision Version]\n   [:build-configuration :string]\n   [:bluetooth-firmware :string]\n   [:track :int]\n   [:sd-card FileStore]])\n\n(def initial-state\n  {:serial 0\n   :hardware-revision 0\n   :firmware-revision {:major 0 :minor 0 :patch 0}\n   :build-configuration \"\"\n   :bluetooth-firmware \"\"\n   :track 0\n   :sd-card {:info {:capacity-mb 0 :used-mb 0}\n             :files (sorted-map)}})\n\n;;---------------------------------------------------------------------------------------\n;; CD commands\n\n(def line-terminator \"\\r\\n\")\n(def response-terminator (str line-terminator \"OK\" line-terminator))\n;;TODO: Rework this later to allow binary and text mode command handling...\n(defn command-complete? [cmd resp]\n  {:pre [(m/validate term/EventData cmd)\n         (m/validate term/EventData resp)]}\n  (str/ends-with? (:bytes resp) response-terminator))\n\n\n;; TODO: Rework this and webserial/commands module to allow effects as well as db modification\n;;       E.g. for file storage etc. we'll probably want to have coeffects to trigger file upload to S3 or whatever...\n(def command-handlers\n  [;; >> getid\n   ;; MBT Controller #00000092 / HW v1 / FW v15.2.9\n   ;; BT: Melody Audio V5.6 RC2 (MELODY_5x)\n   ;; IOD 1601#0000112 / 145 hrs\n   ;; OK\n   {:id :getid\n    :matcher #\"getid\"\n    :db-subpath nil\n    :response-parser\n    (fn [db resp]\n      (when-let [match (re-find #\"MBT (\\S+) #(\\d+) / HW v(\\d+) / FW v(\\d+)\\.(\\d+)\\.(\\d+)\" resp)]\n        (dbfx/dispatch [:mbt-cd-identified]) ; FIXME: This should be done via event-fx instead\n        (assoc db\n               :build-configuration (get match 1)\n               :serial (int (get match 2))\n               :hardware-revision (int (get match 3))\n               :firmware-revision\n               {:major (int (get match 4))\n                :minor (int (get match 5))\n                :patch (int (get match 6))})))}\n   ;; >> clin track\n   ;; Selected TRACK01\n   ;; OK\n   {:id :clin-track\n    :matcher #\"clin track\"\n    :db-subpath nil\n    :response-parser\n    (fn [db resp]\n      (when-let [match (re-find #\"Selected TRACK(\\d+)\" resp)]\n        (assoc db\n               :track (int (get match 1)))))}\n   ;; >> file ls\n   ;; MUTEBUTT.LOG :: ---- ::      18092 :: 24/03/06 21:59:54\n   ;; AKGK845B.CSV :: ---- ::        399 :: 24/03/01 14:02:00\n   ;; Total Files: 2 (18 KB)\n   ;; Used 0 of 7663 MB\n   ;; OK\n   {:id :file-ls\n    :matcher #\"file ls\"\n    :db-subpath nil\n    :response-parser\n    (fn [db resp]\n      (when-let [du-match (re-find #\"Used (\\d+) of (\\d+) MB\" resp)]\n        (dbfx/dispatch [:mbt-cd-files-listed])\n        (let [lines (str/split-lines resp)\n              file-lines (filter #(str/includes? % \" :: \") lines)\n              files (into (sorted-map) (for [f file-lines]\n                                         (let [f-match (re-find #\"(\\S+)\\s+::\\s+(\\S+)\\s+::\\s+(\\d+)\\s+::\\s+(.+)\" f)]\n                                           [(get f-match 1) {:path (get f-match 1)\n                                                             :attributes (get f-match 2)\n                                                             :size (int (get f-match 3))\n                                                             :timestamp (get f-match 4)}])))]\n          (assoc db\n                 :sd-card {:files files\n                           :info {:capacity-mb (int (get du-match 2)) :used-mb (int (get du-match 1))}}))))}\n   ;; END COMMAND HANDLERS\n   ])\n\n(comment\n  (def file-ls-parser (:response-parser (get command-handlers 2)))\n  (def file-ls-resp \"MUTEBUTT.LOG :: ---- ::      18092 :: 24/03/06 21:59:54\nAKGK845B.CSV :: ---- ::        399 :: 24/03/01 14:02:00\nTotal Files: 2 (18 KB)\nUsed 0 of 7663 MB\nOK\n\")\n  (file-ls-parser {} file-ls-resp)\n  ;;\n  )\n\n\n;;---------------------------------------------------------------------------------------\n;; Controller state machine\n(def controller\n  (hsm/machine\n   {:id :mbt-cd\n    :initial :disconnected\n    ;;:context nil ;Consider moving CD state to statemachine context? Though think through subscriptions...\n    :states {:disconnected {;;TODO: Entry handler -- reset state?\n                            :on {:webserial-connected :connected}}\n             :connected {:initial :identifying\n                         :entry (fn [ctx e]\n                                  (log/info :cd-hsm/connected \"Yay we can run multiple state machines...\"))\n                         :on {:webserial-disconnected :disconnected}\n                         :states {:identifying {:entry (fn [ctx e]\n                                                         ;;TODO: associate the command with the handler above?\n                                                         (dbfx/dispatch [:serial-tx \"getid\"]))\n                                                :on {:mbt-cd-identified :listing-files}}\n                                  :listing-files {:entry (fn [ctx e] (dbfx/dispatch [:serial-tx \"file ls\"]))\n                                                  :on {:mbt-cd-files-listed :ready}}\n                                  :ready {:entry (fn [ctx e] (log/info :cd-hsm/ready \"MBT ready for action!\"))}}}}}))\n\n\n\n(defn init []\n  ;; 1a. Initialise tokeniser with command copmletion indicator (\"OK\")\n  ;;    When found, this causes an event to be published...\n  (commands/set-exchange-tokeniser command-complete?)\n  ;; 1b. ... that causes a command handler to be looked up to handle the data\n  (commands/set-handlers command-handlers [:cd-info])\n  ;; 2. Register the statemachine with dbfx (re-frame or refx, depending on which backend we're using)\n  ;;    ... this causes an event listener to be registered for each event handled by the HSM.\n  ;;    ... N.B. re-frame only allows one handler/owner per event, though as many listeners as you like\n  ;;             can subscribe to the affected path of the re-frame db or whatever.\n  (hsm-dbfx/register controller)\n\n;; Subscription for cd state database updates...\n;; TODO: Maybe we should do this in (commands/set-handlers instead?)\n  (reg-sub\n   :cd-info\n   (fn [db _query-vector]\n     (get-in db [:cd-info]))))\n"]}