shadow$provide.module$node_modules$$supabase$supabase_js$dist$main$lib$helpers = function(global, require, module, exports) {
  var __awaiter = this && this.__awaiter || function(thisArg, _arguments, P, generator) {
    function adopt(value) {
      return value instanceof P ? value : new P(function(resolve) {
        resolve(value);
      });
    }
    return new (P || (P = Promise))(function(resolve, reject) {
      function fulfilled(value) {
        try {
          step(generator.next(value));
        } catch (e) {
          reject(e);
        }
      }
      function rejected(value) {
        try {
          step(generator["throw"](value));
        } catch (e) {
          reject(e);
        }
      }
      function step(result) {
        result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
      }
      step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
  };
  Object.defineProperty(exports, "__esModule", {value:!0});
  exports.applySettingDefaults = exports.isBrowser = exports.stripTrailingSlash = exports.uuid = void 0;
  exports.uuid = function() {
    return "xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx".replace(/[xy]/g, function(c) {
      var r = 16 * Math.random() | 0;
      return ("x" == c ? r : r & 3 | 8).toString(16);
    });
  };
  exports.stripTrailingSlash = function(url) {
    return url.replace(/\/$/, "");
  };
  exports.isBrowser = () => "undefined" !== typeof window;
  exports.applySettingDefaults = function(options, defaults) {
    const {db:dbOptions, auth:authOptions, realtime:realtimeOptions, global:globalOptions} = options, {db:DEFAULT_DB_OPTIONS, auth:DEFAULT_AUTH_OPTIONS, realtime:DEFAULT_REALTIME_OPTIONS, global:DEFAULT_GLOBAL_OPTIONS} = defaults;
    defaults = {db:Object.assign(Object.assign({}, DEFAULT_DB_OPTIONS), dbOptions), auth:Object.assign(Object.assign({}, DEFAULT_AUTH_OPTIONS), authOptions), realtime:Object.assign(Object.assign({}, DEFAULT_REALTIME_OPTIONS), realtimeOptions), global:Object.assign(Object.assign({}, DEFAULT_GLOBAL_OPTIONS), globalOptions), accessToken:() => __awaiter(this, void 0, void 0, function*() {
      return "";
    })};
    options.accessToken ? defaults.accessToken = options.accessToken : delete defaults.accessToken;
    return defaults;
  };
};

//# sourceMappingURL=module$node_modules$$supabase$supabase_js$dist$main$lib$helpers.js.map
