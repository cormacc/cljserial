{"version":3,"sources":["refx/interceptor.cljc"],"mappings":"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","names":["refx.interceptor/mandatory-interceptor-keys","refx.interceptor/interceptor?","m","cljs.core/map?","cljs.core._EQ_","cljs.core/keys","cljs.core/set","var_args","args__5732__auto__","len__5726__auto__","i__5727__auto__","argseq__5733__auto__","cljs.core/IndexedSeq","refx.interceptor/->interceptor","p__86263","map__86268","cljs.core/--destructure-map","cljs.core.get","seq86226","self__5712__auto__","cljs.core/seq","id","before","after","refx.interop/debug-enabled?","temp__5823__auto__","unknown-keys","clojure.set.difference","refx.log.error","or__5002__auto__","G__86284","refx.interceptor/get-effect","js/Error","context","key","cljs.core.get_in","not-found","refx.interceptor/assoc-effect","value","cljs.core/assoc-in","refx.interceptor/update-effect","seq86304","G__86305","cljs.core/first","cljs.core/next","G__86306","G__86307","self__5711__auto__","f","args","cljs.core.apply","cljs.core/update-in","G__86329","refx.interceptor/get-coeffect","refx.interceptor/assoc-coeffect","refx.interceptor/update-coeffect","seq86339","G__86340","G__86341","G__86342","refx.interceptor/invoke-interceptor-fn","interceptor","direction","temp__5821__auto__","refx.interceptor/invoke-interceptors","queue","cljs.core/empty?","cljs.core/peek","stack","cljs.core.assoc","cljs.core/pop","cljs.core.conj","refx.interceptor/enqueue","interceptors","cljs.core.update","cljs.core.fnil","cljs.core/into","refx.interop/empty-queue","refx.interceptor/context","event","refx.interceptor/change-direction","cljs.core.dissoc","refx.interceptor/execute","event-v"],"sourcesContent":["(ns refx.interceptor\n  (:require [clojure.set :as set]\n            [refx.interop :refer [debug-enabled? empty-queue]]\n            [refx.log :as log]))\n\n(def mandatory-interceptor-keys #{:id :after :before})\n\n(defn interceptor?\n  [m]\n  (and (map? m)\n       (= mandatory-interceptor-keys (-> m keys set))))\n\n(defn ->interceptor\n  [& {:as m :keys [id before after]}]\n  (when debug-enabled?\n    (when-let [unknown-keys (seq (set/difference\n                                  (-> m keys set)\n                                  mandatory-interceptor-keys))]\n      (log/error \"->interceptor\" m \"has unknown keys:\" unknown-keys)))\n  {:id     (or id :unnamed)\n   :before before\n   :after  after})\n\n;; -- Effect Helpers  -----------------------------------------------------------------------------\n\n(defn get-effect\n  ([context]\n   (:effects context))\n  ([context key]\n   (get-in context [:effects key]))\n  ([context key not-found]\n   (get-in context [:effects key] not-found)))\n\n(defn assoc-effect\n  [context key value]\n  (assoc-in context [:effects key] value))\n\n(defn update-effect\n  [context key f & args]\n  (apply update-in context [:effects key] f args))\n\n;; -- Coeffect Helpers  ---------------------------------------------------------------------------\n\n(defn get-coeffect\n  ([context]\n   (:coeffects context))\n  ([context key]\n   (get-in context [:coeffects key]))\n  ([context key not-found]\n   (get-in context [:coeffects key] not-found)))\n\n(defn assoc-coeffect\n  [context key value]\n  (assoc-in context [:coeffects key] value))\n\n(defn update-coeffect\n  [context key f & args]\n  (apply update-in context [:coeffects key] f args))\n\n;; -- Execute Interceptor Chain  ------------------------------------------------------------------\n\n(defn- invoke-interceptor-fn\n  [context interceptor direction]\n  (if-let [f (get interceptor direction)]\n    (f context)\n    context))\n\n(defn- invoke-interceptors\n  \"Loop over all interceptors, calling `direction` function on each,\n  threading the value of `context` through every call.\n\n  `direction` is one of `:before` or `:after`.\n\n  Each iteration, the next interceptor to process is obtained from\n  context's `:queue`. After they are processed, interceptors are popped\n  from `:queue` and added to `:stack`.\n\n  After sufficient iteration, `:queue` will be empty, and `:stack` will\n  contain all interceptors processed.\n\n  Returns updated `context`. Ie. the `context` which has been threaded\n  through all interceptor functions.\n\n  Generally speaking, an interceptor's `:before` function will (if present)\n  add to a `context's` `:coeffects`, while its `:after` function\n  will modify the `context`'s `:effects`.  Very approximately.\n\n  But because all interceptor functions are given `context`, and can\n  return a modified version of it, the way is clear for an interceptor\n  to introspect the stack or queue, or even modify the queue\n  (add new interceptors via `enqueue`?). This is a very fluid arrangement.\"\n  [context direction]\n  (loop [context context]\n    (let [queue (:queue context)]\n      (if (empty? queue)\n        context\n        (let [interceptor (peek queue)\n              stack (:stack context)]\n          (recur (-> context\n                     (assoc :queue (pop queue)\n                            :stack (conj stack interceptor))\n                     (invoke-interceptor-fn interceptor direction))))))))\n\n(defn enqueue\n  [context interceptors]\n  (update context :queue\n          (fnil into empty-queue)\n          interceptors))\n\n(defn- context\n  \"Create a fresh context\"\n  [event interceptors]\n  (-> {}\n      (assoc-coeffect :event event)\n      ;; Some interceptors, like `trim-v` and `unwrap`, alter event so capture\n      ;; the original for use cases such as tracing.\n      (assoc-coeffect :original-event event)\n      (enqueue interceptors)))\n\n(defn- change-direction\n  \"Called on completion of `:before` processing, this function prepares/modifies\n   `context` for the backwards sweep of processing in which an interceptor\n   chain's `:after` fns are called.\n\n   At this point in processing, the `:queue` is empty and `:stack` holds all\n   the previously run interceptors. So this function enables the backwards walk\n   by priming `:queue` with what's currently in `:stack`\"\n  [context]\n  (-> context\n      (dissoc :queue)\n      (enqueue (:stack context))))\n\n(defn execute\n  \"Executes the given chain (coll) of interceptors.\n\n   Each interceptor has this form:\n       {:before  (fn [context] ...)     ;; returns possibly modified context\n        :after   (fn [context] ...)}    ;; `identity` would be a noop\n\n   Walks the queue of interceptors from beginning to end, calling the\n   `:before` fn on each, then reverse direction and walk backwards,\n   calling the `:after` fn on each.\n\n   The last interceptor in the chain presumably wraps an event\n   handler fn. So the overall goal of the process is to \\\"handle\n   the given event\\\".\n\n   Thread a `context` through all calls. `context` has this form:\n\n     {:coeffects {:event [:a-query-id :some-param]\n                  :db    <original contents of app-db>}\n      :effects   {:db    <new value for app-db>\n                  :fx  [:dispatch [:an-event-id :param1]]}\n      :queue     <a collection of further interceptors>\n      :stack     <a collection of interceptors already walked>}\n\n   `context` has `:coeffects` and `:effects` which, if this was a web\n   server, would be somewhat analogous to `request` and `response`\n   respectively.\n\n   `coeffects` will contain data like `event` and the initial\n   state of `db` -  the inputs required by the event handler\n   (sitting presumably on the end of the chain), while handler-returned\n   side effects are put into `:effects` including, but not limited to,\n   new values for `db`.\n\n   The first few interceptors in a chain will likely have `:before`\n   functions which \\\"prime\\\" the `context` by adding the event, and\n   the current state of app-db into `:coeffects`. But interceptors can\n   add whatever they want to `:coeffects` - perhaps the event handler needs\n   some information from localstore, or a random number, or access to\n   a DataScript connection.\n\n   Equally, some interceptors in the chain will have `:after` fn\n   which can process the side effects accumulated into `:effects`\n   including but, not limited to, updates to app-db.\n\n   Through both stages (before and after), `context` contains a `:queue`\n   of interceptors yet to be processed, and a `:stack` of interceptors\n   already done.  In advanced cases, these values can be modified by the\n   functions through which the context is threaded.\"\n  [event-v interceptors]\n  (-> (context event-v interceptors)\n      (invoke-interceptors :before)\n      change-direction\n      (invoke-interceptors :after)))\n"],"x_google_ignoreList":[0]}