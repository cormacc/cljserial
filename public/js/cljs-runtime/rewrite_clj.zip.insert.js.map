{"version":3,"sources":["rewrite_clj/zip/insert.cljc"],"mappings":";AAQA,AAAeA,+BACb,mCAAA,nCAACC;AAEH;;;;gCAAA,hCAAOC,wEAGJC,QAAQC,UAAUC,OAAOC,KAAKC;AAHjC,AAIE,IAAMC,YAAU,AAACC,kCAAYF;IACvBG,YAAU,CAACP,wCAAAA,8CAAAA,RAAQG,2BAAAA;AADzB,qEAEO,AAACK,sDACC,kBAAM,iBAAAC,oBAAKF,lLAKb,OAACK,+CAAOX,UAAUE;AALV,AAAA,oBAAAM;AAAe,OAACC,cAAI,AAACC,6CAAwBJ;;AAA7CE;;oIADR,9HACE,AAAA,wHAAA,rCACGZ,8HACFQ,oEACD,qEAAA,OAAA,1EAAM,AAACK,cAAI,AAACC,6CAAwBR,QAClCD;;AAGb;;;;;;;;sCAAA,tCAAMW,oFAOHV,KAAKC;AAPR,AAQE,sHAAA,/GAACL,8BACCe,qCACAC,+HACClB,qCACDM,KAAKC;;AAET;;;;;;;qCAAA,rCAAMY,kFAMHb,KAAKC;AANR,AAOE,oHAAA,7GAACL,8BACCkB,oCACAC,8HACCrB,qCACDM,KAAKC;;AAET;;;;;;;sCAAA,tCAAMe,oFAMHhB,KAAKC;AANR,AAOE,qHAAA,9GAACL,8BACCqB,oCACAC,6EAEAlB,KAAKC;;AAET;;;;;;;sCAAA,tCAAMkB,oFAMHnB,KAAKC;AANR,AAOE,qCAAA,WAAAmB,zCAACxB;AAAD,AACG,IAAAyB,WAAAD;IAAAC,eAAA,EAAA,CAAAA,YAAA,OAAA,KAAA,oCAAAA,pCAAUJ;AAAV,AAAA,GAAA,CAAAI,gBAAA;AAAA;;AAAA,gDAAAA,zCAAoBC;;+CADvB,5CAEEC,6EAEAvB,KAAKC","names":["rewrite-clj.zip.insert/space","rewrite-clj.node.whitespace/spaces","rewrite-clj.zip.insert/insert","move-fn","insert-fn","prefix","zloc","item","item-node","rewrite-clj.node.protocols/coerce","next-node","cljs.core.concat","and__5000__auto__","cljs.core/not","rewrite-clj.zip.whitespace/whitespace?","cljs.core.reduce","rewrite-clj.zip.insert/insert-right","rewrite-clj.custom-zipper.core/right","rewrite-clj.custom-zipper.core/insert-right","rewrite-clj.zip.insert/insert-left","rewrite-clj.custom-zipper.core/left","rewrite-clj.custom-zipper.core/insert-left","rewrite-clj.zip.insert/insert-child","rewrite-clj.custom-zipper.core/down","rewrite-clj.custom-zipper.core/insert-child","rewrite-clj.zip.insert/append-child","p1__66429#","G__66431","rewrite-clj.custom-zipper.core/rightmost","rewrite-clj.custom-zipper.core/append-child"],"sourcesContent":["(ns ^:no-doc rewrite-clj.zip.insert\n  (:require [rewrite-clj.custom-zipper.core :as zraw]\n            [rewrite-clj.node.protocols :as node]\n            [rewrite-clj.node.whitespace :as nwhitespace]\n            [rewrite-clj.zip.whitespace :as zwhitespace]))\n\n#?(:clj (set! *warn-on-reflection* true))\n\n(def ^:private space\n  (nwhitespace/spaces 1))\n\n(defn- insert\n  \"Generic insertion helper. If the node reached by `move-fn`\n   is a whitespace, insert an additional space.\"\n  [move-fn insert-fn prefix zloc item]\n  (let [item-node (node/coerce item)\n        next-node (move-fn zloc)]\n    (->> (concat\n           (when (and next-node (not (zwhitespace/whitespace? next-node)))\n             [space])\n           [item-node]\n           (when (not (zwhitespace/whitespace? zloc))\n             prefix))\n         (reduce insert-fn zloc))))\n\n(defn insert-right\n  \"Return zipper with `item` inserted to the right of the current node in `zloc`, without moving location.\n  If `item` is not already a node, an attempt will be made to coerce it to one.\n\n  Will insert a space if necessary.\n\n  Use [[rewrite-clj.zip/insert-right*]] to insert without adding any whitespace.\"\n  [zloc item]\n  (insert\n    zraw/right\n    zraw/insert-right\n    [space]\n    zloc item))\n\n(defn insert-left\n  \"Return zipper with `item` inserted to the left of the current node in `zloc`, without moving location.\n  Will insert a space if necessary.\n  If `item` is not already a node, an attempt will be made to coerce it to one.\n\n  Use [[insert-left*]] to insert without adding any whitespace.\"\n  [zloc item]\n  (insert\n    zraw/left\n    zraw/insert-left\n    [space]\n    zloc item))\n\n(defn insert-child\n  \"Return zipper with `item` inserted as the first child of the current node in `zloc`, without moving location.\n  Will insert a space if necessary.\n  If `item` is not already a node, an attempt will be made to coerce it to one.\n\n  Use [[insert-child*]] to insert without adding any whitespace.\"\n  [zloc item]\n  (insert\n    zraw/down\n    zraw/insert-child\n    []\n    zloc item))\n\n(defn append-child\n  \"Return zipper with `item` inserted as the last child of the current node in `zloc`, without moving.\n  Will insert a space if necessary.\n  If `item` is not already a node, an attempt will be made to coerce it to one.\n\n  Use [[append-child*]] to append without adding any whitespace.\"\n  [zloc item]\n  (insert\n    #(some-> % zraw/down zraw/rightmost)\n    zraw/append-child\n    []\n    zloc item))\n"],"x_google_ignoreList":[0]}