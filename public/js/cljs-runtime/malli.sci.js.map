{"version":3,"sources":["malli/sci.cljc"],"mappings":";AAGA,sBAAA,tBAAMA,oDAAWC,QAAQC;AAAzB,AAIc,IAAMC,oBAAa,AAAAC,+BAAA;AAAA,AAAA,GAAA,QAAAC,gCAAAC,qCAAAC;AAAoBO;;AAApB,IAAAN,qBAAA,AAAAC,eAAA,2CAAA,4DAAA,aAAA;AAAA,AAAA,oBAAAD;AAAA,IAAAE,mBAAAF;AAAA,AAAA,OAAAG,cAAAD;;AAAA,MAAA,KAAAE,MAAA,CAAA,mDAAA,AAAA,yFAAA,oBAAA,AAAAC,oBAAA,AAAA,yFAAA;;;GAAA;IACbE,OAAK,AAAAX,+BAAA;AAAA,AAAA,GAAA,QAAAC,gCAAAC,qCAAAU;AAAoBC;;AAApB,IAAAT,qBAAA,AAAAC,eAAA,2CAAA,4DAAA,aAAA;AAAA,AAAA,oBAAAD;AAAA,IAAAE,mBAAAF;AAAA,AAAA,OAAAG,cAAAD;;AAAA,MAAA,KAAAE,MAAA,CAAA,mDAAA,AAAA,yEAAA,oBAAA,AAAAC,oBAAA,AAAA,yEAAA;;;GAAA;IACLK,OAAK,AAAAd,+BAAA;AAAA,AAAA,GAAA,QAAAC,gCAAAC,qCAAAa;AAAoBC;;AAApB,IAAAZ,qBAAA,AAAAC,eAAA,2CAAA,4DAAA,aAAA;AAAA,AAAA,oBAAAD;AAAA,IAAAE,mBAAAF;AAAA,AAAA,OAAAG,cAAAD;;AAAA,MAAA,KAAAE,MAAA,CAAA,mDAAA,AAAA,0EAAA,oBAAA,AAAAC,oBAAA,AAAA,0EAAA;;;GAAA;AAFX,AAGE;AAAA,AAAO,oBAAI,iBAAAQ,oBAAA,AAAAC,gBAAMnB;AAAN,AAAA,oBAAAkB;AAAA,IAAAA,wBAAA,AAAAC,gBAAoBP;AAApB,AAAA,oBAAAM;AAAA,OAAAC,gBAA0BJ;;AAA1BG;;;AAAAA;;;AACF,IAAME,MAAI,CAACR,qCAAAA,8CAAAA,XAAKd,2BAAAA;AAAhB,AACE,uGAAA,6DAAA,nKAACE,kDAAAA,gFAAAA,hCAAaoB,6DAAAA;;AACd,4CAAUC;AAAV,AACE,IAAAC,WAAc,CAACP,qCAAAA,0CAAAA,PAAKK,uBAAAA;IAApBG,WAAyB,4CAAKF;AAA9B,AAAA,0GAAAC,SAAAC,yCAAAD,SAAAC,7JAACvB,kDAAAA,qEAAAA;;;AACLD","names":["malli.sci/evaluator","options","fail!","eval-string*","borkdude.dynaload/->LazyVar","js/sci","js/sci.core","js/sci.core.eval-string*","temp__5821__auto__","cljs.core/find","e__33551__auto__","cljs.core/val","js/Error","cljs.core/namespace","sci.core/eval-string*","init","js/sci.core.init","sci.core/init","fork","js/sci.core.fork","sci.core/fork","and__5000__auto__","cljs.core/deref","ctx","s","G__87843","G__87844"],"sourcesContent":["(ns malli.sci\n  (:require [borkdude.dynaload :as dynaload]))\n\n(defn evaluator [options fail!]\n  #?(:bb      (fn []\n                (fn [form]\n                  (load-string (str \"(ns user (:require [malli.core :as m]))\\n\" form))))\n     :default (let [eval-string* (dynaload/dynaload 'sci.core/eval-string* {:default nil})\n                    init (dynaload/dynaload 'sci.core/init {:default nil})\n                    fork (dynaload/dynaload 'sci.core/fork {:default nil})]\n                (fn [] (if (and @eval-string* @init @fork)\n                         (let [ctx (init options)]\n                           (eval-string* ctx \"(alias 'm 'malli.core)\")\n                           (fn eval [s]\n                             (eval-string* (fork ctx) (str s))))\n                         fail!)))))\n"],"x_google_ignoreList":[0]}