{"version":3,"sources":["cljs/core/async/interop.cljs"],"mappings":";AAYA;;;;;kCAAA,lCAAMA,4EAIHC;AAJH,AAKE,IAAMC,IAAE,AAACC;AAAT,AACE,AAAOF,OACA,WAAKG;AAAL,AACE,GAAI,QAAA,PAAMA;AACR,OAACC,4BAAaH;;AACd,OAACI,wDAAWJ,EAAEE;;GAClB,WAAKG;AAAL,AACE,OAACD,wDAAWJ,EACA,gDAAA,gBAAA,2CAAA,uDAAA,lKAACM,gPAEQD;;;AAC9BL","names":["cljs.core.async.interop/p->c","p","c","cljs.core.async.promise_chan","res","cljs.core.async/close!","cljs.core.async.put_BANG_","err","cljs.core.ex_info"],"sourcesContent":[";;   Copyright (c) Rich Hickey and contributors. All rights reserved.\n;;   The use and distribution terms for this software are covered by the\n;;   Eclipse Public License 1.0 (http://opensource.org/licenses/eclipse-1.0.php)\n;;   which can be found in the file epl-v10.html at the root of this distribution.\n;;   By using this software in any fashion, you are agreeing to be bound by\n;;   the terms of this license.\n;;   You must not remove this notice, or any other, from this software.\n\n(ns cljs.core.async.interop\n  (:require-macros [cljs.core.async.interop])\n  (:require [cljs.core.async :as async]))\n\n(defn p->c\n  \"EXPERIMENTAL: Puts the promise resolution into a promise-chan and returns it.\n   The value of a rejected promise will be wrapped in a instance of\n   ExceptionInfo, acessible via ex-cause.\"\n  [p]\n  (let [c (async/promise-chan)]\n    (.then p\n           (fn [res]\n             (if (nil? res)\n               (async/close! c)\n               (async/put! c res)))\n           (fn [err]\n             (async/put! c\n                         (ex-info \"Promise error\"\n                                  {:error :promise-error}\n                                  err))))\n    c))\n"],"x_google_ignoreList":[0]}