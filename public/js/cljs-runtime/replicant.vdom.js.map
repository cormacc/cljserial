{"version":3,"sources":["replicant/vdom.cljc"],"mappings":";AAIA,AAAKA,oBAAG,yBAAA,zBAACC","names":["replicant.vdom/id","cljs.core/volatile!"],"sourcesContent":["(ns ^:no-doc replicant.vdom\n  (:require [replicant.hiccup-headers :as h])\n  #?(:cljs (:require-macros [replicant.vdom])))\n\n(def id (volatile! 0))\n\n(defmacro vget [x k]\n  (if (:ns &env)\n    `(aget ~x ~k)\n    `(nth ~x ~k)))\n\n(defmacro tag-name [vdom]\n  `(vget ~vdom 0))\n\n(defmacro rkey [vdom]\n  `(vget ~vdom 1))\n\n(defmacro classes [vdom]\n  `(vget ~vdom 2))\n\n(defmacro attrs [vdom]\n  `(vget ~vdom 3))\n\n(defmacro children [vdom]\n  `(vget ~vdom 4))\n\n(defmacro child-ks [vdom]\n  `(vget ~vdom 5))\n\n(defmacro async-unmount? [vdom]\n  `(vget ~vdom 6))\n\n(defmacro sexp [vdom]\n  `(vget ~vdom 7))\n\n(defmacro text [vdom]\n  `(vget ~vdom 8))\n\n(defmacro unmount-id [vdom]\n  `(vget ~vdom 9))\n\n(defmacro n-children [vdom]\n  `(vget ~vdom 10))\n\n(defmacro mark-unmounting [vdom]\n  (if (:ns &env)\n    `(let [vdom# ~vdom]\n       (aset vdom# 9 (vswap! id inc))\n       vdom#)\n    `(assoc ~vdom 9 (vswap! id inc))))\n\n(defmacro create-text-node [text]\n  (if (:ns &env)\n    `(let [text# ~text]\n       (js/Array. nil nil nil nil nil nil false text# text# nil nil))\n    `(let [text# ~text]\n       [nil nil nil nil nil nil false text# text# nil nil])))\n\n(defmacro from-hiccup [headers attrs children children-ks n-children]\n  (if (:ns &env)\n    `(let [headers# ~headers]\n       (js/Array. (h/tag-name headers#) (h/rkey headers#) (h/classes headers#) ~attrs ~children ~children-ks (boolean (:replicant/unmounting (h/attrs headers#))) (h/sexp headers#) nil nil ~n-children))\n    `(let [headers# ~headers]\n       [(h/tag-name headers#) (h/rkey headers#) (h/classes headers#) ~attrs ~children ~children-ks (boolean (:replicant/unmounting (h/attrs headers#))) (h/sexp headers#) nil nil ~n-children])))\n"],"x_google_ignoreList":[0]}