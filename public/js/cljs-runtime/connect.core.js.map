{"version":3,"sources":["connect/core.cljs"],"mappings":"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","names":["cljs.core/enable-console-print!","taoensso.telemere.add_handler_BANG_","G__99044","taoensso.telemere/handler:console-raw","__run-fn-form","__kind","__ns","__id","__level","sf","taoensso.telemere.impl/*rt-sig-filter*","__inst","js/Date","__thread","__root0","taoensso.telemere.impl/*trace-root*","__otel-context1","__uid","__root1","__run-result","signal__42410__auto__","cljs.core/Delay","signal__42401__auto__","taoensso.telemere.impl/Signal","taoensso.telemere/*ctx*","taoensso.telemere.impl/*trace-parent*","temp__5821__auto__","taoensso.telemere/*middleware*","sig-middleware__42402__auto__","taoensso.telemere.impl/dispatch-signal!","taoensso.telemere.impl/WrappedSignal","connect.core/routes","connect.pages.mbt-terminal/layout","stack.examples.re-frame.pages.bt-terminal/layout","stack.examples.re-frame.pages.local-db/layout","stack.examples.re-frame.pages.cloud-db/layout-with-auth","stack.examples.re-frame.pages.cloud-filestore/layout-with-auth","connect.core/init","stack.core/set-dispatch!","stack.utils.dbfx/dispatch","G__99049","stack.utils.dbfx/dispatch-sync","stack.services.auth/init","stack.utils.hsm/register","stack.statecharts.webserial/controller","stack.services.router/render!","connect.layout/app-layout"],"sourcesContent":["(ns connect.core\n  (:require\n   [taoensso.telemere :as t]\n\n   [stack.core :as stack]\n   [stack.utils.dbfx :as dbfx]\n   [stack.utils.hsm :as hsm]\n   ;; Models ...\n   [connect.models.view]\n   [connect.models.domain]\n   ;; Services ...\n   [stack.services.router :as router]\n   [stack.services.auth]\n   [stack.services.bt]\n   [stack.statecharts.webserial :as webserial]\n   ;; [connect.services.mbt-cd]\n   ;; UI ...\n   [connect.layout :refer [app-layout]]\n   [connect.pages.mbt-terminal :as serial-terminal]\n   [stack.examples.re-frame.pages.bt-terminal :as bt-terminal]\n   [stack.examples.re-frame.pages.local-db :as local-db]\n   [stack.examples.re-frame.pages.cloud-db :as cloud-db]\n   [stack.examples.re-frame.pages.cloud-filestore :as cloud-filestore]\n   ;; DEV tools\n   ;; ... TODO: Move to a new module in dev/ tree? or do configuration based init\n   [cljs-react-devtools.core]))\n\n\n;; -- Logging ----------------------------------------------------------\n\n;; ... without a framework\n(enable-console-print!)   ;; so that println writes to `console.log`\n\n;; ... with telemere\n;;     See https://github.com/taoensso/telemere\n;; 1. Replace default console text handler with console-raw (for use with cljs-devtools / structured data)\n;; ... though also look at this: https://gist.github.com/ptaoussanis/f8a80f85d3e0f89b307a470ce6e044b5\n;; .... and this https://github.com/paintparty/fireworks\n(t/add-handler! :default/console (t/handler:console-raw {}))\n(t/log! \"Logging initialised!\")\n\n\n;; -- Setup routes ------------------------------------\n(def routes\n  [[\"/\"\n    {:name ::serial-terminal\n     :title \"WebSerial\"\n     :view serial-terminal/layout}]\n\n   [\"/bt\"\n    {:name ::bt-terminal\n     :title \"WebBluetooth\"\n     :view bt-terminal/layout}]\n\n   ;; The below are internal / diagnostic\n   ;; Remove from default views later in dev....\n\n   [\"/local-db\"\n    {:name ::local-db\n     :title \"Database (local)\"\n     :view local-db/layout}]\n\n   [\"/cloud-db\"\n    {:name ::cloud-db\n     :title \"Database (cloud)\"\n     :view cloud-db/layout-with-auth}]\n\n   [\"/cloud-filestore\"\n    {:name ::cloud-filestore\n     :title \"Filestore (cloud)\"\n     :view cloud-filestore/layout-with-auth}]\n\n   ])\n\n\n;; -- Initialise UI ------------------------------------\n(defn ^:export init []\n\n  (stack/set-dispatch! dbfx/dispatch)\n\n  ;; The event handler for `:init-app` can be found in `view.cljs`\n  ;; Using the sync version of dispatch means that value is in place before we go onto the next step.\n  (dbfx/dispatch-sync [:init-app])\n\n  ;; User signup and auth service - currently provided via a supabase backend.\n  ;; Pass 'false' to disable backend and spoof an active session\n  (stack.services.auth/init true)\n\n  ;; The WebSerial service is implemented as a heirarchical state machine\n  ;; Can be used for a simple terminal, or as a basis for services using a command parser\n  (hsm/register webserial/controller)\n\n  ;; WebBluetooth service (this does nothing yet)\n  ;; (stack.services.bt/init)\n\n  ;; MBT CD service - implements command/response parsing on top of the webserial service\n  ;; (connect.services.mbt-cd/init)\n\n  (t/log! :info \"Rendering!\")\n\n  ;; Wrap the entire UI in auth\n  ;; (router/render! {:routes routes :layout app-layout\n  ;;                  :wrapper stack.services.auth/wrap-layout ;;                  })\n\n  ;; ... or let auth stay in backend page, but retain sign-out link in appbar\n  (router/render! {:routes routes :layout app-layout})\n;;\n  )\n"]}