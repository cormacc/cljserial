{"version":3,"sources":["connect/models/view.cljs"],"mappings":";AAWA,qCAAA,rCAAKA;AAGL,iCAAA,2CAAA,2DAAA,KAAA,oEAAA,KAAA,iGAAA,0GAAA,8DAAA,mCAAA,mEAAA,pkBAAKC,gRAIOC,0GAEI,AAACC;AAcjB,IAAAC,iBAAA;IAAAC,iBAEC,WAAKE;AAAL,AAWE,OAACC,sCAA0BR,mCAAeS;;AAb7C,AAAA,+GAAAL,eAAAC,qDAAAD,eAAAC,jMAACC,wDAAAA,uFAAAA;AAgBD,IAAAI,iBAAA;IAAAC,iBAAA;IAAAC,iBAAA,mFAEM,AAAA,gFAAKG;IAFXF,iBAGC,WAAKG,gBAAgBT;AAArB,AACE,OAAA,uFAASS;;AAJZ,AAAA,iHAAAN,eAAAC,eAAAC,eAAAC,sDAAAH,eAAAC,eAAAC,eAAAC,hQAACC,yDAAAA,sHAAAA;AAQD,IAAAG,iBAAA;IAAAC,iBAEC,WAAKE,MAAMC;AAAX,AACE,AAAA;AAAA,AAAA,IAAAC,gBAAA;IAAAC,SAAA;IAAAC,OAAA;IAAAC,OAAA;IAAAC,UAAA;AAAA,AAAA,oBAAA,iBAAAC,KAAAC;AAAA,AAAA,oBAAAD;AAAA,QAAAA,mCAAAA,iCAAAJ,OAAAC,KAAAC,KAAAC,WAAAC,cAAAJ,OAAAC,KAAAC,KAAAC;;AAAA;;;AAAA,IAAAG,SAAA,KAAAC;IAAAC,WAAA;IAAAC,UAAAC;IAAAC,kBAAA;IAAAC,QAAA;IAAAC,UAAAJ;IAAAK,eAAA;IAAAC,wBAAA,KAAAC,gBAAA;AAAA,AAAA;AAAA,IAAAC,wBAAA,KAAAC,8BAAA,IAAAZ,OAAAM,MAAA,2CAAA,gDAAA,sBAAA,oDAAA,GAAA,yDAAA,EAAA,sDAAA,sFAAAX,KAAA,GAAA,EAAA,8EAAA,KAAAD,OAAAE,KAAAC,QAAAgB,kCAAAC,gDAAAP,QAAA,KAAA,KAAA,eAAA,KAAA,KAAA,KAAA,KAAA,KAAA,KAAA,KAAA;AAAA,AAAA,IAAAQ,qBAAAC;AAAA,AAAA,oBAAAD;AAAA,IAAAE,gCAAAF;AAAA,AAAA,QAAAE,8DAAAA,4DAAAN,yBAAAM,yCAAAN;;AAAA,AAAAA;;GAAA;AAAA,AAAA,AAAAO,6CAAA,KAAAC,qCAAAzB,OAAAC,KAAAC,KAAAC,QAAAY;;AAAA,oBAAAD;AAAA,QAAAA,6CAAAA,2CAAAC,yBAAAD,wBAAAC;;AAAA;;;AAAA;;;;AADF,kDAAA,+EAAA,kDAAA,mFAAA,mFAAA,vPAEOrC;;AAJR,AAAA,2HAAAgB,eAAAC,2DAAAD,eAAAC,nNAACC,8DAAAA,6FAAAA;AAuCD,IAAA8B,iBAAA;IAAAC,iBAAA;IAAAC,iBAAA,mFAAA;IAAAC,iBAGC,WAAKC,IAAI9C;AAAT,AACE,OAAC+C,kCAAmBD;;AAJvB,AAAA,iHAAAJ,eAAAC,eAAAC,eAAAC,sDAAAH,eAAAC,eAAAC,eAAAC,hQAACtC,yDAAAA,sHAAAA","names":["connect.models.view/app-storage-id","connect.models.view/default-db","connect.services.mbt-cd/initial-state","stack.utils.term/new-terminal-store","G__97166","G__97167","stack.utils.dbfx/reg-fx","_","stack.utils.model/embed-bitemporal-db","connect.models.domain/schema","G__97170","G__97171","G__97172","G__97173","stack.utils.dbfx/reg-sub","stack.statecharts.webserial/controller","webserial-state","G__97182","G__97183","stack.utils.dbfx/reg-event-fx","_cofx","_e","__run-fn-form","__kind","__ns","__id","__level","sf","taoensso.telemere.impl/*rt-sig-filter*","__inst","js/Date","__thread","__root0","taoensso.telemere.impl/*trace-root*","__otel-context1","__uid","__root1","__run-result","signal__42410__auto__","cljs.core/Delay","signal__42401__auto__","taoensso.telemere.impl/Signal","taoensso.telemere/*ctx*","taoensso.telemere.impl/*trace-parent*","temp__5821__auto__","taoensso.telemere/*middleware*","sig-middleware__42402__auto__","taoensso.telemere.impl/dispatch-signal!","taoensso.telemere.impl/WrappedSignal","G__97284","G__97285","G__97286","G__97287","ddb","connect.models.domain/get-devices"],"sourcesContent":["(ns connect.models.view\n  (:require\n   [taoensso.telemere :as t]\n   [stack.utils.dbfx :as dbfx]\n   [stack.utils.term :as term]\n   [stack.utils.model :as model]\n   [stack.statecharts.webserial :as webserial]\n   [connect.models.domain :as domain]\n   [connect.services.mbt-cd :as mbt-cd]))\n\n\n(def app-storage-id \"connect\")\n\n;; -- Default app-db Value  ---------------------------------------------------\n(def default-db\n  {:session nil\n   :route-match nil\n   ;;FIXME: Move this into mbt-cd service context? Or maybe not - this is proper view state...\n   :cd-info mbt-cd/initial-state\n   ;;FIXME: Move this to webserial service context?\n   :serial-term (term/new-terminal-store)\n\n   ;;\n   ;; Mirroring the domain data within re-frame db atom\n   :domain-db {}\n   :task-filter :all\n   ;; These are created automatically by hsm-init\n   ;; :webserial webserial/default-context\n   ;; :bt-serial bt/default-context\n   ;; :sync-service sync/default-context\n   })\n\n;; -- Domain data integration ---------------------------------------------------\n;; Domain db load effect\n(dbfx/reg-fx\n :init-domain-db\n (fn [_]\n   ;; This embeds a persistent bitemporal datascript db in the re-frame app db.\n   ;; The db appears at :domain-db within  the re-frame app-db and is a dict with the following keys:\n   ;; - :data :: the current state of the datascript db\n   ;; - :tx-log :: the current state of the backing transaction log\n   ;;\n   ;; It defines the following re-frame artefacts\n   ;; - A :transact effect for side-effecting DB transactions from event handlers\n   ;; - A :transact event listener to allow transactions using (rf/dispatch [:transact <datalog query>])\n   ;; - Subscriptions for the data (:domain-data), tx-log (:domain-tx-log) and parent db (:domain-db)\n   ;;\n   (model/embed-bitemporal-db app-storage-id domain/schema)))\n\n;;-- WebSerial events\n(dbfx/reg-sub\n :serial-events\n :<- [(:id webserial/controller)] ;;This is the service subscription created at registration\n (fn [webserial-state _]\n   (:events webserial-state))) ;;\n\n;; -- ui initialisation event handler ------------------------------------------------------\n;; Dispatched once on startup from core.cljs\n(dbfx/reg-event-fx\n :init-app\n (fn [_cofx _e]\n   (t/log! :info \"Initialising\")\n   {:db default-db\n    :fx [[:init-domain-db]]}))\n\n;; -- Domain CRUD events (TodoMVC)\n;; All datalog queries and transactions live in domain.cljs\n;; (dbfx/reg-event-fx\n;;  :add-task\n;;  (fn [_cofx [_ text]]\n;;    {:fx [[:transact (domain/add-task text)]]}))\n\n;; (dbfx/reg-event-fx\n;;  :set-task-completed\n;;  (fn [_cofx [_eid task-id done]]\n;;    {:fx [[:transact (domain/set-task-completed task-id done)]]}))\n\n;; (dbfx/reg-event-fx\n;;  :save-task\n;;  (fn [_cofx [_eid task-id description]]\n;;    {:fx [[:transact (domain/set-task-description task-id description)]]}))\n\n;; (dbfx/reg-event-fx\n;;  :delete-task\n;;  (fn [_cofx [_eid task-id]]\n;;    {:fx [[:transact (domain/delete-task task-id)]]}))\n\n;; -- View events (TodoMVC)\n\n;; (dbfx/reg-event-db\n;;  :apply-task-filter\n;;  [(dbfx/path [:task-filter])]\n;;  (fn [_db [_ new-filter-kw]]     ;; new-filter-kw is one of :all, :active or :done\n;;    new-filter-kw))\n\n;; -- Domain data subs / derived views ---------------------------------------------------\n\n(dbfx/reg-sub\n :devices\n :<- [:domain-data]\n (fn [ddb _]\n   (domain/get-devices ddb)))\n"]}