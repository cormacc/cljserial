{"version":3,"sources":["stack/services/webserial.cljs"],"mappings":"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","names":["stack.services.webserial/serial-event-interceptors","G__95016","stack.utils.dbfx/path","stack.utils.dbfx/inject-cofx","p__95024","map__95028","cljs.core/--destructure-map","cljs.core.get","stack.services.webserial/append-event","events","timestamp","event-type","bytes","cljs.core.assoc","G__95034","G__95035","G__95036","stack.utils.dbfx/reg-event-fx","p__95037","p__95038","map__95041","vec__95042","cljs.core.nth","db","_","G__95050","G__95051","G__95052","p__95055","p__95056","map__95058","vec__95059","_event_id","prev-event","cljs.core/last","cljs.core/vals","ongoing","cljs.core._EQ_","ts","data","G__95063","G__95064","stack.utils.dbfx/reg-sub","G__95065","G__95066","G__95067","G__95068","serial-state","stack.services.webserial/default-context","stack.utils.webserial/DEFAULTS","stack.services.webserial/controller","G__95081","statecharts.core/machine","G__95085","statecharts.core/assign","ctx","e","__run-fn-form","__kind","__ns","__id","__level","sf","taoensso.telemere.impl/*rt-sig-filter*","__inst","js/Date","__thread","__root0","taoensso.telemere.impl/*trace-root*","__otel-context1","__uid","__root1","__run-result","signal__42289__auto__","cljs.core/Delay","signal__42280__auto__","taoensso.telemere.impl/Signal","taoensso.telemere/*ctx*","taoensso.telemere.impl/*trace-parent*","temp__5821__auto__","taoensso.telemere/*middleware*","sig-middleware__42281__auto__","taoensso.telemere.impl/dispatch-signal!","taoensso.telemere.impl/WrappedSignal","G__95100","stack.utils.dbfx/dispatch","G__95104","p__95106","map__95107","key","cljs.core/first","value-text","cljs.core/second","value","cljs.core/re-matches","cljs.core.keyword","cljs.core/assoc-in","_ctx","_e","G__95153","stack.utils.webserial/is-supported?","G__95168","port","G__95172","stack.utils.webserial.open_port","G__95204","G__95206","port-id","stack.utils.webserial/describe-port","p1__95074#","stack.utils.webserial/go-read-text","G__95238","p__95253","map__95254","context","map__95261","line-terminator","cmd","stack.utils.webserial/write","port-info","stack.utils.webserial.forget_port","G__95298","signal__42279__auto__","cljs.core/reduce-kv","cljs.core/assoc","stack.services.webserial/init","stack.utils.hsm/register"],"sourcesContent":["(ns stack.services.webserial\n  (:require\n   [taoensso.telemere :as t]\n   [statecharts.core :as hsm]\n   [stack.utils.dbfx :as dbfx :refer [reg-event-fx inject-cofx reg-sub]]\n   [stack.utils.hsm :as hsm-dbfx]\n   [stack.utils.webserial :as wsi]))\n\n\n;; == Schema =====================================================================\n;; -- see stack.utils.term\n\n;; ============================================================================\n;; re-fx events and subscriptions\n\n;; TODO: Inject the db path during initialisation instead maybe?\n\n;; Define a standard set of interceptors for all serial port events\n(def serial-event-interceptors\n  ;; \"path\" interceptor: Update specified subsection of db rather than entire db\n  [(dbfx/path [:serial-term :events])\n   ;; Provide event timestamp as coeffect so our event handlers can be pure functions\n   (inject-cofx :timestamp)])\n\n(defn append-event [events {:keys [timestamp event-type bytes]}]\n  (assoc events timestamp {:timestamp timestamp\n                           :event-type event-type\n                           :event-data {:byte-encoding :text\n                                        :bytes bytes}}))\n\n;; Clients transmit a :serial-tx event containg commands/data to be transmitted\n;; This logs it to the app database, then generates an internal :webserial-tx event\n;; that triggers the statemachine to transmit data via the port\n;;\n;; N.B. this may need adaptation to allow for coexistence with a bluetooth serial\n;; connection.... TBD\n(reg-event-fx\n :serial-tx\n serial-event-interceptors\n (fn [{:keys [db timestamp]} [_ bytes]]\n   ;;DB effect: Append entry to the serial event database\n   {:db (append-event db {:timestamp timestamp\n                          :event-type :tx\n                          :bytes bytes})\n    ;;Coeffect - pass the request on to the statemachine to transmit\n    :fx [[:dispatch [:webserial-tx bytes]]]}))\n\n(reg-event-fx\n :serial-rx\n serial-event-interceptors\n (fn [{:keys [db timestamp]} [_event_id bytes]]\n   ;;Append to an ongoing rx event...\n   ;;As long data streams can be read over multiple rx events, if the previous recorded\n   ;;comms event is rx, we assume this is an ongoing event and consolidate.\n   ;;\n   ;;N.B. This does NOT do any command terminator parsing -- that's a higher level concern\n   ;;     to be dealt with by any subscribers to :webserial-rx\n   (let [prev-event (last (vals db))\n         ongoing (and (some? prev-event) (= (:event-type prev-event prev-event) :rx))\n         ts (if ongoing (:timestamp prev-event) timestamp)\n         data (if ongoing (str (:bytes (:event-data prev-event)) bytes) bytes)]\n     ;;DB effect: Append entry to the serial event database\n     {:db (append-event db {:timestamp ts\n                            :event-type :rx\n                            :bytes data})\n      ;;Coeffect: Notify any downstream listeners (e.g. CD handlers) that new rx data has been added to the DB\n      :fx [[:dispatch [:webserial-rx nil]]]})))\n\n(reg-sub\n :serial-data\n (fn [db _]\n   (:serial-term db))) ;;\n\n(reg-sub\n :serial-events\n :<- [:serial-data]\n (fn [serial-state _]\n   (:events serial-state))) ;;\n\n\n;; ============================================================================\n;; Controller - a statemachine\n;; See https://lucywang000.github.io/clj-statecharts/\n\n;;Initial context...\n;; TODO Write a Schema?\n;; ... also consider including event store in context here rather than separately in the refx db\n\n(def default-context {:port nil\n                      :serial-options wsi/DEFAULTS\n                      :line-terminator \"\\r\"})\n\n(def controller\n  (hsm/machine\n   {:id :webserial-service\n    :initial :disconnected\n    :context default-context\n\n    :states\n\n    {;; TOP-LEVEL STATE\n     :disconnected\n     {:initial :webserial_pending\n      :entry (hsm/assign (fn [ctx e]\n                           (t/log! :info \"Resetting port assignment\")\n                           (dbfx/dispatch [:webserial-disconnected])\n                           (assoc ctx :port nil)))\n      :on {:webserial-option {:actions\n                              (hsm/assign\n                               (fn [ctx {:keys [data]}]\n                                 (let [key (first data)\n                                       value-text (second data)\n                                       ;; TODO: Use malli coercion here instead?\n                                       value (if (re-matches #\"\\d+\" value-text)\n                                               (int value-text)\n                                               (keyword value-text))]\n                                   (t/log! :debug (str key \" : \" value))\n                                   (assoc-in ctx [:serial-options key] value))))}\n           :webserial-disconnected {:actions (fn [_ctx _e]\n                                               (t/log! :debug \"Ignoring initial disconnection\"))}\n           ;;FIXME: Some duplication here with webserial-has-port handler below...\n           ;; :webserial-port-connected {:actions (hsm/assign (fn [ctx e]\n           ;;                                                   (let [port (first (:data e))]\n           ;;\n           ;;                                                     (assoc ctx :port port))))\n           ;;                            ;; :target :opening_port\n           ;;                            }\n           :webserial-port-opened :connected}\n      :states\n      {:webserial_pending\n       {:entry (fn [ctx e]\n                 (dbfx/dispatch [(if (wsi/is-supported?)\n                                   :webserial-check-passed\n                                   :webserial-check-failed)]))\n        :on {:webserial-check-passed :port-pending\n             :webserial-check-failed :no-webserial}}\n       :no-webserial {}\n       :port-pending\n       {:entry (fn [ctx e]\n                  ;; Ideally we'd do this, however webserial port request must be initiated via ui element click\n                  ;; (wsi/await-port\n                  ;;  :on-success #(dbfx/dispatch [:ui/event :webserial-has-port %1])\n                  ;;  :on-failure #(dbfx/dispatch [:ui/event :webserial-no-port]))\n                 (t/log! :debug (str \"PORT PENDING\" ctx e)))\n        :on {:webserial-has-port {:actions (hsm/assign (fn [ctx e]\n                                                         ;;The ports get passed through as a sequence...\n                                                         (let [port (first (:data e))]\n                                                           ;;TODO: Does this stack? I.e. end up with multiple triggering on disconnection/reconnection?\n                                                           ;; (.addEventListener port \"connect\" #(dbfx/dispatch [:webserial-port-connected port]))\n                                                           (.addEventListener port \"disconnect\" #(dbfx/dispatch [:webserial-disconnected port]))\n\n                                                           (assoc ctx :port port))))\n                                  :target :opening_port}\n;;\n             }}\n       :opening_port\n       {:entry (fn [ctx e]\n                 (t/log! :debug (str \"WAITING TO OPEN PORT\" ctx))\n                 (wsi/open-port (:port ctx)\n                                :options (:serial-options ctx)\n                                :on-success #(dbfx/dispatch [:webserial-port-opened])\n                                :on-failure #(dbfx/dispatch [:webserial-port-open-failure])))\n        :on {:webserial-port-open-failure {:actions (fn [ctx e] (t/event! ::port-open-failure {:data {:context ctx :error e}}))}}}}}\n\n     ;; TOP-LEVEL STATE\n     :connected\n     {:entry (fn [ctx e]\n               ;; TODO: This was intended for a higher level machine working off webserial comms, but maybe better\n               ;;       to just subscribe to the context in the db instead....\n               ;; (dbfx/dispatch [:webserial-connected])\n               (let [port (:port ctx)\n                     port-id (wsi/describe-port port)]\n                 (t/log! :info {:port-id port-id})\n                 (wsi/go-read-text port #(dbfx/dispatch [:serial-rx %]))))\n      :on {:webserial-tx\n           {:actions (fn [context {:keys [data]}]\n                       (let [{:keys [port line-terminator]} context\n                             ;; The event parameters are wrapped in a vector - get first element\n                             cmd (first data)]\n                         (t/log! :info cmd)\n                         (wsi/write port (str cmd line-terminator))))}\n           :webserial-forget-port :disconnecting\n           :webserial-disconnected :disconnected}}\n\n     ;; TOP-LEVEL STATE\n     :disconnecting\n     {:entry (fn [ctx e]\n               (t/log! :info \"TODO: Forget request received - IMPLEMENT ME\")\n               (let [port (:port ctx)\n                     port-info (wsi/describe-port port)]\n                 (wsi/forget-port port {:on-success #(dbfx/dispatch [:webserial-port-forgotten])\n                                        :on-failure #(t/event! ::forget-port-failure {:level :error :port port-info})})))\n      :on {:webserial-port-forgotten :disconnected}}\n\n;; END TOP-LEVEL STATES\n     }}))\n\n(defn init []\n  (hsm-dbfx/register controller))\n"]}