{"version":3,"sources":["refx/cofx.cljc"],"mappings":";AAMA,iBAAA,jBAAKA;AAEL,qBAAA,rBAAMC,kDACHC,GAAGC;AADN,AAEE,OAACC,wBAAcJ,eAAKE,GAAGC;;AAIzB,AAAA,wBAAA,gCAAAE,xDAAME;AAAN,AAAA,IAAAD,WAAA,AAAA;AAAA,AAAA,QAAAA;KAAA;AAAA,OAAAC,oDAAA,CAAA,UAAA;;;KAAA;AAAA,OAAAA,oDAAA,CAAA,UAAA,MAAA,CAAA,UAAA;;;;AAAA,MAAA,KAAAC,MAAA,CAAA,8DAAA,AAAA;;;;;AAAA,CAAA,sDAAA,tDAAMD,iEACFL;AADJ,AAEG,gIAAA,kDAAA,8DAAA,zOAACO,mSAES,qCACGC;AADH,AAEE,IAAAC,qBAAiB,AAACC,mDAAgBZ,eAAKE;AAAvC,AAAA,oBAAAS;AAAA,cAAAA,VAASR;AAAT,AACE,8DAAA,vDAACU,+CAAOH,sEAAmBP;;AAC3B,6GAAA,tGAACW,uIAA2CZ;;;;;AAR7D,CAAA,sDAAA,tDAAMK,iEASFL,GAAGa;AATP,AAUG,gIAAA,kDAAA,8DAAA,zOAACN,mSAES,qCACGC;AADH,AAEE,IAAAC,qBAAiB,AAACC,mDAAgBZ,eAAKE;AAAvC,AAAA,oBAAAS;AAAA,cAAAA,VAASR;AAAT,AACE,8DAAA,vDAACU,+CAAOH,sEAAmBP,QAAQY;;AACnC,6GAAA,tGAACD,uIAA2CZ;;;;;AAhB7D,CAAA,gDAAA,hDAAMK;;AAAN,AAuBA,mBAAA,nBAACN,mEAEA,yCACGe;AADH,AAEE,+DAAA,gDAAA,AAAAC,xGAACC,8CAAMF,0EAAeG;;AAGzB,AAAKC,sBAAU,oDAAA,pDAACC","names":["refx.cofx/kind","refx.cofx/register","id","handler","refx.registry/add!","var_args","G__86462","refx.cofx/inject-cofx","js/Error","refx.interceptor.__GT_interceptor","context","temp__5821__auto__","refx.registry.lookup","cljs.core.update","refx.log.error","value","coeffects","cljs.core/deref","cljs.core.assoc","refx.db/app-db","refx.cofx/inject-db","refx.cofx.inject_cofx"],"sourcesContent":["(ns refx.cofx\n  (:require [refx.interceptor :refer [->interceptor]]\n            [refx.log :as log]\n            [refx.registry :as registry]\n            [refx.db :refer [app-db]]))\n\n(def kind :cofx)\n\n(defn register\n  [id handler]\n  (registry/add! kind id handler))\n\n;; -- Interceptor -------------------------------------------------------------\n\n(defn inject-cofx\n  ([id]\n   (->interceptor\n    :id      :coeffects\n    :before  (fn coeffects-before\n               [context]\n               (if-let [handler (registry/lookup kind id)]\n                 (update context :coeffects handler)\n                 (log/error \"No cofx handler registered for\" id)))))\n  ([id value]\n   (->interceptor\n    :id     :coeffects\n    :before  (fn coeffects-before\n               [context]\n               (if-let [handler (registry/lookup kind id)]\n                 (update context :coeffects handler value)\n                 (log/error \"No cofx handler registered for\" id))))))\n\n;; -- Builtin CoEffects Handlers  ---------------------------------------------\n\n;; :db\n;;\n;; Adds to coeffects the value in `app-db`, under the key `:db`\n(register\n :db\n (fn db-coeffects-handler\n   [coeffects]\n   (assoc coeffects :db @app-db)))\n\n;; Because this interceptor is used so much, we reify it\n(def inject-db (inject-cofx :db))\n\n"],"x_google_ignoreList":[0]}