{
"version":3,
"file":"module$node_modules$$supabase$postgrest_js$dist$cjs$PostgrestClient.js",
"lineCount":34,
"mappings":"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",
"sources":["node_modules/@supabase/postgrest-js/dist/cjs/PostgrestClient.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$$supabase$postgrest_js$dist$cjs$PostgrestClient\"] = function(global,require,module,exports) {\n\"use strict\";\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst PostgrestQueryBuilder_1 = __importDefault(require(\"./PostgrestQueryBuilder\"));\nconst PostgrestFilterBuilder_1 = __importDefault(require(\"./PostgrestFilterBuilder\"));\nconst constants_1 = require(\"./constants\");\n/**\n * PostgREST client.\n *\n * @typeParam Database - Types for the schema from the [type\n * generator](https://supabase.com/docs/reference/javascript/next/typescript-support)\n *\n * @typeParam SchemaName - Postgres schema to switch to. Must be a string\n * literal, the same one passed to the constructor. If the schema is not\n * `\"public\"`, this must be supplied manually.\n */\nclass PostgrestClient {\n    // TODO: Add back shouldThrowOnError once we figure out the typings\n    /**\n     * Creates a PostgREST client.\n     *\n     * @param url - URL of the PostgREST endpoint\n     * @param options - Named parameters\n     * @param options.headers - Custom headers\n     * @param options.schema - Postgres schema to switch to\n     * @param options.fetch - Custom fetch\n     */\n    constructor(url, { headers = {}, schema, fetch, } = {}) {\n        this.url = url;\n        this.headers = Object.assign(Object.assign({}, constants_1.DEFAULT_HEADERS), headers);\n        this.schemaName = schema;\n        this.fetch = fetch;\n    }\n    /**\n     * Perform a query on a table or a view.\n     *\n     * @param relation - The table or view name to query\n     */\n    from(relation) {\n        const url = new URL(`${this.url}/${relation}`);\n        return new PostgrestQueryBuilder_1.default(url, {\n            headers: Object.assign({}, this.headers),\n            schema: this.schemaName,\n            fetch: this.fetch,\n        });\n    }\n    /**\n     * Select a schema to query or perform an function (rpc) call.\n     *\n     * The schema needs to be on the list of exposed schemas inside Supabase.\n     *\n     * @param schema - The schema to query\n     */\n    schema(schema) {\n        return new PostgrestClient(this.url, {\n            headers: this.headers,\n            schema,\n            fetch: this.fetch,\n        });\n    }\n    /**\n     * Perform a function call.\n     *\n     * @param fn - The function name to call\n     * @param args - The arguments to pass to the function call\n     * @param options - Named parameters\n     * @param options.head - When set to `true`, `data` will not be returned.\n     * Useful if you only need the count.\n     * @param options.get - When set to `true`, the function will be called with\n     * read-only access mode.\n     * @param options.count - Count algorithm to use to count rows returned by the\n     * function. Only applicable for [set-returning\n     * functions](https://www.postgresql.org/docs/current/functions-srf.html).\n     *\n     * `\"exact\"`: Exact but slow count algorithm. Performs a `COUNT(*)` under the\n     * hood.\n     *\n     * `\"planned\"`: Approximated but fast count algorithm. Uses the Postgres\n     * statistics under the hood.\n     *\n     * `\"estimated\"`: Uses exact count for low numbers and planned count for high\n     * numbers.\n     */\n    rpc(fn, args = {}, { head = false, get = false, count, } = {}) {\n        let method;\n        const url = new URL(`${this.url}/rpc/${fn}`);\n        let body;\n        if (head || get) {\n            method = head ? 'HEAD' : 'GET';\n            Object.entries(args)\n                // params with undefined value needs to be filtered out, otherwise it'll\n                // show up as `?param=undefined`\n                .filter(([_, value]) => value !== undefined)\n                // array values need special syntax\n                .map(([name, value]) => [name, Array.isArray(value) ? `{${value.join(',')}}` : `${value}`])\n                .forEach(([name, value]) => {\n                url.searchParams.append(name, value);\n            });\n        }\n        else {\n            method = 'POST';\n            body = args;\n        }\n        const headers = Object.assign({}, this.headers);\n        if (count) {\n            headers['Prefer'] = `count=${count}`;\n        }\n        return new PostgrestFilterBuilder_1.default({\n            method,\n            url,\n            headers,\n            schema: this.schemaName,\n            body,\n            fetch: this.fetch,\n            allowEmpty: false,\n        });\n    }\n}\nexports.default = PostgrestClient;\n//# sourceMappingURL=PostgrestClient.js.map\n};"],
"names":["shadow$provide","global","require","module","exports","__importDefault","mod","__esModule","Object","defineProperty","value","PostgrestQueryBuilder_1","PostgrestFilterBuilder_1","constants_1","PostgrestClient","constructor","url","headers","schema","fetch","assign","DEFAULT_HEADERS","schemaName","from","relation","URL","default","rpc","fn","args","head","get","count","body","method","entries","filter","undefined","map","name","Array","isArray","join","forEach","searchParams","append","allowEmpty"]
}
