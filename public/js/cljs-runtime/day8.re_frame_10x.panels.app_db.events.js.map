{"version":3,"sources":["day8/re_frame_10x/panels/app_db/events.cljs"],"mappings":"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","names":["day8.re-frame-10x.panels.app-db.events/paths-interceptors","day8.re_frame_10x.inlined_deps.re_frame.v1v3v0.re_frame.core.path","day8.re-frame-10x.inlined-deps.re-frame.v1v3v0.re-frame.core/trim-v","day8.re_frame_10x.fx.local_storage.save","day8.re_frame_10x.inlined_deps.re_frame.v1v3v0.re_frame.core.reg_event_db","p__83149","vec__83150","cljs.core.nth","paths","open-new-inspectors?","cljs.core.assoc","js/Date.now","day8.re_frame_10x.inlined_deps.re_frame.v1v3v0.re_frame.core.reg_event_fx","p__83180","p__83181","map__83182","cljs.core/--destructure-map","cljs.core.get","vec__83183","db","skip-to-path","path-id","p__83189","vec__83192","map__83195","id","path-str","path","day8.re-frame-10x.tools.reader.edn/read-string-maybe","valid?","cljs.core/sequential?","clojure.string/blank?","cljs.core/assoc-in","G__83204","p__83209","vec__83210","map__83215","valid-path?","cljs.core.pr_str","p__83220","vec__83222","open?","p__83228","vec__83229","diff?","cljs.core.get_in","p__83236","vec__83237","cljs.core.dissoc","p__83241","vec__83242","_","p__83245","vec__83246","search-string","p__83251","vec__83252","p__83260","vec__83261","cljs.core/contains?","cljs.core.disj","cljs.core.conj","re-frame.interop/reagent-id","re-frame.db/app-db","p__83268","vec__83270","sort","p__83297","vec__83298","data-path-annotations?","p__83312","vec__83316","map__83319","expand?","map__83327","was-expanded?","cljs.core/not","p__83358","vec__83359","p__83362","vec__83364","p__83369","vec__83370","map__83373","value","refresh?","G__83375","cljs.core.update","cljs.core/assoc","zprint.core.zprint_str","cljs.core.update_in","cljs.core/inc","day8.re_frame_10x.inlined_deps.re_frame.v1v3v0.re_frame.core.reg_sub","p__83382","vec__83384","re_frame.core.reg_event_db","p__83392","vec__83396","s","new-data","cljs.core/seq","day8.re-frame-10x.panels.app-db.events/read-file","file","callback","file-reader","js/FileReader","p1__83412#","G__83413","day8.re-frame-10x.inlined-deps.re-frame.v1v3v0.re-frame.core/reg-fx","p__83418","map__83421","vec__83422","m","p1__83416#","day8.re-frame-10x.inlined-deps.re-frame.v1v3v0.re-frame.core/dispatch","p__83429","vec__83430","on-read","filename","contents","blob","js/Blob","url","js/URL","link","js/document.createElement","js/document.body","p__83440","vec__83441","day8.re-frame-10x.inlined-deps.re-frame.v1v3v0.re-frame.core/reg-cofx","cofx","rect","or__5002__auto__","G__83444","cljs.core/deref","day8.re-frame-10x.fx.window/popout-window","js/document","cljs.core.into","day8.re_frame_10x.inlined_deps.re_frame.v1v3v0.re_frame.core.inject_cofx","p__83447","p__83448","map__83450","vec__83451","vec__83454","map__83457","vec__83458","wx","wy","data","data-path","mx","my"],"sourcesContent":["(ns day8.re-frame-10x.panels.app-db.events\n  (:require\n   [re-frame.db]\n   [re-frame.interop]\n   [re-frame.core]\n   [clojure.string                                               :as string]\n   [zprint.core                                                  :as zp]\n   [day8.re-frame-10x.inlined-deps.re-frame.v1v3v0.re-frame.core :as rf]\n   [day8.re-frame-10x.tools.coll                                 :as tools.coll]\n   [day8.re-frame-10x.fx.window                                  :refer [popout-window]]\n   [day8.re-frame-10x.fx.local-storage                           :as local-storage]\n   [day8.re-frame-10x.tools.reader.edn                           :as reader.edn]))\n\n(def paths-interceptors\n  [(rf/path [:app-db :paths])\n   rf/trim-v\n   (local-storage/save \"app-db-paths\")])\n\n;; The core idea with :app-db/update-path and :app-db/update-path-blur\n;; is that we need to separate the users text input (`path-str`) with the\n;; parsing of that string (`path`). We let the user type any string that\n;; they like, and check it for validity on each change. If it is valid\n;; then we update `path` and mark the pod as valid. If it isn't valid then\n;; we don't update `path` and mark the pod as invalid.\n;;\n;; On blur of the input, we reset path-str to the last valid path, if\n;; the pod isn't currently valid.\n\n(rf/reg-event-db\n ::create-path\n paths-interceptors\n (fn [paths [open-new-inspectors?]]\n   (assoc paths\n          (js/Date.now)\n          {:diff?       false\n           :open?       open-new-inspectors?\n           :path        nil\n           :path-str    \"\"\n           :valid-path? true})))\n\n(rf/reg-event-fx\n ::create-path-and-skip-to\n paths-interceptors\n (fn [{:keys [db]} [skip-to-path open-new-inspectors?]]\n   (let [path-id (js/Date.now)]\n     {:db       (assoc db\n                       path-id\n                       {:diff?       false\n                        :open?       open-new-inspectors?\n                        :path        nil\n                        :path-str    \"\"\n                        :valid-path? true})\n      :dispatch [::update-path {:id path-id :path-str skip-to-path}]})))\n\n(rf/reg-event-db\n ::update-path\n paths-interceptors\n (fn [paths [{:keys [id path-str]}]]\n   (let [path  (reader.edn/read-string-maybe path-str)\n         valid? (or (and (some? path) (sequential? path))\n                    (string/blank? path-str))]\n     (-> paths\n         (assoc-in [id :path-str] path-str)\n         (assoc-in [id :valid-path?] valid?)\n         (cond-> valid? (assoc-in [id :path] path))))))\n\n(rf/reg-event-db\n ::update-path-blur\n paths-interceptors\n (fn [paths [path-id]]\n   (let [{:keys [valid-path? path]} (get paths path-id)]\n     (if valid-path?\n       paths\n       (-> (assoc-in paths [path-id :path-str] (pr-str path))\n           (assoc-in [path-id :valid-path?] true))))))\n\n(rf/reg-event-db\n ::set-path-visibility\n paths-interceptors\n (fn [paths [path-id open?]]\n   (assoc-in paths [path-id :open?] open?)))\n\n(rf/reg-event-db\n ::set-diff-visibility\n paths-interceptors\n (fn [paths [path-id diff?]]\n   (let [open? (if diff?\n                 true\n                 (get-in paths [path-id :open?]))]\n     (-> paths\n         (assoc-in [path-id :diff?] diff?)\n          ;; If we turn on diffing then we want to also expand the path\n         (assoc-in [path-id :open?] open?)))))\n\n(rf/reg-event-db\n ::remove-path\n paths-interceptors\n (fn [paths [path-id]]\n   (dissoc paths path-id)))\n\n(rf/reg-event-db\n ::paths\n paths-interceptors\n (fn [_ [paths]]\n   paths))\n\n;; [IJ] TODO: This doesn't appear to be used anywhere:\n(rf/reg-event-db\n ::set-search-string\n [(rf/path [:app-db :search-string]) rf/trim-v]\n (fn [_ [search-string]]\n   search-string))\n\n(rf/reg-event-db\n ::set-json-ml-paths\n [(rf/path [:app-db :json-ml-expansions]) rf/trim-v (local-storage/save \"app-db-json-ml-expansions\")]\n (fn [_ [paths]]\n   paths))\n\n(rf/reg-event-db\n ::toggle-expansion\n [(rf/path [:app-db :json-ml-expansions]) rf/trim-v (local-storage/save \"app-db-json-ml-expansions\")]\n (fn [paths [path]]\n   (if (contains? paths path)\n     (disj paths path)\n     (conj paths path))))\n\n(rf/reg-event-db\n ::reagent-id\n [(rf/path [:app-db :reagent-id])]\n (fn [_ _]\n   (re-frame.interop/reagent-id re-frame.db/app-db)))\n\n(rf/reg-event-db\n ::set-sort-form?\n paths-interceptors\n (fn [paths [path-id sort]]\n   (-> paths\n       (assoc-in [path-id :sort?] sort))))\n\n(rf/reg-event-db\n ::set-data-path-annotations?\n [(rf/path [:app-db :data-path-annotations?]) rf/trim-v (local-storage/save \"data-path-annotations?\")]\n (fn [_ [data-path-annotations?]]\n   data-path-annotations?))\n\n(rf/reg-event-db\n ::expand\n paths-interceptors\n (fn [paths [{:keys [id expand?]}]]\n   (let [{was-expanded? :expand?} (get paths id)]\n     (assoc-in paths [id :expand?] (if (some? expand?)\n                                     expand?\n                                     (not was-expanded?))))))\n\n(rf/reg-event-db\n ::start-edit\n paths-interceptors\n (fn [paths [id]]\n   (assoc-in paths [id :editing?] true)))\n\n(rf/reg-event-db\n ::finish-edit\n paths-interceptors\n (fn [paths [id]]\n   (assoc-in paths [id :editing?] false)))\n\n(rf/reg-event-db\n ::set-edit-str\n paths-interceptors\n (fn [paths [{:keys [id value refresh?]}]]\n   (cond-> paths\n     :do (update id assoc :edit-str (zp/zprint-str value {:parse-string? true}))\n     refresh? (update-in [id :editor-key] inc))))\n\n(rf/reg-sub\n ::editor-key\n (fn [db [_ id]]\n   (get-in db [:app-db :paths id :editor-key])))\n\n(re-frame.core/reg-event-db\n ::edit\n (fn [db [_ path s]]\n   (let [new-data (reader.edn/read-string-maybe s)]\n     (if-not (seq path)\n       new-data\n       (assoc-in db path new-data)))))\n\n(defn read-file [file callback]\n  (let [file-reader (js/FileReader.)]\n    (set! (.-onload ^js file-reader)\n          #(callback (.-result (.-target %))))\n    (.readAsText ^js file-reader file)))\n\n(rf/reg-fx\n :read-file\n (fn [{:keys [file] [id m] :on-read}]\n   (read-file file #(rf/dispatch [id (assoc m :value %)]))))\n\n(rf/reg-event-fx\n ::open-file\n (fn [_ [_ file on-read]]\n   {:read-file {:file file\n                :on-read on-read}}))\n\n(rf/reg-fx\n ::save-to-file\n (fn [filename contents]\n   (let [blob (js/Blob. #js [contents] #js {:type \"text/plain\"})\n         url (str (.createObjectURL js/URL blob))\n         link (js/document.createElement \"a\")]\n     (set! (.-href link) url)\n     (set! (.-download link) filename)\n     (.appendChild js/document.body link)\n     (.click link)\n     (.remove link))))\n\n(rf/reg-event-fx\n ::save-to-file\n (fn [_ [_ s]]\n   {::save-to-file s}))\n\n(rf/reg-cofx\n ::window-bounds\n (fn [cofx]\n   (let [rect (-> (or (some-> @popout-window .-document) js/document)\n                  (.getElementById \"--re-frame-10x--\")\n                  .-shadowRoot\n                  (.getElementById \"re-frame-10x__ui-container\")\n                  .getBoundingClientRect)]\n     (into cofx {::window-bounds [(.-x rect) (.-y rect)]}))))\n\n(rf/reg-event-fx\n ::open-popup-menu\n [(rf/inject-cofx ::window-bounds)]\n (fn [{:keys [db] [wx wy] ::window-bounds}\n      [_ {:keys [path data data-path] [mx my] :mouse-position}]]\n   {:db (assoc db :popup-menu {:showing? true\n                               :position [(- mx wx) (- my wy)]\n                               :path     path\n                               :data     data\n                               :data-path data-path})}))\n\n(rf/reg-event-db\n ::close-popup-menu\n (fn [db _] (assoc db :popup-menu {:showing? false})))\n"],"x_google_ignoreList":[0]}