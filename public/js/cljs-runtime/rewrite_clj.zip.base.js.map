{"version":3,"sources":["rewrite_clj/zip/base.cljc"],"mappings":"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","names":["var_args","G__66576","rewrite-clj.zip.base/of-node*","js/Error","node","rewrite_clj.zip.base.of_node_STAR_","opts","rewrite-clj.custom-zipper.core/custom-zipper","rewrite-clj.custom-zipper.core/zipper","rewrite-clj.zip.options/set-opts","G__66588","rewrite-clj.zip.base/of-node","rewrite_clj.zip.base.of_node","cljs.core._EQ_","rewrite-clj.node.protocols/tag","top","or__5002__auto__","rewrite-clj.custom-zipper.core/down","rewrite_clj.zip.whitespace.skip_whitespace","rewrite-clj.node.forms/forms-node","G__66602","rewrite-clj.zip.base/edn*","rewrite_clj.zip.base.edn_STAR_","G__66610","rewrite-clj.zip.base/edn","rewrite_clj.zip.base.edn","rewrite-clj.zip.base/tag","zloc","G__66624","rewrite-clj.custom-zipper.core/node","rewrite-clj.zip.base/sexpr-able?","G__66626","rewrite-clj.node.protocols/sexpr-able?","rewrite-clj.zip.base/sexpr","G__66629","rewrite_clj.node.protocols.sexpr","rewrite-clj.zip.options/get-opts","rewrite-clj.zip.base/child-sexprs","G__66635","rewrite_clj.node.protocols.child_sexprs","rewrite-clj.zip.base/length","G__66637","rewrite-clj.node.protocols/length","rewrite-clj.zip.base/value","G__66638","rewrite-clj.node.protocols/value","G__66641","rewrite-clj.zip.base/of-string*","s","rewrite_clj.zip.base.of_string_STAR_","G__66644","rewrite-clj.parser/parse-string-all","G__66647","rewrite-clj.zip.base/of-string","rewrite_clj.zip.base.of_string","G__66650","rewrite-clj.zip.base/string","G__66655","rewrite-clj.node.protocols/string","rewrite-clj.zip.base/->string","rewrite-clj.zip.base/root-string","G__66659","rewrite-clj.custom-zipper.core/root","rewrite-clj.zip.base/->root-string","rewrite-clj.zip.base/print!","_writer","cljs.core/string-print","G__66664","rewrite-clj.zip.base/print","writer","G__66666","rewrite_clj.zip.base.print","G__66678","rewrite-clj.zip.base/print-root","G__66682","rewrite_clj.zip.base.print_root"],"sourcesContent":["(ns ^:no-doc rewrite-clj.zip.base\n  (:refer-clojure :exclude [print])\n  (:require [rewrite-clj.custom-zipper.core :as zraw]\n            [rewrite-clj.node.forms :as nforms]\n            [rewrite-clj.node.protocols :as node]\n            [rewrite-clj.parser :as p]\n            [rewrite-clj.zip.options :as options]\n            [rewrite-clj.zip.whitespace :as ws]))\n\n#?(:clj (set! *warn-on-reflection* true))\n\n;; ## Zipper\n\n(defn of-node*\n  \"Create and return zipper from a rewrite-clj `node` (likely parsed by [[rewrite-clj.parser]]).\n\n  Optional `opts` can specify:\n  - `:track-position?` set to `true` to enable ones-based row/column tracking, see [docs on position tracking](/doc/01-user-guide.adoc#position-tracking).\n  - `:auto-resolve` specify a function to customize namespaced element auto-resolve behavior, see [docs on namespaced elements](/doc/01-user-guide.adoc#namespaced-elements)\"\n  ([node]\n   (of-node* node {}))\n  ([node opts]\n   (-> (if (:track-position? opts)\n         (zraw/custom-zipper node)\n         (zraw/zipper node))\n       (options/set-opts opts))))\n\n(defn of-node\n  \"Create and return zipper from a rewrite-clj `node` (likely parsed by [[rewrite-clj.parser]]),\n  and move to the first non-whitespace/non-comment child. If node is not forms node, is wrapped in forms node\n  for a consistent root.\n  Optional `opts` can specify:\n  - `:track-position?` set to `true` to enable ones-based row/column tracking, see [docs on position tracking](/doc/01-user-guide.adoc#position-tracking).\n  - `:auto-resolve` specify a function to customize namespaced element auto-resolve behavior, see [docs on namespaced elements](/doc/01-user-guide.adoc#namespaced-elements)\"\n  ([node] (of-node node {}))\n  ([node opts]\n   (loop [node node opts opts]\n     (if (= (node/tag node) :forms)\n       (let [top (of-node* node opts)]\n         (or (-> top zraw/down ws/skip-whitespace)\n             top))\n       (recur (nforms/forms-node [node]) opts)))))\n\n(defn edn*\n  \"DEPRECATED. Renamed to [[of-node*]].\"\n  ([node]\n   (edn* node {}))\n  ([node opts]\n   (of-node* node opts)))\n\n(defn edn\n  \"DEPRECATED. Renamed to [[of-node]].\"\n  ([node] (edn node {}))\n  ([node opts]\n   (of-node node opts)))\n\n;; ## Inspection\n\n(defn tag\n  \"Return tag of current node in `zloc`.\"\n  [zloc]\n  (some-> zloc zraw/node node/tag))\n\n(defn sexpr-able?\n  \"Return true if current node's element type in `zloc` can be [[sexpr]]-ed.\n\n   See [related docs in user guide](/doc/01-user-guide.adoc#not-all-clojure-is-sexpr-able)\"\n  [zloc]\n  (some-> zloc zraw/node node/sexpr-able?))\n\n(defn sexpr\n  \"Return s-expression (the Clojure form) of current node in `zloc`.\n\n  See docs for [sexpr nuances](/doc/01-user-guide.adoc#sexpr-nuances).\"\n  ([zloc]\n   (some-> zloc zraw/node (node/sexpr (options/get-opts zloc)))))\n\n(defn child-sexprs\n  \"Return s-expression (the Clojure forms) of children of current node in `zloc`.\n\n  See docs for [sexpr nuances](/doc/01-user-guide.adoc#sexpr-nuances).\"\n  ([zloc]\n   (some-> zloc zraw/node (node/child-sexprs (options/get-opts zloc)))))\n\n(defn length\n  \"Return length of printable [[string]] of current node in `zloc`.\"\n  [zloc]\n  (or (some-> zloc zraw/node node/length) 0))\n\n(defn value\n  \"DEPRECATED. Return a tag/s-expression pair for inner nodes, or\n   the s-expression itself for leaves.\"\n  [zloc]\n  (some-> zloc zraw/node node/value))\n\n;; ## Read\n(defn of-string*\n  \"Create and return zipper from all forms in Clojure/ClojureScript/END string `s`, and do no automatic move.\n\n  See [[of-string]] for same but with automatic move to first interesting node.\n\n  Optional `opts` can specify:\n  - `:track-position?` set to `true` to enable ones-based row/column tracking, see [docs on position tracking](/doc/01-user-guide.adoc#position-tracking).\n  - `:auto-resolve` specify a function to customize namespaced element auto-resolve behavior, see [docs on namespaced elements](/doc/01-user-guide.adoc#namespaced-elements)\"\n  ([s] (of-string* s {}))\n  ([s opts]\n   (some-> s p/parse-string-all (of-node* opts))))\n\n(defn of-string\n  \"Create and return zipper from all forms in Clojure/ClojureScript/EDN string `s`, and move to the first non-whitespace/non-comment child.\n\n  See [[of-string*]] for same but with no automatic move.\n\n  Optional `opts` can specify:\n  - `:track-position?` set to `true` to enable ones-based row/column tracking, see [docs on position tracking](/doc/01-user-guide.adoc#position-tracking).\n  - `:auto-resolve` specify a function to customize namespaced element auto-resolve behavior, see [docs on namespaced elements](/doc/01-user-guide.adoc#namespaced-elements)\"\n  ([s] (of-string s {}))\n  ([s opts]\n   (some-> s p/parse-string-all (of-node opts))))\n\n#?(:clj\n   (defn of-file*\n     \"Create and return zipper from all forms in Clojure/ClojureScript/EDN File `f`, and do no automatic move.\n\n     See [[of-file]] for same but with automatic move to first interesting node.\n\n     Optional `opts` can specify:\n     - `:track-position?` set to `true` to enable ones-based row/column tracking, see [docs on position tracking](/doc/01-user-guide.adoc#position-tracking).\n     - `:auto-resolve` specify a function to customize namespaced element auto-resolve behavior, see [docs on namespaced elements](/doc/01-user-guide.adoc#namespaced-elements)\"\n     ([f] (of-file* f {}))\n     ([f opts]\n      (some-> f p/parse-file-all (of-node* opts)))))\n\n#?(:clj\n   (defn of-file\n     \"Create and return zipper from all forms in Clojure/ClojureScript/EDN File `f`, and move to the first non-whitespace/non-comment child.\n\n     See [[of-file*]] for same but with no automatic move.\n\n     Optional `opts` can specify:\n     - `:track-position?` set to `true` to enable ones-based row/column tracking, see [docs on position tracking](/doc/01-user-guide.adoc#position-tracking).\n     - `:auto-resolve` specify a function to customize namespaced element auto-resolve behavior, see [docs on namespaced elements](/doc/01-user-guide.adoc#namespaced-elements)\"\n     ([f] (of-file f {}))\n     ([f opts]\n      (some-> f p/parse-file-all (of-node opts)))))\n\n;; ## Write\n\n(defn string\n  \"Return string representing the current node in `zloc`.\"\n  [zloc]\n  (some-> zloc zraw/node node/string))\n\n(defn ->string\n  \"DEPRECATED. Renamed to [[string]].\"\n  [zloc]\n  (string zloc))\n\n(defn root-string\n  \"Return string representing the zipped-up `zloc` zipper.\"\n  [zloc]\n  (some-> zloc zraw/root node/string))\n\n(defn ->root-string\n  \"DEPRECATED. Renamed to [[root-string]].\"\n  [zloc]\n  (root-string zloc))\n\n#?(:clj\n   (defn- print! [^String s writer]\n     (if writer\n       (.write ^java.io.Writer writer s)\n       (recur s *out*)))\n   :cljs\n   (defn- print! [s _writer]\n     (string-print s)))\n\n(defn print\n  \"Print current node in `zloc`.\n\n   NOTE: Optional `writer` is currently ignored for ClojureScript.\"\n  ([zloc writer]\n   (some-> zloc\n           string\n           (print! writer)))\n  ([zloc] (print zloc nil)))\n\n(defn print-root\n  \"Zip up and print `zloc` from root node.\n\n   NOTE: Optional `writer` is currently ignored for ClojureScript.\"\n  ([zloc writer]\n   (some-> zloc\n           root-string\n           (print! writer)))\n  ([zloc] (print-root zloc nil)))\n"],"x_google_ignoreList":[0]}