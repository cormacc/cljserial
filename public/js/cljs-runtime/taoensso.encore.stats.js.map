{"version":3,"sources":["taoensso/encore/stats.cljc"],"mappings":"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","names":["this__5287__auto__","writer__5288__auto__","opt__5289__auto__","cljs.core/-write","taoensso.encore.stats/SortedLongs","taoensso.encore.stats/->SortedLongs","a","x","taoensso.encore.str_impl","_","idx","not-found","max-idx","f","init","cljs.core.reduce","acc","i","G__59982","G__59983","cljs.core.range","taoensso.encore.stats/SortedDoubles","taoensso.encore.stats/->SortedDoubles","G__60011","G__60012","taoensso.encore.stats/sorted-longs?","taoensso.encore.stats/sorted-doubles?","taoensso.encore.stats/sorted-nums?","var_args","G__60030","taoensso.encore.stats/sorted-longs","js/Error","nums","taoensso.encore.stats.sorted_longs","allow-mutation?","cljs.core.long_array","cljs.core/array?","cljs.core/aclone","cljs.core/to-array","taoensso.encore.stats.goog$module$goog$array.sort","G__60040","taoensso.encore.stats/sorted-doubles","taoensso.encore.stats.sorted_doubles","cljs.core.double_array","taoensso.encore.stats/fast-first","cljs.core.nth","G__60043","taoensso.encore.stats/sorted-nums","taoensso.encore.stats.sorted_nums","temp__5823__auto__","n1","taoensso.encore/float?","taoensso.encore.stats/weighted-nth","idx-floor","Math/floor","idx-ceil","Math/ceil","weight-floor","weight-ceil","taoensso.encore.stats/percentile","pnum","snums","cljs.core/count","Math/round","taoensso.encore/as-pnum!","taoensso.encore.stats/percentiles","taoensso.encore.stats/bessel-correction","n","add","taoensso.encore.stats/rf-sum","in","taoensso.encore.stats/rf-sum-variance","xbar","Math/pow","taoensso.encore.stats/rf-sum-abs-deviation","central-point","Math/abs","taoensso.encore.stats/SummaryStats","taoensso.encore.stats/->SummaryStats","xfloats?","nx","xsum","xmin","xmax","xlast","p25","p50","p75","p90","p95","p99","xvar-sum","xmad-sum","this","taoensso.encore.stats/deref-sstats","ss","fin","p1__60107#","cljs.core/double","cljs.core/with-meta","G__60135","G__60120","G__60130","G__60131","G__60128","G__60134","G__60126","G__60129","G__60136","G__60127","taoensso.encore.stats/summary-stats?","G__60155","taoensso.encore.stats/summary-stats","taoensso.encore.stats.summary_stats","opts","cljs.core/map?","map__60162","cljs.core/--destructure-map","cljs.core.get","sum","min","max","last","var-sum","mad-sum","floats?","b2__38440__auto__","e","cljs.core/find","cljs.core/val","cljs.core/meta","temp__5821__auto__","vec__60180","vec__60183","taoensso.encore.reduce_multi","cljs.core.partial","G__60211","taoensso.encore.stats/summary-stats-merge","ss1","ss2","nx1","nx2","xfloats1?","xsum1","xmin1","xmax1","p25-1","p50-1","p75-1","p90-1","p95-1","p99-1","xvar-sum1","xmad-sum1","xfloats2?","xsum2","xmin2","xmax2","xlast2","p25-2","p50-2","p75-2","p90-2","p95-2","p99-2","xvar-sum2","xmad-sum2","xfloats3?","or__5002__auto__","nx3","nx1-ratio","nx2-ratio","xsum3","xmin3","xmax3","xvar-sum3","xmad-sum3","p25-3","p50-3","p75-3","p90-3","p95-3","p99-3","G__60275","taoensso.encore.stats/buf-new","taoensso.encore.stats/buf-add","buf","taoensso.encore.stats/buf-len","taoensso$encore$stats$ISummaryStatsBuffered$ssb_deref$dyn","x__5350__auto__","m__5351__auto__","taoensso.encore.stats/ssb-deref","goog/typeOf","m__5349__auto__","cljs.core/missing-protocol","G__60342","taoensso$encore$stats$ISummaryStatsBuffered$ssb_clear$dyn","taoensso.encore.stats/ssb-clear","taoensso$encore$stats$ISummaryStatsBuffered$ssb_flush$dyn","taoensso.encore.stats/ssb-flush","taoensso$encore$stats$ISummaryStatsBuffered$ssb_push$dyn","taoensso.encore.stats/ssb-push","taoensso.encore.stats/ISummaryStatsBuffered","flush?","taoensso.encore.stats/summary-stats-clear!","stateful-summary-stats","unused__11220__auto__","self__","G__60458","args60439","cljs.core/PROTOCOL_SENTINEL","taoensso.encore.stats/SummaryStatsBuffered","taoensso.encore.stats/->SummaryStatsBuffered","sstats_","buf_","buf-size","merge-counter","merge-cb","cljs.core/deref","mc","and__5000__auto__","cljs.core/reset!","taoensso.encore.stats.buf_new","vec__60501","drained","cljs.core/reset-vals!","t0","taoensso.encore/now-nano","sstats-drained","sstats-merged","G__60509","old","taoensso.encore.stats.summary_stats_merge","G__60513","G__60514","nmax","G__60567","taoensso.encore.stats/summary-stats-buffered","p__60595","map__60599","taoensso.encore.stats.summary_stats_buffered","buffer-size","buffer-init","sstats-init","taoensso.encore/latom","cljs.core/long","taoensso.encore.counter","taoensso.encore.stats/summary-stats-buffered-fast","taoensso.encore.stats/summary-stats-buffered?","taoensso.encore.stats/summary-stats-stateful?","__w"],"sourcesContent":["(ns ^:no-doc taoensso.encore.stats\n  \"Private stats utils.\n  Experimental, subject to change without notice!\"\n  {:added \"Encore v3.98.0 (2024-04-08)\"}\n  (:require\n   [clojure.string  :as str]\n   [taoensso.encore :as enc  :refer [have have? have!]]\n   #?(:cljs [goog.array]))\n\n  #?(:clj (:import [java.util LinkedList])))\n\n(comment\n  (remove-ns 'taoensso.encore.stats)\n  (:api (enc/interns-overview)))\n\n;; TODO Add `SummaryStatsRolling` (rolling by max len and/or date)?\n\n;;;;\n\n#?(:clj (let [c (Class/forName \"[J\")] (defn longs?   \"Returns true iff given array of longs\"   [x] (instance? c x))))\n#?(:clj (let [c (Class/forName \"[D\")] (defn doubles? \"Returns true iff given array of doubles\" [x] (instance? c x))))\n\n;;;; Sorted nums\n\n(deftype SortedLongs [^longs a]\n  #?@(:clj\n      [Object               (toString [x] (enc/str-impl x \"taoensso.encore.stats.SortedLongs\" {:length (alength a)}))\n       clojure.lang.Counted (count    [_] (alength a))\n       clojure.lang.Indexed\n       (nth [_ idx          ] (aget a idx))\n       (nth [_ idx not-found]\n         (let [max-idx (dec (alength a))]\n           (enc/cond\n             (> idx max-idx) not-found\n             (< idx max-idx) not-found\n             :else (aget a idx))))\n\n       clojure.lang.IReduceInit\n       (reduce [_ f init]\n         #_(areduce a i acc init (f acc (aget a i)))\n         (reduce (fn [acc idx]   (f acc (aget a idx)))\n           init (range (alength a))))]\n\n      :cljs\n      [Object   (toString [x] (enc/str-impl x \"taoensso.encore.stats.SortedLongs\" {:length (alength a)}))\n       ICounted (-count   [_] (alength a))\n       IIndexed\n       (-nth [_ idx          ] (aget a idx))\n       (-nth [_ idx not-found]\n         (let [max-idx (dec (alength a))]\n           (enc/cond\n             (> idx max-idx) not-found\n             (< idx max-idx) not-found\n             :else (aget a idx))))\n\n       IReduce\n       (-reduce [_ f init]\n         #_(areduce a i acc init (f acc (aget a i)))\n         (reduce (fn [acc i]     (f acc (aget a i)))\n           init (range (alength a))))]))\n\n(deftype SortedDoubles [^doubles a]\n  #?@(:clj\n      [Object               (toString [x] (enc/str-impl x \"taoensso.encore.stats.SortedDoubles\" {:length (alength a)}))\n       clojure.lang.Counted (count    [_] (alength a))\n       clojure.lang.Indexed\n       (nth [_ idx          ] (aget a idx))\n       (nth [_ idx not-found]\n         (let [max-idx (dec (alength a))]\n           (enc/cond\n             (> idx max-idx) not-found\n             (< idx max-idx) not-found\n             :else (aget a idx))))\n\n       clojure.lang.IReduceInit\n       (reduce [_ f init]\n         #_(areduce a i acc init (f acc (aget a i)))\n         (reduce (fn [acc idx]   (f acc (aget a idx)))\n           init (range (alength a))))]\n\n      :cljs\n      [Object   (toString [x] (enc/str-impl x \"taoensso.encore.stats.SortedDoubles\" {:length (alength a)}))\n       ICounted (-count   [_] (alength a))\n       IIndexed\n       (-nth [_ idx          ] (aget a idx))\n       (-nth [_ idx not-found]\n         (let [max-idx (dec (alength a))]\n           (enc/cond\n             (> idx max-idx) not-found\n             (< idx max-idx) not-found\n             :else (aget a idx))))\n\n       IReduce\n       (-reduce [_ f init]\n         #_(areduce a i acc init (f acc (aget a i)))\n         (reduce (fn [acc i]     (f acc (aget a i)))\n           init (range (alength a))))]))\n\n(defn sorted-longs?   [x] (instance? SortedLongs   x))\n(defn sorted-doubles? [x] (instance? SortedDoubles x))\n(defn sorted-nums?    [x] (or (sorted-longs? x) (sorted-doubles? x)))\n\n(defn sorted-longs\n  \"Returns `SortedLongs` given `SortedLongs`, `SortedDoubles`, or num seq.\"\n  (^SortedLongs [                nums] (sorted-longs false nums))\n  (^SortedLongs [allow-mutation? nums]\n   (enc/cond\n     (sorted-longs?   nums)                                               nums\n     (sorted-doubles? nums) (SortedLongs. (long-array (.-a ^SortedDoubles nums)))\n     :else\n     #?(:clj\n        (let [^longs a (if (longs? nums) (if allow-mutation? nums (aclone ^longs nums)) (long-array nums))]\n          (java.util.Arrays/sort a) ; O(n.log(n)) on JDK 7+\n          (SortedLongs.          a))\n\n        :cljs\n        (let [a (if (array? nums) (if allow-mutation? nums (aclone nums)) (to-array nums))]\n          (goog.array/sort a)\n          (SortedLongs.    a))))))\n\n(defn sorted-doubles\n  \"Returns `SortedDoubles` given `SortedDoubles`, `SortedLongs`, or num seq.\"\n  (^SortedDoubles [                nums] (sorted-doubles false nums))\n  (^SortedDoubles [allow-mutation? nums]\n   (enc/cond\n     (sorted-doubles? nums)                                                 nums\n     (sorted-longs?   nums) (SortedDoubles. (double-array (.-a ^SortedLongs nums)))\n     :else\n     #?(:clj\n        (let [^doubles a (if (doubles? nums) (if allow-mutation? nums (aclone ^doubles nums)) (double-array nums))]\n          (java.util.Arrays/sort a) ; O(n.log_n) on JDK 7+\n          (SortedDoubles.        a))\n\n        :cljs\n        (let [a (if (array? nums) (if allow-mutation? nums (aclone nums)) (to-array nums))]\n          (goog.array/sort a)\n          (SortedDoubles.  a))))))\n\n(comment (into [] (sorted-doubles (sorted-longs [3 1 2]))))\n\n(defn- fast-first [x]\n  #?(:cljs (nth x 0 nil)\n     :clj\n     (if (instance? LinkedList x)\n       (.peekFirst ^LinkedList x)\n       (nth x 0 nil))))\n\n(defn sorted-nums\n  \"Returns `SortedLongs` or `SortedDoubles`,\n  given `SortedLongs`, `SortedDoubles`, or num seq.\"\n  ([                nums] (sorted-nums false nums))\n  ([allow-mutation? nums]\n   [nums]\n   (enc/cond\n     (sorted-longs?   nums) nums\n     (sorted-doubles? nums) nums\n     (when-let [n1 (fast-first nums)] (enc/float? n1)) (sorted-doubles allow-mutation? nums)\n     :else                                             (sorted-longs   allow-mutation? nums))))\n\n(comment (sorted-nums [1.0 2]))\n\n;;;; Percentiles\n\n(defn- weighted-nth\n  \"Returns interpolated nth numerical value.\"\n  [idx nums]\n  (let [idx       (double     idx)\n        idx-floor (Math/floor idx)\n        idx-ceil  (Math/ceil  idx)]\n\n    (if (== idx-ceil idx-floor)\n      (nth nums (int idx))\n\n      ;; Generalization of (floor+ceil)/2\n      (let [weight-floor (- idx-ceil idx)\n            weight-ceil  (- 1 weight-floor)]\n        (+\n          (* weight-floor (double (nth nums (int idx-floor))))\n          (* weight-ceil  (double (nth nums (int idx-ceil)))))))))\n\n(comment (weighted-nth 0.5 [1 5]))\n\n(defn percentile\n  \"Returns ?element.\"\n  [pnum nums]\n  (let [snums   (sorted-nums nums)\n        max-idx (dec (count snums))]\n    (when (>= max-idx 0)\n      (nth snums (Math/round (* max-idx (enc/as-pnum! pnum)))))))\n\n(comment (percentile 0.8 (range 101)))\n\n(defn percentiles\n  \"Returns ?[min p25 p50 p75 p90 p95 p99 max] elements in:\n    - O(1) for Sorted types (SortedLongs, SortedDoubles),\n    - O(n.log_n) otherwise.\"\n  [nums]\n  (let [snums   (sorted-nums nums)\n        max-idx (dec (count snums))]\n    (when (>= max-idx 0)\n      [(nth snums 0)\n       (nth snums (Math/round (* max-idx 0.25)))\n       (nth snums (Math/round (* max-idx 0.50)))\n       (nth snums (Math/round (* max-idx 0.75)))\n       (nth snums (Math/round (* max-idx 0.90)))\n       (nth snums (Math/round (* max-idx 0.95)))\n       (nth snums (Math/round (* max-idx 0.99)))\n       (nth snums                max-idx)])))\n\n(comment\n  (percentiles (range 101))\n  (percentiles [1 2 3]))\n\n;;;;\n\n(defn bessel-correction ^double [n ^double add] (+ (double n) add))\n\n(defn rf-sum          ^double [^double acc ^double in] (+ acc in))\n(defn rf-sum-variance ^double [^double xbar ^double acc x]\n  (+ acc (Math/pow (- (double x) xbar) 2.0)))\n\n(defn rf-sum-abs-deviation ^double [^double central-point ^double acc x]\n  (+ acc (Math/abs (- (double x) central-point))))\n\n;;;; SummaryStats\n\n(declare ^:private deref-sstats)\n(deftype SummaryStats\n  ;; - Field names chosen to avoid shadowing.\n  ;; - Includes -sum data to support merging.\n  ;; - Doubles used as general type to avoid boxing.\n  [^boolean xfloats?\n   ^long    nx\n   ^double  xsum\n   ^double  xmin\n   ^double  xmax\n   ^double  xlast\n   ^double  p25\n   ^double  p50\n   ^double  p75\n   ^double  p90\n   ^double  p95\n   ^double  p99\n   ;;       xmean\n   ;;       xvar\n   ;;       xmad\n   ^double  xvar-sum\n   ^double  xmad-sum]\n\n  Object (toString [x] (enc/str-impl x \"taoensso.encore.stats.SummaryStats\" {:n nx}))\n  #?@(:clj  [clojure.lang.IDeref ( deref [this] (deref-sstats this))]\n      :cljs [             IDeref (-deref [this] (deref-sstats this))]))\n\n(defn- deref-sstats [^SummaryStats ss]\n  (let [fin (if (.-xfloats? ss) double #(Math/round (double %)))\n        nx  (.-nx ss)]\n    (assert (pos? nx))\n    (with-meta\n      {:n           nx\n       :sum     (fin (.-xsum  ss))\n       :min     (fin (.-xmin  ss))\n       :max     (fin (.-xmax  ss))\n       :last    (fin (.-xlast ss))\n       :p25     (fin (.-p25   ss))\n       :p50     (fin (.-p50   ss))\n       :p75     (fin (.-p75   ss))\n       :p90     (fin (.-p90   ss))\n       :p95     (fin (.-p95   ss))\n       :p99     (fin (.-p99   ss))\n\n       :mean    (/ (.-xsum     ss) nx)\n       :var     (/ (.-xvar-sum ss) nx) ; Currently w/o bessel-correction\n       :mad     (/ (.-xmad-sum ss) nx)\n\n       :var-sum (.-xvar-sum ss)\n       :mad-sum (.-xmad-sum ss)}\n\n      {:floats? (.-xfloats? ss)})))\n\n(defn ^:public summary-stats?\n  \"Returns true iff given a `SummaryStats` argument.\"\n  [x] (instance? SummaryStats x))\n\n(defn ^:public summary-stats\n  \"Given a coll of numbers or previously dereffed `SummaryStats` map,\n  returns a new mergeable ?`SummaryStats` with:\n    (deref ss) => {:keys [n sum min max p25 ... p99 mean var mad]}\n\n  See also `summary-stats-merge`.\"\n  {:arglists '([nums-or-ss-map])}\n  ([     x] (summary-stats nil x))\n  ([opts x]\n   (when x\n     (enc/cond\n       (summary-stats? x) x\n       (map?           x)\n       (let [{:keys [n sum min max last p25 p50 p75 p90 p95 p99\n                     #_mean #_var #_mad var-sum mad-sum]} x\n\n             floats?\n             (enc/cond\n               :if-let [e (find opts     :floats?)] (val e)\n               :if-let [e (find (meta x) :floats?)] (val e)\n               :else (enc/float? sum))]\n\n         (SummaryStats. floats?\n           n sum min max last p25 p50 p75 p90 p95 p99 var-sum mad-sum))\n\n       :else\n       (let [snums\n             (if-let [e (find opts :floats?)]\n               (if (val e)\n                 (sorted-doubles true x)\n                 (sorted-longs   true x))\n               (sorted-nums      true x))\n\n             nx (count snums)]\n\n         (when (pos? nx)\n           (let [[xmin p25 p50 p75 p90 p95 p99 xmax] (percentiles snums)\n                 xsum  (double (reduce rf-sum 0.0 snums))\n                 xbar  (/ xsum nx)\n                 xlast (nth snums (dec nx))\n                 [^double xvar-sum ^double xmad-sum]\n                 (enc/reduce-multi\n                   (partial rf-sum-variance      xbar) 0.0\n                   (partial rf-sum-abs-deviation xbar) 0.0\n                   snums)]\n\n             (SummaryStats. (sorted-doubles? snums)\n               nx xsum xmin xmax xlast p25 p50 p75 p90 p95 p99\n               xvar-sum xmad-sum))))))))\n\n(comment @(summary-stats [1 2 3]))\n\n(defn ^:public summary-stats-merge\n  \"Given one or more ?`SummaryStats`, returns a new ?`SummaryStats` with:\n    (summary-stats-merge\n       (summary-stats nums1)\n       (summary-stats nums2))\n\n    an approximatation of (summary-stats (merge nums1 nums2))\n\n  Useful when you want summary stats for a large coll of numbers for which\n  it would be infeasible/expensive to keep all numbers for accurate merging.\"\n  ([ss1    ] ss1)\n  ([ss1 ss2]\n   (if ss1\n     (if ss2\n       (let [^SummaryStats ss1 ss1\n             ^SummaryStats ss2 ss2\n\n             nx1 (.-nx ss1)\n             nx2 (.-nx ss2)\n\n             _ (assert (pos? nx1))\n             _ (assert (pos? nx2))\n\n             xfloats1? (.-xfloats? ss1)\n             xsum1     (.-xsum     ss1)\n             xmin1     (.-xmin     ss1)\n             xmax1     (.-xmax     ss1)\n             p25-1     (.-p25      ss1)\n             p50-1     (.-p50      ss1)\n             p75-1     (.-p75      ss1)\n             p90-1     (.-p90      ss1)\n             p95-1     (.-p95      ss1)\n             p99-1     (.-p99      ss1)\n             xvar-sum1 (.-xvar-sum ss1)\n             xmad-sum1 (.-xmad-sum ss1)\n\n             xfloats2? (.-xfloats? ss2)\n             xsum2     (.-xsum     ss2)\n             xmin2     (.-xmin     ss2)\n             xmax2     (.-xmax     ss2)\n             xlast2    (.-xlast    ss2)\n             p25-2     (.-p25      ss2)\n             p50-2     (.-p50      ss2)\n             p75-2     (.-p75      ss2)\n             p90-2     (.-p90      ss2)\n             p95-2     (.-p95      ss2)\n             p99-2     (.-p99      ss2)\n             xvar-sum2 (.-xvar-sum ss2)\n             xmad-sum2 (.-xmad-sum ss2)\n\n             xfloats3? (or xfloats1? xfloats2?)\n             nx3       (+ nx1 nx2)\n             nx1-ratio (/ (double nx1) (double nx3))\n             nx2-ratio (/ (double nx2) (double nx3))\n\n             xsum3 (+ xsum1 xsum2)\n             xmin3 (if (< xmin1 xmin2) xmin1 xmin2)\n             xmax3 (if (> xmax1 xmax2) xmax1 xmax2)\n             ;; xbar3 (/ xsum3 nx3)\n\n             ;; Batched \"online\" calculation here is better= the standard\n             ;; Knuth/Welford method, Ref. http://goo.gl/QLSfOc,\n             ;;                            http://goo.gl/mx5eSK.\n             ;; No apparent advantage in using `xbar3` asap.\n             xvar-sum3 (+ xvar-sum1 xvar-sum2)\n             xmad-sum3 (+ xmad-sum1 xmad-sum2)\n\n             ;; These are pretty rough approximations. More sophisticated\n             ;; approaches not worth the extra cost/effort in our case.\n             p25-3 (+ (* nx1-ratio p25-1) (* nx2-ratio p25-2))\n             p50-3 (+ (* nx1-ratio p50-1) (* nx2-ratio p50-2))\n             p75-3 (+ (* nx1-ratio p75-1) (* nx2-ratio p75-2))\n             p90-3 (+ (* nx1-ratio p90-1) (* nx2-ratio p90-2))\n             p95-3 (+ (* nx1-ratio p95-1) (* nx2-ratio p95-2))\n             p99-3 (+ (* nx1-ratio p99-1) (* nx2-ratio p99-2))]\n\n         (SummaryStats. xfloats3?\n           nx3 xsum3 xmin3 xmax3 xlast2 p25-3 p50-3 p75-3 p90-3 p95-3 p99-3\n           xvar-sum3 xmad-sum3))\n       ss1)\n     ss2)))\n\n;;;; Stateful SummaryStats\n\n(defn- buf-new\n  ([    ] #?(:clj (LinkedList.) :cljs (array)))\n  ([init]\n   #?(:clj  (if init (LinkedList. init) (LinkedList.))\n      :cljs (if init (array       init) (array)))))\n\n(defn- buf-add [buf x]\n  #?(:clj  (.add ^LinkedList buf x)\n     :cljs (.push            buf x)))\n\n(defn- buf-len ^long [buf]\n  #?(:clj  (.size ^LinkedList buf)\n     :cljs (alength           buf)))\n\n(defprotocol ISummaryStatsBuffered\n  ;; TODO Later generalize protocol for other stateful SummaryStats types?\n  (ssb-deref [_] [_ flush?] \"Returns current ?sstats.\")\n  (ssb-clear [_]   \"Clears all internal state and returns nil.\")\n  (ssb-flush [_]   \"Flushes internal buffer and returns newly merged sstats or nil.\")\n  (ssb-push  [_ n] \"Adds given num to internal buffer.\"))\n\n(defn ^:public summary-stats-clear!\n  \"Clears internal state (incl. stats and buffers, etc.) for given\n  stateful `SummaryStats` instance and returns nil.\"\n  [stateful-summary-stats]\n  (ssb-clear stateful-summary-stats))\n\n(deftype SummaryStatsBuffered [sstats_ buf_ buf-size merge-counter merge-cb]\n  Object\n  (toString [x]\n    (enc/str-impl x \"taoensso.encore.stats.SummaryStatsBuffered\"\n      {:n       (get (sstats_) :n 0)\n       :pending (buf-len (buf_))\n       :merged  (if-let [mc merge-counter] @mc 0)}))\n\n  #?@(:clj  [clojure.lang.IDeref ( deref [this] (ssb-deref this))]\n      :cljs [             IDeref (-deref [this] (ssb-deref this))])\n\n  #?@(:clj  [clojure.lang.IFn ( invoke [this n] (ssb-push this n))]\n      :cljs [             IFn (-invoke [this n] (ssb-push this n))])\n\n  ISummaryStatsBuffered\n  (ssb-deref [this       ] (ssb-deref this true))\n  (ssb-deref [this flush?] (or (and flush? (ssb-flush this)) (sstats_)))\n  (ssb-clear [_]\n    #?(:clj (locking buf_ (reset! buf_ (buf-new)))\n       :cljs              (reset! buf_ (buf-new)))\n\n    (reset! sstats_ nil)\n    (when-let [mc merge-counter] (mc :set 0))\n    nil)\n\n  (ssb-flush [this]\n    (let [[drained]\n          #?(:clj (locking buf_ (reset-vals! buf_ (buf-new nil)))\n             :cljs              (reset-vals! buf_ (buf-new nil)))]\n\n      (if (== (buf-len drained) 0)\n        nil\n        (let [t0             (when merge-cb (enc/now-nano*))\n              _              (when-let [mc merge-counter] (mc))\n              sstats-drained (summary-stats drained)\n\n              sstats-merged ; Only drainer will update, so should be no contention\n              (sstats_ (fn [old] (summary-stats-merge old sstats-drained)))]\n\n          (when merge-cb ; Handy for profilers, etc.\n            (merge-cb this (- (enc/now-nano*) ^long t0)))\n\n          sstats-merged))))\n\n  (ssb-push [this n]\n    #?(:clj (locking buf_ (buf-add (buf_) n))\n       :cljs              (buf-add (buf_) n))\n\n    (when-let [^long nmax buf-size]\n      (when (> (buf-len (buf_)) nmax)\n        (ssb-flush this)))\n\n    nil))\n\n(defn ^:public summary-stats-buffered\n  \"Returns a new stateful `SummaryStatsBuffered` with:\n    (ssb <num>) => Adds given number to internal buffer.\n    (deref ssb) => Flushes buffer if necessary, and returns a mergeable\n                   `?SummaryStats`. Deref again to get a map of summary\n                   stats for all numbers ever added to ssb:\n                     {:keys [n sum min max p25 ... p99 mean var mad]}.\n\n  Useful for summarizing a (possibly infinite) stream of numbers.\n\n  Options:\n    `:buffer-init` - Initial buffer content, useful for persistent ssb.\n    `:sstats-init` - Initial summary stats,  useful for persistent ssb.\n    `:buffer-size`\n       The maximum number of numbers that may be buffered before next\n       (ssb <num>) call will block to flush buffer and merge with any\n       existing summary stats.\n\n       Larger buffers mean better performance and more accurate stats,\n       at the cost of more memory use while buffering.\"\n\n  ([] (summary-stats-buffered nil))\n  ([{:keys [buffer-size buffer-init sstats-init merge-cb]\n     :or   {buffer-size 1e5}\n     :as   opts}]\n\n   (SummaryStatsBuffered.\n     (enc/latom (summary-stats sstats-init))\n     (enc/latom       (buf-new buffer-init))\n     (long                     buffer-size)\n     (enc/counter)\n     merge-cb ; Undocumented\n     )))\n\n(defn summary-stats-buffered-fast\n  \"Returns fastest possible `SummaryStatsBuffered`.\"\n  [^long buffer-size merge-cb]\n  (SummaryStatsBuffered.\n    (enc/latom nil)\n    (enc/latom (buf-new))\n    buffer-size\n    nil\n    merge-cb))\n\n(comment\n  (let [ssb (summary-stats-buffered {:buffer-size 10})] ; 175 qb\n    [(enc/qb 1e6 (ssb (rand-int 1000))) (str ssb) @@ssb]))\n\n(defn summary-stats-buffered?\n  \"Returns true iff given a `SummaryStatsBuffered` instance.\"\n  [x] (instance? SummaryStatsBuffered x))\n\n(defn summary-stats-stateful?\n  \"Returns true iff given a stateful `SummaryStats` instance.\"\n  [x] (summary-stats-buffered? x))\n\n;;;; Print methods\n\n(do\n  (enc/def-print-impl [x SortedLongs]          (str \"#\" x))\n  (enc/def-print-impl [x SortedDoubles]        (str \"#\" x))\n  (enc/def-print-impl [x SummaryStats]         (str \"#\" x))\n  (enc/def-print-impl [x SummaryStatsBuffered] (str \"#\" x)))\n"],"x_google_ignoreList":[0]}