{"version":3,"sources":["stack/statecharts/webserial.cljs"],"mappings":"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","names":["stack.statecharts.webserial/receive-bytes","events","bytes","prev-event","cljs.core/last","cljs.core/vals","ongoing","cljs.core._EQ_","ts","js/Date","data","cljs.core.assoc","stack.statecharts.webserial/default-context","stack.schema.webserial/DEFAULTS","cljs.core/sorted-map","stack.statecharts.webserial/controller","G__96231","statecharts.core/machine","G__96239","statecharts.core/assign","ctx","_e","__run-fn-form","__kind","__ns","__id","__level","sf","taoensso.telemere.impl/*rt-sig-filter*","__inst","__thread","__root0","taoensso.telemere.impl/*trace-root*","__otel-context1","__uid","__root1","__run-result","signal__42410__auto__","cljs.core/Delay","signal__42401__auto__","taoensso.telemere.impl/Signal","taoensso.telemere/*ctx*","taoensso.telemere.impl/*trace-parent*","temp__5821__auto__","taoensso.telemere/*middleware*","sig-middleware__42402__auto__","taoensso.telemere.impl/dispatch-signal!","taoensso.telemere.impl/WrappedSignal","_ctx","stack.apis.webserial/is-supported?","e","p__96279","map__96281","cljs.core/--destructure-map","cljs.core.get","_evt","vendor-id","cljs.core/first","p1__96227#","stack.apis.webserial.await_port","stack.core/dispatch","G__96294","p__96295","map__96297","port","stack.apis.webserial/describe-port","stack.apis.webserial.open_port","port-id","p1__96229#","stack.apis.webserial/go-read-text","G__96342","p__96344","map__96346","context","map__96351","line-terminator","cmd","timestamp","stack.apis.webserial/write","cljs.core/assoc-in","G__96356","p__96357","p__96358","map__96360","map__96361","updated-events","_event","port-info","stack.apis.webserial.forget_port","signal__42400__auto__","cljs.core/reduce-kv","cljs.core/assoc","stack.statecharts.webserial/init","statecharts.core/initialize"],"sourcesContent":["(ns stack.statecharts.webserial\n  (:require\n   [taoensso.telemere :as t]\n   [statecharts.core :as hsm]\n   [stack.core :refer [dispatch]]\n   [stack.schema.webserial :as wss]\n   [stack.apis.webserial :as wsi]))\n\n;; ============================================================================\n;; Utility functions\n\n;;Append to an ongoing rx event...\n;;As long data streams can be read over multiple rx events, if the previous recorded\n;;comms event is rx, we assume this is an ongoing event and consolidate.\n;;\n;;N.B. This does NOT do any command terminator parsing -- that's a higher level concern\n;;     to be dealt with by any subscribers to :webserial-rx\n(defn receive-bytes [events bytes]\n  (let [prev-event (last (vals events))\n        ongoing (and (some? prev-event) (= (:event-type prev-event prev-event) :rx))\n        ts (if ongoing (:timestamp prev-event) (.now js/Date))\n        data (if ongoing (str (:bytes (:event-data prev-event)) bytes) bytes)]\n    (assoc events ts {:timestamp ts\n                      :event-type :rx\n                      :event-data {:byte-encoding :text\n                                   :bytes data}})))\n;;TODO: Notify any downstream listeners (e.g. CD handlers) that new rx data has been added to the DB\n;; :fx [[:dispatch [:webserial rx nil]]]))\n\n\n;; ============================================================================\n;; Controller - a statemachine\n;; See https://lucywang000.github.io/clj-statecharts/\n\n;;Initial context...\n;; TODO Write a Schema?\n;; ... also consider including event store in context here rather than separately in the refx db\n\n(def default-context {:port nil\n                      :port-description \"NONE\"\n                      :port-config wss/DEFAULTS\n                      :line-terminator \"\\r\"\n                      :events (sorted-map)})\n\n;; Notes:\n;; 1. The event parameter passed to action handlers is a map containing {:data (<event-parameters>)}\n(def controller\n  (hsm/machine\n   {:id :webserial\n    :initial :disconnected\n    :context default-context\n\n    :states\n\n    {;; TOP-LEVEL STATE\n     :disconnected\n     {:initial :webserial_pending\n      :entry (hsm/assign (fn [ctx _e]\n                           (t/log! :info \"Resetting port assignment\")\n                           (-> ctx\n                               (assoc :port nil)\n                               (assoc :port-description \"NONE\"))))\n      :on {:port-disconnected {:actions (fn [_ctx _e]\n                                          (t/log! :debug \"Ignoring initial disconnection\"))}\n           :port-opened :connected}\n      :states\n      {:webserial_pending\n       ;; Check the browswer supports the webserial API\n       {:always [{:guard wsi/is-supported?\n                  :target :port-pending}\n                 {:guard #(not (wsi/is-supported?))\n                  :target :no-webserial}]}\n       :no-webserial {}\n       :port-pending\n       {:entry (fn [ctx e]\n                  ;; webserial port request must be initiated via ui element click\n                 (t/log! :debug (str \"PORT PENDING\" ctx e)))\n        :on {:request-port {:actions (fn [_ctx {:keys [data] :as _evt}]\n                                        ;;TODO: We currently have two sources of truth for vendor-id filter -- the\n                                        ;;      event parameter and data stored in context... choose one....\n                                       (let [vendor-id (int (first data))]\n                                         (wsi/await-port\n                                          :vendor-id vendor-id\n                                          :on-success #(dispatch [:webserial :has-port %])\n                                          :on-failure #(t/log! :error \"No port access granted\"))))}\n\n             :has-port {:actions (hsm/assign (fn [ctx {:keys [data] :as _evt}]\n                                               ;;The ports get passed through as a sequence...\n                                               (let [port (first data)]\n                                                 (.addEventListener port \"disconnect\" #(dispatch [:webserial :port-disconnected]))\n                                                 (-> ctx\n                                                     (assoc :port port)\n                                                     (assoc :port-description (wsi/describe-port port))))))\n                        :target :opening_port}}}\n       :opening_port\n       {:entry (fn [ctx e]\n                 (t/log! :debug (str \"WAITING TO OPEN PORT\" ctx e))\n                 (wsi/open-port (:port ctx)\n                                :options (:port-config ctx)\n                                :on-success #(dispatch [:webserial :port-opened])\n                                :on-failure #(dispatch [:webserial :port-open-failure])))\n        :on {:port-open-failure {:actions (fn [ctx e] (t/event! ::port-open-failure {:data {:context ctx :error e}}))}}}}}\n\n     ;; TOP-LEVEL STATE\n     :connected\n     {:entry (fn [ctx _e]\n               (let [port (:port ctx)\n                     port-id (wsi/describe-port port)]\n                 (t/log! :info {:port-id port-id})\n                 (wsi/go-read-text port #(dispatch [:webserial :read %]))))\n      :on {:write\n           {:actions (hsm/assign (fn [context {:keys [data]}]\n                                   (let [{:keys [port line-terminator]} context\n                                         ;; The event parameters are wrapped in a vector - get first element\n                                         cmd (first data)\n                                         timestamp (.now js/Date)]\n                                     (t/log! :info cmd)\n                                     (wsi/write port (str cmd line-terminator))\n                                     ;; Append the command to event history for terminal view or whatever...\n                                     (assoc-in context [:events timestamp] {:timestamp timestamp\n                                                                            :event-type :command\n                                                                            :event-data {:byte-encoding :text\n                                                                                         :bytes cmd}}))))}\n           :read\n           {:actions (hsm/assign (fn [{:keys [events] :as context} {:keys [data]}]\n                                   (let [bytes (first data)\n                                         updated-events (receive-bytes events bytes)]\n                                     (assoc context :events updated-events))))}\n           :forget-port :disconnecting\n\n           :port-disconnected :disconnected}}\n\n     ;; TOP-LEVEL STATE\n     :disconnecting\n     {:entry (fn [ctx _event]\n               (t/log! :info \"TODO: Forget request received - IMPLEMENT ME\")\n               (let [port (:port ctx)\n                     port-info (wsi/describe-port port)]\n                 (wsi/forget-port port {:on-success #(dispatch [:webserial :port-forgotten])\n                                        :on-failure #(t/event! ::forget-port-failure {:level :error :port port-info})})))\n      :on {:port-forgotten :disconnected}}\n\n;; END TOP-LEVEL STATES\n     }}))\n\n(defn init []\n  (hsm/initialize controller default-context))\n"]}