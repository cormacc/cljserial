{"version":3,"sources":["stack/utils/schema.cljs"],"mappings":";AAGA;;;qCAAA,rCAAMA,kFAEHC,KAAKC;AAFR,AAGE,oBAAU,AAACC,kDAAWF,KAAKC;AAA3B;;AAAA,AACE,MAAO,4LAAA,5LAACE,gDAAQ,CAAA,oEAA6B,AAACC,iDAAUJ,KAAKC;;;AAEjE,iCAAA,jCAAMI,0EACHC;AADH,AAEE,OAACC,eAAKD;;AAER;;;8BAAA,9BAAME,oEAEHC,EAAEH;AAFL,AAIE,OAACI,4CAAID,EAAE,AAACJ,+BAAYC;;AAEtB;;;sCAAA,tCAAMK,oFAEHF,EAAEH;AAFL,AAGE,OAACM,oDAAYH,EAAE,AAACJ,+BAAYC;;AAE9B,+BAAA,/BAAMO,sEAAWC;AAAjB,AACE,IAAMC,SAAO,AAACC,iBAAOF;AAArB,AACE,OAACG,8CAAM,AAAA,gFAAMF,QAAQ,0FAAA,zFAAK,AAAA,+EAAMA","names":["stack.utils.schema/check-and-throw","type","inst","malli.core.validate","cljs.core.ex_info","malli.core.explain","stack.utils.schema/enum-values","enum","cljs.core/rest","stack.utils.schema/enum-map","f","cljs.core.map","stack.utils.schema/enum-map-indexed","cljs.core.map_indexed","stack.utils.schema/int-range","int-schema","bounds","cljs.core/second","cljs.core.range"],"sourcesContent":["(ns stack.utils.schema\n  (:require [malli.core :as m]))\n\n(defn check-and-throw\n  \"Throws an exception if `db` doesn't match the Spec `a-spec`.\"\n  [type inst]\n  (when-not (m/validate type inst)\n    (throw (ex-info (str \"schema check failed: \" (m/explain type inst)) {}))))\n\n(defn enum-values\n  [enum]\n  (rest enum))\n\n(defn enum-map\n  \"Apply map to elements of a malli schema enum.\"\n  [f enum]\n  ;; Discard first, as enum syntax is [:enum <elements>]\n  (map f (enum-values enum)))\n\n(defn enum-map-indexed\n  \"Apply map-indexed to elements of a malli schema enum.\"\n  [f enum]\n  (map-indexed f (enum-values enum)))\n\n(defn int-range [int-schema]\n  (let [bounds (second int-schema)]\n    (range (:min bounds) (inc (:max bounds)))))\n"]}