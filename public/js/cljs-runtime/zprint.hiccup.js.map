{"version":3,"sources":["zprint/hiccup.cljc"],"mappings":";AAOA,2BAAA,wCAAA,qDAAA,gEAAA,uDAAA,uDAAA,iEAAA,yDAAA,uDAAA,gEAAA,qDAAA,iEAAA,wEAAA,0DAAA,+DAAA,0DAAA,yDAAA,mDAAA,qDAAA,kEAAA,2DAAA,yDAAA,uDAAA,sDAAA,qDAAA,2DAAA,yDAAA,mBAAA,oBAAA,GAAA,cAAA,iBAAA,eAAA,cAAA,GAAA,aAAA,wBAAA,oBAAA,wBAAA,6BAAA,gCAAA,gBAAA,YAAA,aAAA,GAAA,gBAAA,eAAA,oBAAA,cAAA,cAAA,GAAA,12DAAKA;AAwFL,AAAA;;;iCAAA,yCAAAC,1EAAME;AAAN,AAAA,IAAAD,WAAA,AAAA;AAAA,AAAA,QAAAA;KAAA;AAAA,OAAAC,6DAAA,CAAA,UAAA;;;;AAAA,IAAAC,yBAAA;AAAA,AAAA,IAAAC,0BAAA,AAAA;AAAA,AAAA,IAAAC,wBAAA;;AAAA,AAAA,GAAA,CAAAA,wBAAAD;AAAA,AAAA,AAAAD,4BAAA,CAAA,UAAAE;;AAAA,eAAA,CAAAA,wBAAA;;;;AAAA;;;;AAAA,IAAAC,uBAAA,EAAA,CAAA,MAAA,AAAAH,gCAAA,AAAA,KAAAI,qBAAA,AAAAJ,6BAAA,KAAA,IAAA,OAAA;AAAA,AAAA,OAAAD,oEAAA,CAAA,UAAA,MAAAI;;;;;AAAA,AAAA,CAAA,sEAAA,tEAAMJ,iFAEFW,EAAIC;AAFR,AAGG,IAAMC,YAAU,AAACC,8CAAMC,cAAI,kDAAA,lDAACC,sDAAa,AAACC,4CAAIpB,yBAAWe;IACnDD,QAAE,yBAAA,KAAA,9BAACO,uBAAuBP;IAC1BA,QAAE,6BAAA,IAAA,jCAACO,uBAAuBP;AAFhC,AAAA,0FAAA,qDAAA,2CAAA,uDAGiBE,kBAAWF;;;AAN/B;AAAA,CAAA,mDAAA,WAAAL,9DAAMN;AAAN,AAAA,IAAAO,WAAA,AAAAC,gBAAAF;IAAAA,eAAA,AAAAG,eAAAH;AAAA,AAAA,IAAAI,qBAAA;AAAA,AAAA,OAAAA,wDAAAH,SAAAD;;;AAAA,CAAA,+DAAA,/DAAMN,0EAOFW;AAPJ,AAOO,OAACQ,oEAAiBR,oDAAEd;;;AAP3B,CAAA,yDAAA,zDAAMG;;AAAN,AASA;;;yBAAA,zBAAMoB,0DAEHC,QAAQC;AAFX,AAGE,oBAAA,hBAAMC;IAEAC,QAAM,AAAA,qFAAQ,AAAA,4FAAY,AAAA,wFAASH;IACnCG,YAAM,EAAI,UAAA,TAAMA,gBAAOD,cAAcC;AAH3C,AAIE,oDAAA,mFAAA,8CAAA,2CAAA,zNAACC,gRAAiBD,0BAAQF;;AAE9B;;;;gCAAA,hCAAMI,wEAGHJ;AAHH,AAIE,GAAM,AAACK,wBAAQL;AAAM,IAAMM,YAAU,AAACC,+CAAO,AAACrB,gBAAMc;IACzBQ,oBAAY,AAACC,qBAAK,AAACC,iBAAOV;IAC1BW,YACE,EAAIH,mBAAY,AAACI,gBAAMZ,MAAM,AAACb,eAAKa;AAH3C,AAIE,QAAA,gDACKM,uDACA,EAAIE,mBAAY,iBAAAK,WAAc,AAACH,iBAAOV;AAAtB,AAAA,kIAAAa,qDAAAA,/KAACT,8DAAAA,wEAAAA;UAFtB,oMAAA,4DAAA,rQAEK,qDAEA,AAACZ,8CAAMC,cAAI,AAACqB,6CAAKV,8BAAaO,8DAE9BL;;AAV5B,GAYM,AAACG,qBAAKT;AAAM,IAAMe,OAAK,AAAC7B,gBAAM,AAAC8B,cAAIhB;AAAvB,AACE,QAAA,uHAAA,0EAAA,jJAAS,AAACO,+CAAO,AAACrB,gBAAM6B,0DAAa,AAACL,iBAAOK;;AAbjE,AAcYf","names":["zprint.hiccup/html-codes","var_args","G__64234","zprint.hiccup/hiccup-color-str","args-arr__5751__auto__","len__5726__auto__","i__5727__auto__","argseq__5752__auto__","cljs.core/IndexedSeq","seq64230","G__64231","cljs.core/first","cljs.core/next","self__5711__auto__","s","ansi","style-str","cljs.core.apply","cljs.core/str","cljs.core.interpose","cljs.core.map","clojure.string/replace","zprint.hiccup.hiccup_color_str","zprint.hiccup/wrap-w-p","options","coll","default-style","style","cljs.core.into","zprint.hiccup/hiccup->html","cljs.core/vector?","first-sym","cljs.core.symbol","map-second?","cljs.core/map?","cljs.core/second","rest-coll","cljs.core/nnext","G__64245","cljs.core.mapv","pair","cljs.core/seq"],"sourcesContent":["(ns ^:no-doc zprint.hiccup\n  (:require clojure.string))\n\n;;\n;; # Do hiccup processing\n;;\n\n(def html-codes\n  {:bold \"font-weight:bold\",\n   :faint \"opacity:50%\",\n   :italic \"font-style:italic\",\n   :underline \"text-decoration: underline\",\n   :blink \"\",\n   :reverse \"\",\n   :hidden \"display: none\",\n   :strike \"text-decoration: line-through\",\n   :normal \"text-decoration: none\",\n   :italic-off \"font-style:normal\",\n   :underline-off \"font-style:normal\",\n   :blink-off \"\",\n   :reverse-off \"\",\n   :hidden-off \"display: unset\",\n   :strike-off \"text-decoration: none\",\n   :black \"color:black\",\n   :none \"color:black\",\n   :red \"color:red\",\n   :green \"color:green\",\n   :yellow \"color:yellow\",\n   :blue \"color:blue\",\n   :magenta \"color:magenta\",\n   :purple \"color:purple\",\n   :cyan \"color:cyan\",\n   :white \"color:white\"\n   ; ....\n  })\n\n#_(def ansi-codes\n    {:off 0,\n     :reset 0,\n     :bold 1,\n     :faint 2,\n     :italic 3,\n     :underline 4,\n     :blink 5,\n     :reverse 7,\n     :hidden 8,\n     :strike 9,\n     :normal 22,\n     :italic-off 23,\n     :underline-off 24,\n     :blink-off 25,\n     :reverse-off 27,\n     :hidden-off 28,\n     :strike-off 29,\n     :black 30,\n     :none 30,\n     :red 31,\n     :green 32,\n     :yellow 33,\n     :blue 34,\n     :magenta 35,\n     :purple 35,\n     :cyan 36,\n     :white 37,\n     :xsf 38,\n     :back-black 40,\n     :back-red 41,\n     :back-green 42,\n     :back-yellow 43,\n     :back-blue 44,\n     :back-magenta 45,\n     :back-purple 45,\n     :back-cyan 46,\n     :back-white 47,\n     :bright-black 90,\n     :bright-red 91,\n     :bright-green 92,\n     :bright-yellow 93,\n     :bright-blue 94,\n     :bright-magenta 95,\n     :bright-purple 95,\n     :bright-cyan 96,\n     :bright-white 97,\n     :back-bright-black 100,\n     :back-bright-red 101,\n     :back-bright-green 102,\n     :back-bright-yellow 103,\n     :back-bright-blue 104,\n     :back-bright-magenta 105,\n     :back-bright-purple 105,\n     :back-bright-cyan 106,\n     :back-bright-white 107})\n\n\n\n(defn hiccup-color-str\n  \"Wraps a string with hiccup expressions.\"\n  ([s & ansi]\n   (let [style-str (apply str (interpose \\; (map html-codes ansi)))\n         s (clojure.string/replace s \"\\n\" \"<br>\")\n         s (clojure.string/replace s \" \" \"&nbsp\")]\n     [:span {:style style-str} s]))\n  ([s] (hiccup-color-str s html-codes)))\n\n(defn wrap-w-p\n  \"Wrap a sequence of hiccup elements with a p.\"\n  [options coll]\n  (let [default-style\n          \"font-size:15px;font-family: Lucidia Concole, Courier, monospace\"\n        style (:style (:paragraph (:output options)))\n        style (if (nil? style) default-style style)]\n    (into [:p {:style style}] coll)))\n\n(defn hiccup->html\n  \"A very specialized hiccup to html converter.  Only converts hiccup\n  that is produced by this routine!\"\n  [coll]\n  (cond (vector? coll) (let [first-sym (symbol (first coll))\n                             map-second? (map? (second coll))\n                             rest-coll\n                               (if map-second? (nnext coll) (next coll))]\n                         (str \"<\"\n                              first-sym\n                              (if map-second? (hiccup->html (second coll)) \"\")\n                              \">\"\n                              (apply str (mapv hiccup->html rest-coll))\n                              \"</\"\n                              first-sym\n                              \">\"))\n        (map? coll) (let [pair (first (seq coll))]\n                      (str \" \" (symbol (first pair)) \"=\\\"\" (second pair) \"\\\"\"))\n        :else coll))"],"x_google_ignoreList":[0]}