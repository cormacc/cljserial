{"version":3,"sources":["rewrite_clj/zip/context.cljc"],"mappings":";AAMA,4CAAA,5CAAOA,gGAAaC;AAApB,AACE,4BAAA,sFAAK,AAACC,kBAAQC,oCAAUF,5HACnB,AAACG,mDAAWC,nEACZC,rBACAC;;AAEP;;;;;;;;;;;0CAAA,1CAAMC,4FAUHP;AAVH,AAWE,wEAAA,WAAAQ,5EAACC,4DAAcT;AAAf,AACgB,IAAAU,WAAqC,oCAAAF,pCAACM;AAAtC,AAAA,GAAA,GAAA,CAAAJ,YAAA;AAAA,GAAA,EAAA,WAAA,CAAAC,gCAAA,AAAAD;AAAA;;AAAA,GAAA,EAAA,AAAAA;AAAA,OAAAE,4EAAAF,1CAAYG;;AAAZ;;;;AAAA,OAAAD,4EAAAF,1CAAYG;;GACb,WAAKb;AAAL,AACE,IAAMe,SAAO,kCAAA,kCAAIf,lCAAKgB,lCAAQA;IACxBC,QAAM,kBAAM,iBAAAC,oBAAKH;AAAL,AAAA,oBAAAG;AAAY,OAACC,2CAAqBJ;;AAAlCG;;MAAN,OAAA,PAAiDH;AAD7D,AAEE,oBAAI,iBAAAG,oBAAKD;AAAL,AAAA,oBAAAC;AAAW,OAACnB,0CAAYC;;AAAxBkB;;;AACF,OAACE,uCAAapB,SAAK,AAACqB,6CAA4B,AAACP,oCAAUd,UAAM,AAACsB,gBAAM,AAACC,oCAAmB,AAACT,oCAAUG;;AACvG,OAACG,uCAAapB,SAAK,AAACwB,6CAA4B,AAACV,oCAAUd","names":["rewrite-clj.zip.context/is-map-key?","zloc","cljs.core/iterate","rewrite-clj.custom-zipper.core/left","cljs.core.take_while","cljs.core/identity","cljs.core/count","cljs.core/odd?","rewrite-clj.zip.context/reapply-context","p1__69966#","rewrite_clj.zip.walk.postwalk","G__69968","cljs.core/PROTOCOL_SENTINEL","cljs.core/native-satisfies?","rewrite-clj.node.protocols/MapQualifiable","rewrite-clj.custom-zipper.core/node","parent","rewrite-clj.custom-zipper.core/up","nsmap","and__5000__auto__","rewrite-clj.zip.seqz/namespaced-map?","rewrite-clj.custom-zipper.core/replace","rewrite-clj.node.protocols/map-context-apply","cljs.core/first","rewrite-clj.node.protocols/children","rewrite-clj.node.protocols/map-context-clear"],"sourcesContent":["(ns ^:no-doc rewrite-clj.zip.context\n  (:require [rewrite-clj.custom-zipper.core :as zraw]\n            [rewrite-clj.node.protocols :as protocols]\n            [rewrite-clj.zip.seqz :as seqz]\n            [rewrite-clj.zip.walk :as walk]))\n\n(defn- is-map-key? [zloc]\n  (->> (iterate zraw/left zloc)\n       (take-while identity)\n       count\n       odd?))\n\n(defn reapply-context\n  \"Returns `zloc` with namespaced map sexpr context to all symbols and keywords reapplied from current location downward.\n\n  Keywords and symbols:\n  * that are keys in a namespaced map will have namespaced map context applied\n  * otherwise will have any namespaced map context removed\n\n  You should only need to use this function if:\n  * you care about `sexpr` on keywords and symbols\n  * and you are moving keywords and symbols from a namespaced map to some other location.\"\n  [zloc]\n  (walk/postwalk zloc\n                 #(satisfies? protocols/MapQualifiable (zraw/node %))\n                 (fn [zloc]\n                   (let [parent (-> zloc zraw/up zraw/up)\n                         nsmap (when (and parent (seqz/namespaced-map? parent)) parent)]\n                     (if (and nsmap (is-map-key? zloc))\n                       (zraw/replace zloc (protocols/map-context-apply (zraw/node zloc) (first (protocols/children (zraw/node nsmap)))))\n                       (zraw/replace zloc (protocols/map-context-clear (zraw/node zloc))))))))\n"],"x_google_ignoreList":[0]}