{"version":3,"sources":["connect/models/domain.cljs"],"mappings":";AAaA,+BAAA,2CAAA,mEAAA,2CAAA,2DAAA,sFAAA,yEAAA,2CAAA,kEAAA,iEAAA,sEAAA,uFAAA,qEAAA,2CAAA,2DAAA,sFAAA,4EAAA,2CAAA,kEAAA,yEAAA,oEAAA,2CAAA,2DAAA,sFAAA,kEAAA,2CAAA,2DAAA,sFAAA,uEAAA,2CAAA,kEAAA,l5DAAKA;AAmBL,oCAAA,pCAAMC,gFAAaC;AAAnB,AACE,IAAAC,WAAA,AAAA;IAAAC,WAOKF;AAPL,AAAA,0GAAAC,SAAAC,yCAAAD,SAAAC,7JAACC,kDAAAA,qEAAAA;;AASH,AAcA","names":["connect.models.domain/schema","connect.models.domain/get-devices","db","G__96396","G__96397","datascript.core/q"],"sourcesContent":["(ns connect.models.domain\n  (:require\n   [datascript.core :as d]\n   ;; This is just for comment / debug use\n   ;; [stack.utils.model :as model]\n   ;;\n   ))\n\n\n;; Datascript schema only has to specify items that are unique or collections\n;; See https://cjohansen.no/a-unified-specification/ for a handy intro\n;; See https://github.com/kristianmandrup/datascript-tutorial/blob/master/create_schema.md\n;; See also Christian Johansen's post on a unified spec... https://cjohansen.no/a-unified-specification/\n(def schema\n  {:practice/name {;;:db/valueType :db.type/string\n                   :db/unique :db.unique/identity}\n   :practice/admins {:db/valueType :db.type/ref\n                     :db/cardinality :db.cardinality/many}\n   :provider/email {;;:db/valueType :db.type/string\n                    :db/unique :db.unique/identity}\n   :provider/practice {:db/valueType :db.type/ref}\n   ;; :provider/name {:db/valueType :db.type/string}\n   :device/serial {;;:db/valueType :db.type/bigint\n                   :db/unique :db.unique/identity}\n   :patient/email {:db/unique :db.unique/identity}\n   ;; Assume a patient only has one device at a time -- historical aspects covered by transaction history\n   :patient/device {:db/valueType :db.type/ref}})\n\n\n;; -------------------------------------------------------------------------------------\n;; -------------------------------------------------------------------------------------\n;; Queries\n(defn get-devices [db]\n  (d/q '[:find ?id ?serial ?hw_rev ?fw_rev ?bl_rev\n         :keys id serial hardware_rev firmware_rev bootloader_rev\n         :where\n         [?id :device/serial ?serial]\n         [?id :device/hardware_rev ?hw_rev]\n         [?id :device/firmware_rev ?fw_rev]\n         [?id :device/bootloader_rev ?bl_rev]]\n       db))\n\n(comment\n  ;; Add some devices\n  (model/transact!\n               [{:device/serial 10\n                 :device/hardware_rev 1\n                 :device/firmware_rev [15 2 7]\n                 :device/bootloader_rev [2 0 0]}\n                {:device/serial 54321\n                 :device/hardware_rev 4\n                 :device/firmware_rev [16 0 0]\n                 :device/bootloader_rev [2 2 0]}])\n  ;;--- end\n  )\n\n(comment\n  ;; Seed the database with provider info\n  (model/transact!\n               [{:practice/name \"Neuromod\"}\n                {:provider/email \"cormac.cannon@neuromoddevices.com\"\n                 :provider/name \"Cormac Cannon\"\n                 :provider/practice [:practice/name \"Neuromod\"]}\n                {:provider/email \"aloysius@bizarro.ie\"\n                 :provider/name \"Aloysius T. Furgleburger\"\n                 :provider/practice [:practice/name \"Neuromod\"]}])\n\n  (model/transact!\n               [{:practice/name \"NMD\"}\n                {:provider/email \"cormacc@gmail.com\"\n                 :provider/name \"Camroc Cnono\"\n                 :provider/practice [:practice/name \"NMD\"]}])\n\n  ;; Find all practices\n  (d/q '[:find ?e-id ?name\n         :where\n         [?e-id :practice/name ?name]]\n       @conn)\n\n  ;; Find providers in the Neuromod practice\n  (d/q '[:find ?name ?email\n         :where\n         [?p :provider/practice [:practice/name \"Neuromod\"]]\n         [?p :provider/name ?name]\n         [?p :provider/email ?email]]\n       @conn)\n  ;; Parameterised query to find providers by practice....\n\n  (def q-practice->providers '[:find ?name\n                               :in $ ?practice-name\n                               :where\n                               [?practice-id :practice/name ?practice-name]\n                               [?p :provider/practice ?practice-id]\n                               [?p :provider/name ?name]])\n  (d/q q-practice->providers @conn \"Neuromod\")\n\n;;\n  )\n"]}