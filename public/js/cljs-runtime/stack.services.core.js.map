{"version":3,"sources":["stack/services/core.cljs"],"mappings":"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","names":["stack.services.core/root-path-interceptor","stack.utils.dbfx/path","stack.services.core/path-interceptor","service-path","G__94038","G__94039","stack.services.core/init-reframe-integration","G__94041","G__94042","stack.utils.dbfx/reg-sub","db","_query-v","G__94043","G__94044","G__94045","stack.utils.dbfx/reg-event-db","stack.utils.dbfx/unwrap","p__94050","map__94053","cljs.core/--destructure-map","cljs.core.get","id","data","__run-fn-form","__kind","__ns","__id","__level","sf","taoensso.telemere.impl/*rt-sig-filter*","__inst","js/Date","__thread","__root0","taoensso.telemere.impl/*trace-root*","__otel-context1","__uid","__root1","__run-result","signal__42410__auto__","cljs.core/Delay","signal__42401__auto__","taoensso.telemere.impl/Signal","taoensso.telemere/*ctx*","taoensso.telemere.impl/*trace-parent*","temp__5821__auto__","taoensso.telemere/*middleware*","sig-middleware__42402__auto__","taoensso.telemere.impl/dispatch-signal!","taoensso.telemere.impl/WrappedSignal","cljs.core/assoc-in","stack.services.core/register","service-id","G__94067","G__94068","G__94069","G__94070","service-data","_"],"sourcesContent":["(ns stack.services.core\n  (:require\n   [taoensso.telemere :as t]\n   [stack.utils.dbfx :as dbfx]))\n\n(def root-path-interceptor (dbfx/path :services))\n\n(defn path-interceptor [service-path] (dbfx/path [:services] service-path))\n\n\n(defn init-reframe-integration []\n;; Parent (layer 2) sub for services\n  (dbfx/reg-sub\n   :services\n   (fn [db _query-v]\n     (:services db)))\n\n;; TODO: Could register the root service state subscription here using a new registered effect?\n;;       Though maybe tidier to keep it in the service itself...\n  (dbfx/reg-event-db\n   :init-service\n   [root-path-interceptor dbfx/unwrap]\n   (fn [db {:keys [id data]}]\n     (t/event! :service-init-ok {:data {:id id :data data}})\n     (assoc-in db [id] data))))\n\n;;-- .... layer 2.5 subscriptions\n;;   .... these used to be layer 2 before adding the intermediate :services key in app-db\n;;   .... they still don't transform data, leaving them outside the standard definition of level 3...\n(defn register\n  \"Define a subscription for the state of a given service\"\n  [service-id]\n  (t/event! ::service-register-ok {:data {:id service-id}})\n  (dbfx/reg-sub\n   service-id\n   :<- [:services]\n   (fn [service-data _]\n     (get service-data service-id))))\n"]}