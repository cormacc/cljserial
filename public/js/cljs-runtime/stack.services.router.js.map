{"version":3,"sources":["stack/services/router.cljs"],"mappings":"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","names":["stack.services.router/RoutePath","stack.services.router/RouteProps","stack.services.router/PureRouteProps","malli.util.merge","stack.services.router/Route","stack.services.router/PureRoute","G__98763","G__98764","G__98765","stack.utils.dbfx/reg-event-db","G__98767","stack.utils.dbfx/path","p__98769","vec__98770","cljs.core.nth","_current-match","_","new-match","G__98773","G__98774","stack.utils.dbfx/reg-sub","db","js/Error","%","stack.services.router/augment-reitit-route-props","route-props","match-name","malli.core.validate","malli.core/validate","name","active","cljs.core._EQ_","cljs.core.assoc","reitit.frontend.easy.href","stack.services.router/augment-routes","routes","iter__5480__auto__","s__98777","cljs.core/LazySeq","temp__5823__auto__","cljs.core/seq","cljs.core/chunked-seq?","c__5478__auto__","size__5479__auto__","cljs.core/count","b__98779","cljs.core/chunk-buffer","i__98778","vec__98782","cljs.core/-nth","cljs.core/chunk-append","cljs.core/chunk-cons","cljs.core/chunk","iter__98776","cljs.core/chunk-rest","vec__98785","cljs.core/first","cljs.core/cons","cljs.core/rest","route","stack.services.router/extract-valid-route","route-match","default-route","cljs.core/second","props__46991__auto__","props98790","uix.core/glue-args","vec__98792","map__98795","cljs.core/--destructure-map","cljs.core.get","f__46992__auto__","js/goog.DEBUG","stack.services.router/inject-routes","f__46909__auto__","*current-component*-orig-val__98808","uix.core/*current-component*","*current-component*-temp-val__98809","cljs.core/map?","js/Object.defineProperty","obj98812","js/window","js/window.uix","js/window.uix.dev","sig__46918__auto__","js/window.uix.dev.signature!","js/window.uix.dev.register!","layout","wrapper","G__98798","stack.utils.dbfx/use-sub","route-name","uix-fn98799","props__46996__auto__","props98800","vec__98801","f__46997__auto__","*current-component*-orig-val__98804","*current-component*-temp-val__98805","obj98807","_props","uix.compiler.alpha/component-element","stack.services.router/start!","p1__98813#","stack.utils.router/start!","G__98814","stack.utils.dbfx/dispatch","p__98815","map__98816","stack.services.router/render!","props","stack.utils.uix/render","uix.compiler.attributes/interpret-props","cljs.core/chunk-first"],"sourcesContent":["(ns stack.services.router\n  (:require [uix.core :refer [defui $]]\n            [malli.core :as m]\n            [malli.util :as mu]\n            [reitit.frontend.easy :as rfe-easy]\n            [stack.utils.router :as router]\n            [stack.utils.dbfx :as dbfx]\n            [stack.utils.uix :as uix-utils]))\n\n;; -------------------------------------------------------------------\n;; -- Specs ----------------------------------------------------------\n\n;; TODO: Does reitit define specs for any of this?\n(def RoutePath :string)\n\n;; The route props required by reitit\n(def RouteProps\n  [:map\n   [:name :keyword]\n   [:title :string]\n   ;;TODO: Return type of view function is a React element - replace :any below with something more accurate...\n   [:view [:=> :cat :any]]])\n\n;; ;; The route props augmented with the href for export/use in router-agnostic components\n(def PureRouteProps\n  (mu/merge\n   RouteProps\n   [:map\n    [:href :string]\n    [:active :boolean]]))\n\n(def Route [:tuple RoutePath RouteProps])\n(def PureRoute [:tuple RoutePath PureRouteProps])\n\n;; -------------------------------------------------------------------\n;; -- Events and subs ------------------------------------------------\n\n(dbfx/reg-event-db\n :route-matched\n ;;Interceptors\n [(dbfx/path [:route-match])]\n (fn [_current-match [_ new-match]]\n   new-match)) ;;Overwrite old with new\n\n(dbfx/reg-sub\n :route-match\n (fn [db _]\n   (:route-match db)))\n\n\n;; -------------------------------------------------------------------\n;; -- Helper functions -----------------------------------------------\n(defn- augment-reitit-route-props\n  \"Augment reitit minimal route props with a href derived from the title.\n  N.B. Calling this BEFORE starting the router will cause an error as depends on existing history.\"\n  [route-props match-name]\n  {:pre [(m/validate RouteProps route-props)]\n   :post [m/validate PureRouteProps %]}\n  (let [name (:name route-props)\n        active (= name match-name)]\n    (assoc route-props :href (rfe-easy/href name) :active active)))\n\n(defn- augment-routes\n  \"Augment each reitit route with a href derived from the title.\"\n  [routes match-name]\n  {:pre [(m/validate [:sequential Route] routes)]\n   :post [m/validate [:sequential PureRoute] %]}\n  (for [[route route-props] routes]\n    [route (augment-reitit-route-props route-props match-name)]))\n\n(defn- extract-valid-route [routes route-match]\n  (let [default-route (second (first routes))]\n    (if route-match\n      (:data route-match)\n      default-route)))\n\n(defui inject-routes [{:keys [routes layout wrapper]}]\n  (let [route-match (dbfx/use-sub [:route-match])\n        route (extract-valid-route routes route-match)\n        route-name (:name route)\n        layout (uix.core/fn [_props]\n                 ($ layout {:routes (augment-routes routes route-name)\n                            :view (:view route)}))]\n    (if wrapper\n      ($ wrapper {:layout layout})\n      ($ layout))))\n\n\n(defn start! [routes]\n  {:pre [(m/validate [:sequential Route] routes)]}\n  (router/start! routes #(dbfx/dispatch [:route-matched %])))\n\n(defn render! [{:keys [routes layout wrapper] :or {wrapper nil} :as props}]\n  (start! routes)\n  (uix-utils/render ($ inject-routes props)))\n"]}